{"dependencies":{"<gost94_core::Gost94Core<P> as core::clone::Clone>::clone":["core::marker::PhantomData","core::marker::Sized","gost94_core::Gost94Core","params::CryptoProParam","params::Gost94Params"],"<gost94_core::Gost94Core<P> as core::default::Default>::default":["core::marker::PhantomData","core::marker::Sized","gost94_core::Gost94Core","params::CryptoProParam","params::Gost94Params"],"<gost94_core::Gost94Core<P> as core::fmt::Debug>::fmt":["core::fmt::Formatter","core::marker::PhantomData","core::marker::Sized","core::result::Result","gost94_core::Gost94Core","params::CryptoProParam","params::Gost94Params"],"<gost94_core::Gost94Core<P> as digest::Reset>::reset":["core::marker::PhantomData","core::marker::Sized","gost94_core::Gost94Core","params::CryptoProParam","params::Gost94Params"],"<gost94_core::Gost94Core<P> as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<gost94_core::Gost94Core<P> as digest::core_api::FixedOutputCore>::finalize_fixed_core":["core::marker::PhantomData","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero","gost94_core::Gost94Core","params::CryptoProParam","params::Gost94Params"],"<gost94_core::Gost94Core<P> as digest::core_api::UpdateCore>::update_blocks":["core::marker::PhantomData","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","gost94_core::Gost94Core","params::CryptoProParam","params::Gost94Params"],"<params::CryptoProParam as core::clone::Clone>::clone":["params::CryptoProParam"],"<params::CryptoProParam as core::default::Default>::default":["params::CryptoProParam"],"<params::GOST28147UAParam as core::clone::Clone>::clone":["params::GOST28147UAParam"],"<params::GOST28147UAParam as core::default::Default>::default":["params::GOST28147UAParam"],"<params::S2015Param as core::clone::Clone>::clone":["params::S2015Param"],"<params::S2015Param as core::default::Default>::default":["params::S2015Param"],"<params::TestParam as core::clone::Clone>::clone":["params::TestParam"],"<params::TestParam as core::default::Default>::default":["params::TestParam"],"gost94_core::Gost94Core":["core::marker::PhantomData","core::marker::Sized","gost94_core::Gost94Core","params::CryptoProParam","params::Gost94Params"],"gost94_core::Gost94Core::<P>::compress":["core::marker::PhantomData","core::marker::Sized","gost94_core::Gost94Core","params::CryptoProParam","params::Gost94Params"],"gost94_core::Gost94Core::<P>::f":["core::marker::PhantomData","core::marker::Sized","gost94_core::Gost94Core","params::CryptoProParam","params::Gost94Params"],"gost94_core::Gost94Core::<P>::shuffle":["core::marker::PhantomData","core::marker::Sized","gost94_core::Gost94Core","params::CryptoProParam","params::Gost94Params"],"gost94_core::Gost94Core::<P>::update_n":["core::marker::PhantomData","core::marker::Sized","gost94_core::Gost94Core","params::CryptoProParam","params::Gost94Params"],"gost94_core::Gost94Core::<P>::update_sigma":["core::marker::PhantomData","core::marker::Sized","gost94_core::Gost94Core","params::CryptoProParam","params::Gost94Params"],"gost94_core::a":[],"gost94_core::adc":[],"gost94_core::encrypt":[],"gost94_core::g":[],"gost94_core::p":[],"gost94_core::psi":[],"gost94_core::sbox":[],"gost94_core::x":[],"gost94_core::x_mut":[],"params::CryptoProParam":["params::CryptoProParam"],"params::GOST28147UAParam":["params::GOST28147UAParam"],"params::S2015Param":["params::S2015Param"],"params::TestParam":["params::TestParam"]},"glob_path_import":{},"self_to_fn":{"gost94_core::Gost94Core":["Clone","impl<P: Gost94Params> AlgorithmName for Gost94Core<P> {\n    fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(P::NAME)\n    }\n}","impl<P: Gost94Params> BlockSizeUser for Gost94Core<P> {\n    type BlockSize = U32;\n}","impl<P: Gost94Params> BufferKindUser for Gost94Core<P> {\n    type BufferKind = Eager;\n}","impl<P: Gost94Params> Default for Gost94Core<P> {\n    #[inline]\n    fn default() -> Self {\n        Self {\n            h: P::H0,\n            n: Default::default(),\n            sigma: Default::default(),\n            _m: Default::default(),\n        }\n    }\n}","impl<P: Gost94Params> FixedOutputCore for Gost94Core<P> {\n    #[inline]\n    fn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n        if buffer.get_pos() != 0 {\n            self.update_n(buffer.get_pos());\n            self.compress(buffer.pad_with_zeros().as_ref());\n        }\n\n        let mut buf = Block::default();\n        for (o, v) in buf.chunks_exact_mut(8).zip(self.n.iter()) {\n            o.copy_from_slice(&v.to_le_bytes());\n        }\n        self.f(&buf);\n\n        for (o, v) in buf.chunks_exact_mut(8).zip(self.sigma.iter()) {\n            o.copy_from_slice(&v.to_le_bytes());\n        }\n        self.f(&buf);\n\n        out.copy_from_slice(&self.h);\n    }\n}","impl<P: Gost94Params> Gost94Core<P> {\n    fn shuffle(&mut self, m: &Block, s: &Block) {\n        let mut res = Block::default();\n        res.copy_from_slice(s);\n        for _ in 0..12 {\n            psi(&mut res);\n        }\n        x_mut(&mut res, m);\n        psi(&mut res);\n        x_mut(&mut self.h, &res);\n        for _ in 0..61 {\n            psi(&mut self.h);\n        }\n    }\n\n    fn f(&mut self, m: &Block) {\n        let mut s = Block::default();\n        s.copy_from_slice(&self.h);\n        let k = p(x(&self.h, m));\n        encrypt(&mut s[0..8], k, &P::S_BOX);\n\n        let u = a(self.h);\n        let v = a(a(*m));\n        let k = p(x(&u, &v));\n        encrypt(&mut s[8..16], k, &P::S_BOX);\n\n        let mut u = a(u);\n        x_mut(&mut u, &C);\n        let v = a(a(v));\n        let k = p(x(&u, &v));\n        encrypt(&mut s[16..24], k, &P::S_BOX);\n\n        let u = a(u);\n        let v = a(a(v));\n        let k = p(x(&u, &v));\n        encrypt(&mut s[24..32], k, &P::S_BOX);\n\n        self.shuffle(m, &s);\n    }\n\n    fn update_sigma(&mut self, m: &Block) {\n        let mut carry = 0;\n        for (a, chunk) in self.sigma.iter_mut().zip(m.chunks_exact(8)) {\n            let b = u64::from_le_bytes(chunk.try_into().unwrap());\n            adc(a, b, &mut carry);\n        }\n    }\n\n    fn update_n(&mut self, len: usize) {\n        let mut carry = 0;\n        adc(&mut self.n[0], (len as u64) << 3, &mut carry);\n        adc(&mut self.n[1], (len as u64) >> 61, &mut carry);\n        adc(&mut self.n[2], 0, &mut carry);\n        adc(&mut self.n[3], 0, &mut carry);\n    }\n\n    #[inline(always)]\n    fn compress(&mut self, block: &[u8; 32]) {\n        self.f(block);\n        self.update_sigma(block);\n    }\n}","impl<P: Gost94Params> HashMarker for Gost94Core<P> {}","impl<P: Gost94Params> OutputSizeUser for Gost94Core<P> {\n    type OutputSize = U32;\n}","impl<P: Gost94Params> Reset for Gost94Core<P> {\n    #[inline]\n    fn reset(&mut self) {\n        *self = Default::default();\n    }\n}","impl<P: Gost94Params> UpdateCore for Gost94Core<P> {\n    #[inline]\n    fn update_blocks(&mut self, blocks: &[TBlock<Self>]) {\n        let len = Self::BlockSize::USIZE * blocks.len();\n        self.update_n(len);\n        blocks.iter().for_each(|b| self.compress(b.as_ref()));\n    }\n}","impl<P: Gost94Params> fmt::Debug for Gost94Core<P> {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n        f.write_str(P::NAME)?;\n        f.write_str(\"Core { .. }\")\n    }\n}"],"params::CryptoProParam":["Clone","Copy","Default","impl Gost94Params for CryptoProParam {\n    const S_BOX: SBox = [\n        [10, 4, 5, 6, 8, 1, 3, 7, 13, 12, 14, 0, 9, 2, 11, 15],\n        [5, 15, 4, 0, 2, 13, 11, 9, 1, 7, 6, 3, 12, 14, 10, 8],\n        [7, 15, 12, 14, 9, 4, 1, 0, 3, 11, 5, 2, 6, 10, 8, 13],\n        [4, 10, 7, 12, 0, 15, 2, 8, 14, 1, 6, 5, 13, 11, 9, 3],\n        [7, 6, 4, 11, 9, 12, 2, 10, 1, 8, 0, 14, 15, 13, 3, 5],\n        [7, 6, 2, 4, 13, 9, 15, 0, 10, 1, 5, 11, 8, 14, 12, 3],\n        [13, 14, 4, 1, 7, 0, 5, 10, 3, 12, 8, 15, 6, 2, 9, 11],\n        [1, 3, 10, 9, 5, 11, 4, 15, 8, 6, 7, 14, 13, 0, 2, 12],\n    ];\n    const H0: Block = [0; 32];\n    const NAME: &'static str = \"Gost94CryptoPro\";\n}"],"params::GOST28147UAParam":["Clone","Copy","Default","impl Gost94Params for GOST28147UAParam {\n    const S_BOX: SBox = [\n        [10, 9, 13, 6, 14, 11, 4, 5, 15, 1, 3, 12, 7, 0, 8, 2],\n        [8, 0, 12, 4, 9, 6, 7, 11, 2, 3, 1, 15, 5, 14, 10, 13],\n        [15, 6, 5, 8, 14, 11, 10, 4, 12, 0, 3, 7, 2, 9, 1, 13],\n        [3, 8, 13, 9, 6, 11, 15, 0, 2, 5, 12, 10, 4, 14, 1, 7],\n        [15, 8, 14, 9, 7, 2, 0, 13, 12, 6, 1, 5, 11, 4, 3, 10],\n        [2, 8, 9, 7, 5, 15, 0, 11, 12, 1, 13, 14, 10, 3, 6, 4],\n        [3, 8, 11, 5, 6, 4, 14, 10, 2, 12, 1, 7, 9, 15, 13, 0],\n        [1, 2, 3, 14, 6, 13, 11, 8, 15, 10, 12, 5, 7, 9, 0, 4],\n    ];\n    const H0: Block = [0; 32];\n    const NAME: &'static str = \"Gost28147UA\";\n}"],"params::S2015Param":["Clone","Copy","Default","impl Gost94Params for S2015Param {\n    const S_BOX: SBox = [\n        [12, 4, 6, 2, 10, 5, 11, 9, 14, 8, 13, 7, 0, 3, 15, 1],\n        [6, 8, 2, 3, 9, 10, 5, 12, 1, 14, 4, 7, 11, 13, 0, 15],\n        [11, 3, 5, 8, 2, 15, 10, 13, 14, 1, 7, 4, 12, 9, 6, 0],\n        [12, 8, 2, 1, 13, 4, 15, 6, 7, 0, 10, 5, 3, 14, 9, 11],\n        [7, 15, 5, 10, 8, 1, 6, 13, 0, 9, 3, 14, 11, 4, 2, 12],\n        [5, 13, 15, 6, 9, 2, 12, 10, 11, 7, 8, 1, 4, 3, 14, 0],\n        [8, 14, 2, 5, 6, 9, 1, 12, 15, 4, 11, 0, 13, 10, 3, 7],\n        [1, 7, 14, 13, 0, 5, 8, 3, 4, 15, 10, 6, 9, 12, 11, 2],\n    ];\n    const H0: Block = [0; 32];\n    const NAME: &'static str = \"Gost94s2015\";\n}"],"params::TestParam":["Clone","Copy","Default","impl Gost94Params for TestParam {\n    const S_BOX: SBox = [\n        [4, 10, 9, 2, 13, 8, 0, 14, 6, 11, 1, 12, 7, 15, 5, 3],\n        [14, 11, 4, 12, 6, 13, 15, 10, 2, 3, 8, 1, 0, 7, 5, 9],\n        [5, 8, 1, 13, 10, 3, 4, 2, 14, 15, 12, 7, 6, 0, 9, 11],\n        [7, 13, 10, 1, 0, 8, 9, 15, 14, 4, 6, 12, 11, 2, 5, 3],\n        [6, 12, 7, 1, 5, 15, 13, 8, 4, 10, 9, 14, 0, 3, 11, 2],\n        [4, 11, 10, 0, 7, 2, 1, 13, 3, 6, 8, 5, 9, 12, 15, 14],\n        [13, 11, 4, 1, 3, 15, 5, 9, 0, 10, 14, 7, 6, 8, 2, 12],\n        [1, 15, 13, 0, 5, 7, 10, 4, 9, 2, 3, 14, 6, 11, 8, 12],\n    ];\n    const H0: Block = [0; 32];\n    const NAME: &'static str = \"Gost94Test\";\n}"]},"single_path_import":{"digest":"digest","digest::Digest":"Digest","gost94_core::Gost94Core":"Gost94Core"},"srcs":{"<gost94_core::Gost94Core<P> as core::default::Default>::default":["#[inline]\nfn default() -> Self{\n        Self {\n            h: P::H0,\n            n: Default::default(),\n            sigma: Default::default(),\n            _m: Default::default(),\n        }\n    }","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"<gost94_core::Gost94Core<P> as core::fmt::Debug>::fmt":["fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error>{\n        f.write_str(P::NAME)?;\n        f.write_str(\"Core { .. }\")\n    }","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"<gost94_core::Gost94Core<P> as digest::Reset>::reset":["#[inline]\nfn reset(&mut self){\n        *self = Default::default();\n    }","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"<gost94_core::Gost94Core<P> as digest::core_api::AlgorithmName>::write_alg_name":["fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(P::NAME)\n    }","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"<gost94_core::Gost94Core<P> as digest::core_api::FixedOutputCore>::finalize_fixed_core":["#[inline]\nfn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n        if buffer.get_pos() != 0 {\n            self.update_n(buffer.get_pos());\n            self.compress(buffer.pad_with_zeros().as_ref());\n        }\n\n        let mut buf = Block::default();\n        for (o, v) in buf.chunks_exact_mut(8).zip(self.n.iter()) {\n            o.copy_from_slice(&v.to_le_bytes());\n        }\n        self.f(&buf);\n\n        for (o, v) in buf.chunks_exact_mut(8).zip(self.sigma.iter()) {\n            o.copy_from_slice(&v.to_le_bytes());\n        }\n        self.f(&buf);\n\n        out.copy_from_slice(&self.h);\n    }","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"<gost94_core::Gost94Core<P> as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[TBlock<Self>]){\n        let len = Self::BlockSize::USIZE * blocks.len();\n        self.update_n(len);\n        blocks.iter().for_each(|b| self.compress(b.as_ref()));\n    }","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::Gost94Core":["/// Core GOST94 algorithm generic over parameters.\npub struct Gost94Core<P: Gost94Params> {\n    h: Block,\n    n: [u64; 4],\n    sigma: [u64; 4],\n    _m: core::marker::PhantomData<P>,\n}","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::Gost94Core::<P>::compress":["#[inline(always)]\nfn compress(&mut self, block: &[u8; 32]){\n        self.f(block);\n        self.update_sigma(block);\n    }","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::Gost94Core::<P>::f":["fn f(&mut self, m: &Block){\n        let mut s = Block::default();\n        s.copy_from_slice(&self.h);\n        let k = p(x(&self.h, m));\n        encrypt(&mut s[0..8], k, &P::S_BOX);\n\n        let u = a(self.h);\n        let v = a(a(*m));\n        let k = p(x(&u, &v));\n        encrypt(&mut s[8..16], k, &P::S_BOX);\n\n        let mut u = a(u);\n        x_mut(&mut u, &C);\n        let v = a(a(v));\n        let k = p(x(&u, &v));\n        encrypt(&mut s[16..24], k, &P::S_BOX);\n\n        let u = a(u);\n        let v = a(a(v));\n        let k = p(x(&u, &v));\n        encrypt(&mut s[24..32], k, &P::S_BOX);\n\n        self.shuffle(m, &s);\n    }","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::Gost94Core::<P>::shuffle":["fn shuffle(&mut self, m: &Block, s: &Block){\n        let mut res = Block::default();\n        res.copy_from_slice(s);\n        for _ in 0..12 {\n            psi(&mut res);\n        }\n        x_mut(&mut res, m);\n        psi(&mut res);\n        x_mut(&mut self.h, &res);\n        for _ in 0..61 {\n            psi(&mut self.h);\n        }\n    }","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::Gost94Core::<P>::update_n":["fn update_n(&mut self, len: usize){\n        let mut carry = 0;\n        adc(&mut self.n[0], (len as u64) << 3, &mut carry);\n        adc(&mut self.n[1], (len as u64) >> 61, &mut carry);\n        adc(&mut self.n[2], 0, &mut carry);\n        adc(&mut self.n[3], 0, &mut carry);\n    }","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::Gost94Core::<P>::update_sigma":["fn update_sigma(&mut self, m: &Block){\n        let mut carry = 0;\n        for (a, chunk) in self.sigma.iter_mut().zip(m.chunks_exact(8)) {\n            let b = u64::from_le_bytes(chunk.try_into().unwrap());\n            adc(a, b, &mut carry);\n        }\n    }","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::a":["fn a(x: Block) -> Block{\n    let mut out = Block::default();\n    out[..24].clone_from_slice(&x[8..]);\n    for i in 0..8 {\n        out[24 + i] = x[i] ^ x[i + 8];\n    }\n    out\n}","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::adc":["#[inline(always)]\nfn adc(a: &mut u64, b: u64, carry: &mut u64){\n    let ret = (*a as u128) + (b as u128) + (*carry as u128);\n    *a = ret as u64;\n    *carry = (ret >> 64) as u64;\n}","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::encrypt":["#[allow(clippy::needless_range_loop)]\nfn encrypt(msg: &mut [u8], key: Block, sbox: &SBox){\n    let mut k = [0u32; 8];\n    let mut a = u32::from_le_bytes(msg[0..4].try_into().unwrap());\n    let mut b = u32::from_le_bytes(msg[4..8].try_into().unwrap());\n    for (o, chunk) in k.iter_mut().zip(key.chunks_exact(4)) {\n        *o = u32::from_le_bytes(chunk.try_into().unwrap());\n    }\n\n    for _ in 0..3 {\n        for i in 0..8 {\n            let t = b ^ g(a, k[i], sbox);\n            b = a;\n            a = t;\n        }\n    }\n    for i in (0..8).rev() {\n        let t = b ^ g(a, k[i], sbox);\n        b = a;\n        a = t;\n    }\n\n    msg[0..4].copy_from_slice(&b.to_le_bytes());\n    msg[4..8].copy_from_slice(&a.to_le_bytes());\n}","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::g":["fn g(a: u32, k: u32, s: &SBox) -> u32{\n    sbox(a.wrapping_add(k), s).rotate_left(11)\n}","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::p":["fn p(y: Block) -> Block{\n    let mut out = Block::default();\n\n    for i in 0..4 {\n        for k in 0..8 {\n            out[i + 4 * k] = y[8 * i + k];\n        }\n    }\n    out\n}","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::psi":["fn psi(block: &mut Block){\n    let mut out = Block::default();\n    out[..30].copy_from_slice(&block[2..]);\n    out[30..].copy_from_slice(&block[..2]);\n\n    out[30] ^= block[2];\n    out[31] ^= block[3];\n\n    out[30] ^= block[4];\n    out[31] ^= block[5];\n\n    out[30] ^= block[6];\n    out[31] ^= block[7];\n\n    out[30] ^= block[24];\n    out[31] ^= block[25];\n\n    out[30] ^= block[30];\n    out[31] ^= block[31];\n\n    block.copy_from_slice(&out);\n}","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::sbox":["fn sbox(a: u32, s: &SBox) -> u32{\n    let mut v = 0;\n\n    #[allow(clippy::needless_range_loop)]\n    for i in 0..8 {\n        let shft = 4 * i;\n        let k = ((a & (0b1111u32 << shft)) >> shft) as usize;\n        v += u32::from(s[i][k]) << shft;\n    }\n\n    v\n}","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::x":["fn x(a: &Block, b: &Block) -> Block{\n    let mut out = Block::default();\n    for i in 0..32 {\n        out[i] = a[i] ^ b[i];\n    }\n    out\n}","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"gost94_core::x_mut":["fn x_mut(a: &mut Block, b: &Block){\n    for i in 0..32 {\n        a[i] ^= b[i];\n    }\n}","Real(LocalPath(\"gost94/src/gost94_core.rs\"))"],"params::CryptoProParam":["/// CryptoPro parameters.\npub struct CryptoProParam;","Real(LocalPath(\"gost94/src/params.rs\"))"],"params::GOST28147UAParam":["/// S-Box defined in GOST 34.311-95 & GOST 28147:2009.\npub struct GOST28147UAParam;","Real(LocalPath(\"gost94/src/params.rs\"))"],"params::Gost94Params":["/// Trait for storing parameter constants.\npub trait Gost94Params {\n    /// S-box value.\n    const S_BOX: SBox;\n    /// Initialization vector value.\n    const H0: Block;\n    /// Algorithm name\n    const NAME: &'static str;\n}","Real(LocalPath(\"gost94/src/params.rs\"))"],"params::S2015Param":["/// S-Box defined in GOST R 34.12-2015.\npub struct S2015Param;","Real(LocalPath(\"gost94/src/params.rs\"))"],"params::TestParam":["/// Test parameters.\npub struct TestParam;","Real(LocalPath(\"gost94/src/params.rs\"))"]},"struct_constructor":{"[u8; 32]":["x"],"core::result::Result":["fmt","write_alg_name"],"gost94_core::Gost94Core":["clone","default"],"params::CryptoProParam":["clone","default"],"params::GOST28147UAParam":["clone","default"],"params::S2015Param":["clone","default"],"params::TestParam":["clone","default"]},"struct_to_trait":{"gost94_core::Gost94Core":["core::clone::Clone","core::default::Default","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::Reset","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::FixedOutputCore","digest::core_api::UpdateCore"],"params::CryptoProParam":["core::clone::Clone","core::default::Default","core::marker::Copy","params::Gost94Params"],"params::GOST28147UAParam":["core::clone::Clone","core::default::Default","core::marker::Copy","params::Gost94Params"],"params::S2015Param":["core::clone::Clone","core::default::Default","core::marker::Copy","params::Gost94Params"],"params::TestParam":["core::clone::Clone","core::default::Default","core::marker::Copy","params::Gost94Params"]},"targets":{"<gost94_core::Gost94Core<P> as core::default::Default>::default":["default","Real(LocalPath(\"gost94/src/gost94_core.rs\"))","core::default::Default"],"<gost94_core::Gost94Core<P> as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"gost94/src/gost94_core.rs\"))","core::fmt::Debug"],"<gost94_core::Gost94Core<P> as digest::Reset>::reset":["reset","Real(LocalPath(\"gost94/src/gost94_core.rs\"))","digest::Reset"],"<gost94_core::Gost94Core<P> as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"gost94/src/gost94_core.rs\"))","digest::core_api::AlgorithmName"],"<gost94_core::Gost94Core<P> as digest::core_api::FixedOutputCore>::finalize_fixed_core":["finalize_fixed_core","Real(LocalPath(\"gost94/src/gost94_core.rs\"))","digest::core_api::FixedOutputCore"],"<gost94_core::Gost94Core<P> as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"gost94/src/gost94_core.rs\"))","digest::core_api::UpdateCore"],"gost94_core::Gost94Core::<P>::compress":["compress","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::Gost94Core::<P>::f":["f","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::Gost94Core::<P>::shuffle":["shuffle","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::Gost94Core::<P>::update_n":["update_n","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::Gost94Core::<P>::update_sigma":["update_sigma","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::a":["a","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::adc":["adc","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::encrypt":["encrypt","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::g":["g","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::p":["p","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::psi":["psi","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::sbox":["sbox","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::x":["x","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""],"gost94_core::x_mut":["x_mut","Real(LocalPath(\"gost94/src/gost94_core.rs\"))",""]},"trait_to_struct":{"core::clone::Clone":["gost94_core::Gost94Core","params::CryptoProParam","params::GOST28147UAParam","params::S2015Param","params::TestParam"],"core::default::Default":["gost94_core::Gost94Core","params::CryptoProParam","params::GOST28147UAParam","params::S2015Param","params::TestParam"],"core::fmt::Debug":["gost94_core::Gost94Core"],"core::marker::Copy":["params::CryptoProParam","params::GOST28147UAParam","params::S2015Param","params::TestParam"],"digest::HashMarker":["gost94_core::Gost94Core"],"digest::OutputSizeUser":["gost94_core::Gost94Core"],"digest::Reset":["gost94_core::Gost94Core"],"digest::core_api::AlgorithmName":["gost94_core::Gost94Core"],"digest::core_api::BlockSizeUser":["gost94_core::Gost94Core"],"digest::core_api::BufferKindUser":["gost94_core::Gost94Core"],"digest::core_api::FixedOutputCore":["gost94_core::Gost94Core"],"digest::core_api::UpdateCore":["gost94_core::Gost94Core"],"params::Gost94Params":["params::CryptoProParam","params::GOST28147UAParam","params::S2015Param","params::TestParam"]},"type_to_def_path":{"gost94_core::Gost94Core<P>":"gost94_core::Gost94Core","params::CryptoProParam":"params::CryptoProParam","params::GOST28147UAParam":"params::GOST28147UAParam","params::S2015Param":"params::S2015Param","params::TestParam":"params::TestParam"}}