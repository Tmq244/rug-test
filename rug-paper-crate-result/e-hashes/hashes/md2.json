{"dependencies":{"<Md2Core as core::clone::Clone>::clone":["Md2Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"<Md2Core as core::default::Default>::default":["Md2Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"<Md2Core as core::fmt::Debug>::fmt":["Md2Core","core::fmt::Formatter","core::marker::Sized","core::result::Result","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"<Md2Core as digest::Reset>::reset":["Md2Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"<Md2Core as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Md2Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["Md2Core","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero"],"<Md2Core as digest::core_api::UpdateCore>::update_blocks":["Md2Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"Md2Core":["Md2Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"Md2Core::compress":["Md2Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"]},"glob_path_import":{},"self_to_fn":{"Md2Core":["Clone","impl AlgorithmName for Md2Core {\n    fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"Md2\")\n    }\n}","impl BlockSizeUser for Md2Core {\n    type BlockSize = U16;\n}","impl BufferKindUser for Md2Core {\n    type BufferKind = Eager;\n}","impl Default for Md2Core {\n    #[inline]\n    fn default() -> Self {\n        Self {\n            x: [0; 48],\n            checksum: Default::default(),\n        }\n    }\n}","impl FixedOutputCore for Md2Core {\n    #[inline]\n    fn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n        let pos = buffer.get_pos();\n        let rem = buffer.remaining() as u8;\n        let block = buffer.pad_with_zeros();\n        block[pos..].iter_mut().for_each(|b| *b = rem);\n\n        self.compress(block);\n        let checksum = self.checksum;\n        self.compress(&checksum);\n        out.copy_from_slice(&self.x[0..16]);\n    }\n}","impl HashMarker for Md2Core {}","impl Md2Core {\n    fn compress(&mut self, block: &Block<Self>) {\n        // Update state\n        for j in 0..16 {\n            self.x[16 + j] = block[j];\n            self.x[32 + j] = self.x[16 + j] ^ self.x[j];\n        }\n\n        let mut t = 0u8;\n        for j in 0..18u8 {\n            for k in 0..48 {\n                self.x[k] ^= consts::S[t as usize];\n                t = self.x[k];\n            }\n            t = t.wrapping_add(j);\n        }\n\n        // Update checksum\n        let mut l = self.checksum[15];\n        for j in 0..16 {\n            self.checksum[j] ^= consts::S[(block[j] ^ l) as usize];\n            l = self.checksum[j];\n        }\n    }\n}","impl OutputSizeUser for Md2Core {\n    type OutputSize = U16;\n}","impl Reset for Md2Core {\n    #[inline]\n    fn reset(&mut self) {\n        *self = Default::default();\n    }\n}","impl UpdateCore for Md2Core {\n    #[inline]\n    fn update_blocks(&mut self, blocks: &[Block<Self>]) {\n        for block in blocks {\n            self.compress(block)\n        }\n    }\n}","impl fmt::Debug for Md2Core {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"Md2Core { ... }\")\n    }\n}"]},"single_path_import":{"digest":"digest","digest::Digest":"Digest"},"srcs":{"<Md2Core as core::default::Default>::default":["#[inline]\nfn default() -> Self{\n        Self {\n            x: [0; 48],\n            checksum: Default::default(),\n        }\n    }","Real(LocalPath(\"md2/src/lib.rs\"))"],"<Md2Core as core::fmt::Debug>::fmt":["fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"Md2Core { ... }\")\n    }","Real(LocalPath(\"md2/src/lib.rs\"))"],"<Md2Core as digest::Reset>::reset":["#[inline]\nfn reset(&mut self){\n        *self = Default::default();\n    }","Real(LocalPath(\"md2/src/lib.rs\"))"],"<Md2Core as digest::core_api::AlgorithmName>::write_alg_name":["fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"Md2\")\n    }","Real(LocalPath(\"md2/src/lib.rs\"))"],"<Md2Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["#[inline]\nfn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n        let pos = buffer.get_pos();\n        let rem = buffer.remaining() as u8;\n        let block = buffer.pad_with_zeros();\n        block[pos..].iter_mut().for_each(|b| *b = rem);\n\n        self.compress(block);\n        let checksum = self.checksum;\n        self.compress(&checksum);\n        out.copy_from_slice(&self.x[0..16]);\n    }","Real(LocalPath(\"md2/src/lib.rs\"))"],"<Md2Core as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[Block<Self>]){\n        for block in blocks {\n            self.compress(block)\n        }\n    }","Real(LocalPath(\"md2/src/lib.rs\"))"],"Md2Core":["/// Core MD2 hasher state.\npub struct Md2Core {\n    x: [u8; 48],\n    checksum: Block<Self>,\n}","Real(LocalPath(\"md2/src/lib.rs\"))"],"Md2Core::compress":["fn compress(&mut self, block: &Block<Self>){\n        // Update state\n        for j in 0..16 {\n            self.x[16 + j] = block[j];\n            self.x[32 + j] = self.x[16 + j] ^ self.x[j];\n        }\n\n        let mut t = 0u8;\n        for j in 0..18u8 {\n            for k in 0..48 {\n                self.x[k] ^= consts::S[t as usize];\n                t = self.x[k];\n            }\n            t = t.wrapping_add(j);\n        }\n\n        // Update checksum\n        let mut l = self.checksum[15];\n        for j in 0..16 {\n            self.checksum[j] ^= consts::S[(block[j] ^ l) as usize];\n            l = self.checksum[j];\n        }\n    }","Real(LocalPath(\"md2/src/lib.rs\"))"]},"struct_constructor":{"Md2Core":["clone","default"],"core::result::Result":["fmt","write_alg_name"]},"struct_to_trait":{"Md2Core":["core::clone::Clone","core::default::Default","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::Reset","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::FixedOutputCore","digest::core_api::UpdateCore"]},"targets":{"<Md2Core as core::default::Default>::default":["default","Real(LocalPath(\"md2/src/lib.rs\"))","core::default::Default"],"<Md2Core as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"md2/src/lib.rs\"))","core::fmt::Debug"],"<Md2Core as digest::Reset>::reset":["reset","Real(LocalPath(\"md2/src/lib.rs\"))","digest::Reset"],"<Md2Core as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"md2/src/lib.rs\"))","digest::core_api::AlgorithmName"],"<Md2Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["finalize_fixed_core","Real(LocalPath(\"md2/src/lib.rs\"))","digest::core_api::FixedOutputCore"],"<Md2Core as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"md2/src/lib.rs\"))","digest::core_api::UpdateCore"],"Md2Core::compress":["compress","Real(LocalPath(\"md2/src/lib.rs\"))",""]},"trait_to_struct":{"core::clone::Clone":["Md2Core"],"core::default::Default":["Md2Core"],"core::fmt::Debug":["Md2Core"],"digest::HashMarker":["Md2Core"],"digest::OutputSizeUser":["Md2Core"],"digest::Reset":["Md2Core"],"digest::core_api::AlgorithmName":["Md2Core"],"digest::core_api::BlockSizeUser":["Md2Core"],"digest::core_api::BufferKindUser":["Md2Core"],"digest::core_api::FixedOutputCore":["Md2Core"],"digest::core_api::UpdateCore":["Md2Core"]},"type_to_def_path":{"Md2Core":"Md2Core"}}