{"dependencies":{"<Md4Core as core::clone::Clone>::clone":["Md4Core"],"<Md4Core as core::default::Default>::default":["Md4Core"],"<Md4Core as core::fmt::Debug>::fmt":["Md4Core","core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Md4Core as digest::Reset>::reset":["Md4Core"],"<Md4Core as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Md4Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["Md4Core","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero"],"<Md4Core as digest::core_api::UpdateCore>::update_blocks":["Md4Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"Md4Core":["Md4Core"],"compress":["core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"compress::f":[],"compress::g":[],"compress::h":[],"compress::op1":[],"compress::op2":[],"compress::op3":[]},"glob_path_import":{},"self_to_fn":{"Md4Core":["Clone","impl AlgorithmName for Md4Core {\n    fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"Md4\")\n    }\n}","impl BlockSizeUser for Md4Core {\n    type BlockSize = U64;\n}","impl BufferKindUser for Md4Core {\n    type BufferKind = Eager;\n}","impl Default for Md4Core {\n    #[inline]\n    fn default() -> Self {\n        let state = [0x6745_2301, 0xEFCD_AB89, 0x98BA_DCFE, 0x1032_5476];\n        Self {\n            state,\n            block_len: 0,\n        }\n    }\n}","impl FixedOutputCore for Md4Core {\n    #[inline]\n    fn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n        let bit_len = self\n            .block_len\n            .wrapping_mul(Self::BlockSize::U64)\n            .wrapping_add(buffer.get_pos() as u64)\n            .wrapping_mul(8);\n        let mut state = self.state;\n        buffer.len64_padding_le(bit_len, |block| compress(&mut state, block));\n\n        for (chunk, v) in out.chunks_exact_mut(4).zip(state.iter()) {\n            chunk.copy_from_slice(&v.to_le_bytes());\n        }\n    }\n}","impl HashMarker for Md4Core {}","impl OutputSizeUser for Md4Core {\n    type OutputSize = U16;\n}","impl Reset for Md4Core {\n    #[inline]\n    fn reset(&mut self) {\n        *self = Default::default();\n    }\n}","impl UpdateCore for Md4Core {\n    #[inline]\n    fn update_blocks(&mut self, blocks: &[Block<Self>]) {\n        self.block_len = self.block_len.wrapping_add(blocks.len() as u64);\n        for block in blocks {\n            compress(&mut self.state, block);\n        }\n    }\n}","impl fmt::Debug for Md4Core {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"Md4Core { ... }\")\n    }\n}"]},"single_path_import":{"digest":"digest","digest::Digest":"Digest"},"srcs":{"<Md4Core as core::default::Default>::default":["#[inline]\nfn default() -> Self{\n        let state = [0x6745_2301, 0xEFCD_AB89, 0x98BA_DCFE, 0x1032_5476];\n        Self {\n            state,\n            block_len: 0,\n        }\n    }","Real(LocalPath(\"md4/src/lib.rs\"))"],"<Md4Core as core::fmt::Debug>::fmt":["fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"Md4Core { ... }\")\n    }","Real(LocalPath(\"md4/src/lib.rs\"))"],"<Md4Core as digest::Reset>::reset":["#[inline]\nfn reset(&mut self){\n        *self = Default::default();\n    }","Real(LocalPath(\"md4/src/lib.rs\"))"],"<Md4Core as digest::core_api::AlgorithmName>::write_alg_name":["fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"Md4\")\n    }","Real(LocalPath(\"md4/src/lib.rs\"))"],"<Md4Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["#[inline]\nfn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n        let bit_len = self\n            .block_len\n            .wrapping_mul(Self::BlockSize::U64)\n            .wrapping_add(buffer.get_pos() as u64)\n            .wrapping_mul(8);\n        let mut state = self.state;\n        buffer.len64_padding_le(bit_len, |block| compress(&mut state, block));\n\n        for (chunk, v) in out.chunks_exact_mut(4).zip(state.iter()) {\n            chunk.copy_from_slice(&v.to_le_bytes());\n        }\n    }","Real(LocalPath(\"md4/src/lib.rs\"))"],"<Md4Core as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[Block<Self>]){\n        self.block_len = self.block_len.wrapping_add(blocks.len() as u64);\n        for block in blocks {\n            compress(&mut self.state, block);\n        }\n    }","Real(LocalPath(\"md4/src/lib.rs\"))"],"Md4Core":["pub struct Md4Core {\n    block_len: u64,\n    state: [u32; 4],\n}","Real(LocalPath(\"md4/src/lib.rs\"))"],"compress":["fn compress(state: &mut [u32; 4], input: &Block<Md4Core>){\n    fn f(x: u32, y: u32, z: u32) -> u32 {\n        (x & y) | (!x & z)\n    }\n\n    fn g(x: u32, y: u32, z: u32) -> u32 {\n        (x & y) | (x & z) | (y & z)\n    }\n\n    fn h(x: u32, y: u32, z: u32) -> u32 {\n        x ^ y ^ z\n    }\n\n    fn op1(a: u32, b: u32, c: u32, d: u32, k: u32, s: u32) -> u32 {\n        a.wrapping_add(f(b, c, d)).wrapping_add(k).rotate_left(s)\n    }\n\n    fn op2(a: u32, b: u32, c: u32, d: u32, k: u32, s: u32) -> u32 {\n        a.wrapping_add(g(b, c, d))\n            .wrapping_add(k)\n            .wrapping_add(0x5A82_7999)\n            .rotate_left(s)\n    }\n\n    fn op3(a: u32, b: u32, c: u32, d: u32, k: u32, s: u32) -> u32 {\n        a.wrapping_add(h(b, c, d))\n            .wrapping_add(k)\n            .wrapping_add(0x6ED9_EBA1)\n            .rotate_left(s)\n    }\n\n    let mut a = state[0];\n    let mut b = state[1];\n    let mut c = state[2];\n    let mut d = state[3];\n\n    // load block to data\n    let mut data = [0u32; 16];\n    for (o, chunk) in data.iter_mut().zip(input.chunks_exact(4)) {\n        *o = u32::from_le_bytes(chunk.try_into().unwrap());\n    }\n\n    // round 1\n    for &i in &[0, 4, 8, 12] {\n        a = op1(a, b, c, d, data[i], 3);\n        d = op1(d, a, b, c, data[i + 1], 7);\n        c = op1(c, d, a, b, data[i + 2], 11);\n        b = op1(b, c, d, a, data[i + 3], 19);\n    }\n\n    // round 2\n    for i in 0..4 {\n        a = op2(a, b, c, d, data[i], 3);\n        d = op2(d, a, b, c, data[i + 4], 5);\n        c = op2(c, d, a, b, data[i + 8], 9);\n        b = op2(b, c, d, a, data[i + 12], 13);\n    }\n\n    // round 3\n    for &i in &[0, 2, 1, 3] {\n        a = op3(a, b, c, d, data[i], 3);\n        d = op3(d, a, b, c, data[i + 8], 9);\n        c = op3(c, d, a, b, data[i + 4], 11);\n        b = op3(b, c, d, a, data[i + 12], 15);\n    }\n\n    state[0] = state[0].wrapping_add(a);\n    state[1] = state[1].wrapping_add(b);\n    state[2] = state[2].wrapping_add(c);\n    state[3] = state[3].wrapping_add(d);\n}","Real(LocalPath(\"md4/src/lib.rs\"))"],"compress::f":["fn f(x: u32, y: u32, z: u32) -> u32{\n        (x & y) | (!x & z)\n    }","Real(LocalPath(\"md4/src/lib.rs\"))"],"compress::g":["fn g(x: u32, y: u32, z: u32) -> u32{\n        (x & y) | (x & z) | (y & z)\n    }","Real(LocalPath(\"md4/src/lib.rs\"))"],"compress::h":["fn h(x: u32, y: u32, z: u32) -> u32{\n        x ^ y ^ z\n    }","Real(LocalPath(\"md4/src/lib.rs\"))"],"compress::op1":["fn op1(a: u32, b: u32, c: u32, d: u32, k: u32, s: u32) -> u32{\n        a.wrapping_add(f(b, c, d)).wrapping_add(k).rotate_left(s)\n    }","Real(LocalPath(\"md4/src/lib.rs\"))"],"compress::op2":["fn op2(a: u32, b: u32, c: u32, d: u32, k: u32, s: u32) -> u32{\n        a.wrapping_add(g(b, c, d))\n            .wrapping_add(k)\n            .wrapping_add(0x5A82_7999)\n            .rotate_left(s)\n    }","Real(LocalPath(\"md4/src/lib.rs\"))"],"compress::op3":["fn op3(a: u32, b: u32, c: u32, d: u32, k: u32, s: u32) -> u32{\n        a.wrapping_add(h(b, c, d))\n            .wrapping_add(k)\n            .wrapping_add(0x6ED9_EBA1)\n            .rotate_left(s)\n    }","Real(LocalPath(\"md4/src/lib.rs\"))"]},"struct_constructor":{"Md4Core":["clone","default"],"core::result::Result":["fmt","write_alg_name"]},"struct_to_trait":{"Md4Core":["core::clone::Clone","core::default::Default","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::Reset","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::FixedOutputCore","digest::core_api::UpdateCore"]},"targets":{"<Md4Core as core::default::Default>::default":["default","Real(LocalPath(\"md4/src/lib.rs\"))","core::default::Default"],"<Md4Core as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"md4/src/lib.rs\"))","core::fmt::Debug"],"<Md4Core as digest::Reset>::reset":["reset","Real(LocalPath(\"md4/src/lib.rs\"))","digest::Reset"],"<Md4Core as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"md4/src/lib.rs\"))","digest::core_api::AlgorithmName"],"<Md4Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["finalize_fixed_core","Real(LocalPath(\"md4/src/lib.rs\"))","digest::core_api::FixedOutputCore"],"<Md4Core as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"md4/src/lib.rs\"))","digest::core_api::UpdateCore"],"compress":["compress","Real(LocalPath(\"md4/src/lib.rs\"))",""],"compress::f":["f","Real(LocalPath(\"md4/src/lib.rs\"))",""],"compress::g":["g","Real(LocalPath(\"md4/src/lib.rs\"))",""],"compress::h":["h","Real(LocalPath(\"md4/src/lib.rs\"))",""],"compress::op1":["op1","Real(LocalPath(\"md4/src/lib.rs\"))",""],"compress::op2":["op2","Real(LocalPath(\"md4/src/lib.rs\"))",""],"compress::op3":["op3","Real(LocalPath(\"md4/src/lib.rs\"))",""]},"trait_to_struct":{"core::clone::Clone":["Md4Core"],"core::default::Default":["Md4Core"],"core::fmt::Debug":["Md4Core"],"digest::HashMarker":["Md4Core"],"digest::OutputSizeUser":["Md4Core"],"digest::Reset":["Md4Core"],"digest::core_api::AlgorithmName":["Md4Core"],"digest::core_api::BlockSizeUser":["Md4Core"],"digest::core_api::BufferKindUser":["Md4Core"],"digest::core_api::FixedOutputCore":["Md4Core"],"digest::core_api::UpdateCore":["Md4Core"]},"type_to_def_path":{"Md4Core":"Md4Core"}}