{"dependencies":{"<GroestlLongVarCore as core::clone::Clone>::clone":["GroestlLongVarCore"],"<GroestlLongVarCore as core::fmt::Debug>::fmt":["GroestlLongVarCore","core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<GroestlLongVarCore as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<GroestlLongVarCore as digest::core_api::UpdateCore>::update_blocks":["GroestlLongVarCore","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"<GroestlLongVarCore as digest::core_api::VariableOutputCore>::finalize_variable_core":["GroestlLongVarCore","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero"],"<GroestlLongVarCore as digest::core_api::VariableOutputCore>::new":["core::marker::Sized","core::result::Result"],"<GroestlShortVarCore as core::clone::Clone>::clone":["GroestlShortVarCore"],"<GroestlShortVarCore as core::fmt::Debug>::fmt":["GroestlShortVarCore","core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<GroestlShortVarCore as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<GroestlShortVarCore as digest::core_api::UpdateCore>::update_blocks":["GroestlShortVarCore","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"<GroestlShortVarCore as digest::core_api::VariableOutputCore>::finalize_variable_core":["GroestlShortVarCore","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero"],"<GroestlShortVarCore as digest::core_api::VariableOutputCore>::new":["core::marker::Sized","core::result::Result"],"GroestlLongVarCore":["GroestlLongVarCore"],"GroestlShortVarCore":["GroestlShortVarCore"],"compress1024::column":[],"compress1024::compress":[],"compress1024::p":[],"compress1024::rndp":[],"compress1024::rndq":[],"compress512::column":[],"compress512::compress":[],"compress512::p":[],"compress512::rndp":[],"compress512::rndq":[]},"glob_path_import":{},"self_to_fn":{"GroestlLongVarCore":["Clone","impl AlgorithmName for GroestlLongVarCore {\n    #[inline]\n    fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"GroestlLong\")\n    }\n}","impl BlockSizeUser for GroestlLongVarCore {\n    type BlockSize = U128;\n}","impl BufferKindUser for GroestlLongVarCore {\n    type BufferKind = Eager;\n}","impl HashMarker for GroestlLongVarCore {}","impl OutputSizeUser for GroestlLongVarCore {\n    type OutputSize = U64;\n}","impl UpdateCore for GroestlLongVarCore {\n    #[inline]\n    fn update_blocks(&mut self, blocks: &[Block<Self>]) {\n        self.blocks_len += blocks.len() as u64;\n        for block in blocks {\n            compress1024::compress(&mut self.state, block.as_ref());\n        }\n    }\n}","impl VariableOutputCore for GroestlLongVarCore {\n    const TRUNC_SIDE: TruncSide = TruncSide::Right;\n\n    #[inline]\n    fn new(output_size: usize) -> Result<Self, InvalidOutputSize> {\n        if output_size > Self::OutputSize::USIZE {\n            return Err(InvalidOutputSize);\n        }\n        let mut state = [0; compress1024::COLS];\n        state[compress1024::COLS - 1] = 8 * output_size as u64;\n        let blocks_len = 0;\n        Ok(Self { state, blocks_len })\n    }\n\n    #[inline]\n    fn finalize_variable_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n        let blocks_len = if buffer.remaining() <= 8 {\n            self.blocks_len + 2\n        } else {\n            self.blocks_len + 1\n        };\n        buffer.len64_padding_be(blocks_len, |block| {\n            compress1024::compress(&mut self.state, block.as_ref())\n        });\n        let res = compress1024::p(&self.state);\n        let n = compress1024::COLS / 2;\n        for (chunk, v) in out.chunks_exact_mut(8).zip(res[n..].iter()) {\n            chunk.copy_from_slice(&v.to_be_bytes());\n        }\n    }\n}","impl fmt::Debug for GroestlLongVarCore {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"GroestlLongVarCore { ... }\")\n    }\n}"],"GroestlShortVarCore":["Clone","impl AlgorithmName for GroestlShortVarCore {\n    #[inline]\n    fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"GroestlShort\")\n    }\n}","impl BlockSizeUser for GroestlShortVarCore {\n    type BlockSize = U64;\n}","impl BufferKindUser for GroestlShortVarCore {\n    type BufferKind = Eager;\n}","impl HashMarker for GroestlShortVarCore {}","impl OutputSizeUser for GroestlShortVarCore {\n    type OutputSize = U32;\n}","impl UpdateCore for GroestlShortVarCore {\n    #[inline]\n    fn update_blocks(&mut self, blocks: &[Block<Self>]) {\n        self.blocks_len += blocks.len() as u64;\n        for block in blocks {\n            compress512::compress(&mut self.state, block.as_ref());\n        }\n    }\n}","impl VariableOutputCore for GroestlShortVarCore {\n    const TRUNC_SIDE: TruncSide = TruncSide::Right;\n\n    #[inline]\n    fn new(output_size: usize) -> Result<Self, InvalidOutputSize> {\n        if output_size > Self::OutputSize::USIZE {\n            return Err(InvalidOutputSize);\n        }\n        let mut state = [0; compress512::COLS];\n        state[compress512::COLS - 1] = 8 * output_size as u64;\n        let blocks_len = 0;\n        Ok(Self { state, blocks_len })\n    }\n\n    #[inline]\n    fn finalize_variable_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n        let blocks_len = if buffer.remaining() <= 8 {\n            self.blocks_len + 2\n        } else {\n            self.blocks_len + 1\n        };\n        buffer.len64_padding_be(blocks_len, |block| {\n            compress512::compress(&mut self.state, block.as_ref())\n        });\n        let res = compress512::p(&self.state);\n        let n = compress512::COLS / 2;\n        for (chunk, v) in out.chunks_exact_mut(8).zip(res[n..].iter()) {\n            chunk.copy_from_slice(&v.to_be_bytes());\n        }\n    }\n}","impl fmt::Debug for GroestlShortVarCore {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"GroestlShortVarCore { ... }\")\n    }\n}"]},"single_path_import":{"digest":"digest","digest::Digest":"Digest"},"srcs":{"<GroestlLongVarCore as core::fmt::Debug>::fmt":["fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"GroestlLongVarCore { ... }\")\n    }","Real(LocalPath(\"groestl/src/lib.rs\"))"],"<GroestlLongVarCore as digest::core_api::AlgorithmName>::write_alg_name":["#[inline]\nfn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"GroestlLong\")\n    }","Real(LocalPath(\"groestl/src/lib.rs\"))"],"<GroestlLongVarCore as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[Block<Self>]){\n        self.blocks_len += blocks.len() as u64;\n        for block in blocks {\n            compress1024::compress(&mut self.state, block.as_ref());\n        }\n    }","Real(LocalPath(\"groestl/src/lib.rs\"))"],"<GroestlLongVarCore as digest::core_api::VariableOutputCore>::finalize_variable_core":["#[inline]\nfn finalize_variable_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n        let blocks_len = if buffer.remaining() <= 8 {\n            self.blocks_len + 2\n        } else {\n            self.blocks_len + 1\n        };\n        buffer.len64_padding_be(blocks_len, |block| {\n            compress1024::compress(&mut self.state, block.as_ref())\n        });\n        let res = compress1024::p(&self.state);\n        let n = compress1024::COLS / 2;\n        for (chunk, v) in out.chunks_exact_mut(8).zip(res[n..].iter()) {\n            chunk.copy_from_slice(&v.to_be_bytes());\n        }\n    }","Real(LocalPath(\"groestl/src/lib.rs\"))"],"<GroestlLongVarCore as digest::core_api::VariableOutputCore>::new":["#[inline]\nfn new(output_size: usize) -> Result<Self, InvalidOutputSize>{\n        if output_size > Self::OutputSize::USIZE {\n            return Err(InvalidOutputSize);\n        }\n        let mut state = [0; compress1024::COLS];\n        state[compress1024::COLS - 1] = 8 * output_size as u64;\n        let blocks_len = 0;\n        Ok(Self { state, blocks_len })\n    }","Real(LocalPath(\"groestl/src/lib.rs\"))"],"<GroestlShortVarCore as core::fmt::Debug>::fmt":["fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"GroestlShortVarCore { ... }\")\n    }","Real(LocalPath(\"groestl/src/lib.rs\"))"],"<GroestlShortVarCore as digest::core_api::AlgorithmName>::write_alg_name":["#[inline]\nfn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"GroestlShort\")\n    }","Real(LocalPath(\"groestl/src/lib.rs\"))"],"<GroestlShortVarCore as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[Block<Self>]){\n        self.blocks_len += blocks.len() as u64;\n        for block in blocks {\n            compress512::compress(&mut self.state, block.as_ref());\n        }\n    }","Real(LocalPath(\"groestl/src/lib.rs\"))"],"<GroestlShortVarCore as digest::core_api::VariableOutputCore>::finalize_variable_core":["#[inline]\nfn finalize_variable_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n        let blocks_len = if buffer.remaining() <= 8 {\n            self.blocks_len + 2\n        } else {\n            self.blocks_len + 1\n        };\n        buffer.len64_padding_be(blocks_len, |block| {\n            compress512::compress(&mut self.state, block.as_ref())\n        });\n        let res = compress512::p(&self.state);\n        let n = compress512::COLS / 2;\n        for (chunk, v) in out.chunks_exact_mut(8).zip(res[n..].iter()) {\n            chunk.copy_from_slice(&v.to_be_bytes());\n        }\n    }","Real(LocalPath(\"groestl/src/lib.rs\"))"],"<GroestlShortVarCore as digest::core_api::VariableOutputCore>::new":["#[inline]\nfn new(output_size: usize) -> Result<Self, InvalidOutputSize>{\n        if output_size > Self::OutputSize::USIZE {\n            return Err(InvalidOutputSize);\n        }\n        let mut state = [0; compress512::COLS];\n        state[compress512::COLS - 1] = 8 * output_size as u64;\n        let blocks_len = 0;\n        Ok(Self { state, blocks_len })\n    }","Real(LocalPath(\"groestl/src/lib.rs\"))"],"GroestlLongVarCore":["/// Lowest-level core hasher state of the long Groestl variant.\npub struct GroestlLongVarCore {\n    state: [u64; compress1024::COLS],\n    blocks_len: u64,\n}","Real(LocalPath(\"groestl/src/lib.rs\"))"],"GroestlShortVarCore":["/// Lowest-level core hasher state of the short Groestl variant.\npub struct GroestlShortVarCore {\n    state: [u64; compress512::COLS],\n    blocks_len: u64,\n}","Real(LocalPath(\"groestl/src/lib.rs\"))"],"compress1024::column":["#[inline(always)]\nfn column(x: &[u64; COLS], c: [usize; 8]) -> u64{\n    let mut t = 0;\n    for i in 0..8 {\n        let sl = 8 * (7 - i);\n        let idx = ((x[c[i]] >> sl) & 0xFF) as usize;\n        t ^= TABLE[i][idx];\n    }\n    t\n}","Real(LocalPath(\"groestl/src/compress1024.rs\"))"],"compress1024::compress":["pub(crate) fn compress(h: &mut [u64; COLS], block: &[u8; 128]){\n    let mut q = [0u64; COLS];\n    for (chunk, v) in block.chunks_exact(8).zip(q.iter_mut()) {\n        *v = u64::from_be_bytes(chunk.try_into().unwrap());\n    }\n    let mut p = [0u64; COLS];\n    for i in 0..COLS {\n        p[i] = h[i] ^ q[i];\n    }\n    for i in 0..ROUNDS {\n        q = rndq(q, i);\n    }\n    for i in 0..ROUNDS {\n        p = rndp(p, i << 56);\n    }\n    for i in 0..COLS {\n        h[i] ^= q[i] ^ p[i];\n    }\n}","Real(LocalPath(\"groestl/src/compress1024.rs\"))"],"compress1024::p":["pub(crate) fn p(h: &[u64; COLS]) -> [u64; COLS]{\n    let mut p = *h;\n    for i in 0..ROUNDS {\n        p = rndp(p, i << 56);\n    }\n    for i in 0..COLS {\n        p[i] ^= h[i];\n    }\n    p\n}","Real(LocalPath(\"groestl/src/compress1024.rs\"))"],"compress1024::rndp":["#[inline(always)]\nfn rndp(mut x: [u64; COLS], r: u64) -> [u64; COLS]{\n    for i in 0..COLS {\n        x[i] ^= ((i as u64) << 60) ^ r;\n    }\n    [\n        column(&x, [0, 1, 2, 3, 4, 5, 6, 11]),\n        column(&x, [1, 2, 3, 4, 5, 6, 7, 12]),\n        column(&x, [2, 3, 4, 5, 6, 7, 8, 13]),\n        column(&x, [3, 4, 5, 6, 7, 8, 9, 14]),\n        column(&x, [4, 5, 6, 7, 8, 9, 10, 15]),\n        column(&x, [5, 6, 7, 8, 9, 10, 11, 0]),\n        column(&x, [6, 7, 8, 9, 10, 11, 12, 1]),\n        column(&x, [7, 8, 9, 10, 11, 12, 13, 2]),\n        column(&x, [8, 9, 10, 11, 12, 13, 14, 3]),\n        column(&x, [9, 10, 11, 12, 13, 14, 15, 4]),\n        column(&x, [10, 11, 12, 13, 14, 15, 0, 5]),\n        column(&x, [11, 12, 13, 14, 15, 0, 1, 6]),\n        column(&x, [12, 13, 14, 15, 0, 1, 2, 7]),\n        column(&x, [13, 14, 15, 0, 1, 2, 3, 8]),\n        column(&x, [14, 15, 0, 1, 2, 3, 4, 9]),\n        column(&x, [15, 0, 1, 2, 3, 4, 5, 10]),\n    ]\n}","Real(LocalPath(\"groestl/src/compress1024.rs\"))"],"compress1024::rndq":["#[inline(always)]\nfn rndq(mut x: [u64; COLS], r: u64) -> [u64; COLS]{\n    for i in 0..COLS {\n        x[i] ^= u64::MAX.wrapping_sub((i as u64) << 4) ^ r;\n    }\n    [\n        column(&x, [1, 3, 5, 11, 0, 2, 4, 6]),\n        column(&x, [2, 4, 6, 12, 1, 3, 5, 7]),\n        column(&x, [3, 5, 7, 13, 2, 4, 6, 8]),\n        column(&x, [4, 6, 8, 14, 3, 5, 7, 9]),\n        column(&x, [5, 7, 9, 15, 4, 6, 8, 10]),\n        column(&x, [6, 8, 10, 0, 5, 7, 9, 11]),\n        column(&x, [7, 9, 11, 1, 6, 8, 10, 12]),\n        column(&x, [8, 10, 12, 2, 7, 9, 11, 13]),\n        column(&x, [9, 11, 13, 3, 8, 10, 12, 14]),\n        column(&x, [10, 12, 14, 4, 9, 11, 13, 15]),\n        column(&x, [11, 13, 15, 5, 10, 12, 14, 0]),\n        column(&x, [12, 14, 0, 6, 11, 13, 15, 1]),\n        column(&x, [13, 15, 1, 7, 12, 14, 0, 2]),\n        column(&x, [14, 0, 2, 8, 13, 15, 1, 3]),\n        column(&x, [15, 1, 3, 9, 14, 0, 2, 4]),\n        column(&x, [0, 2, 4, 10, 15, 1, 3, 5]),\n    ]\n}","Real(LocalPath(\"groestl/src/compress1024.rs\"))"],"compress512::column":["#[inline(always)]\nfn column(x: &[u64; COLS], c: [usize; 8]) -> u64{\n    let mut t = 0;\n    for i in 0..8 {\n        let sl = 8 * (7 - i);\n        let idx = ((x[c[i]] >> sl) & 0xFF) as usize;\n        t ^= TABLE[i][idx];\n    }\n    t\n}","Real(LocalPath(\"groestl/src/compress512.rs\"))"],"compress512::compress":["pub(crate) fn compress(h: &mut [u64; COLS], block: &[u8; 64]){\n    let mut q = [0u64; COLS];\n    for (chunk, v) in block.chunks_exact(8).zip(q.iter_mut()) {\n        *v = u64::from_be_bytes(chunk.try_into().unwrap());\n    }\n    let mut p = [0u64; COLS];\n    for i in 0..COLS {\n        p[i] = h[i] ^ q[i];\n    }\n    for i in 0..ROUNDS {\n        q = rndq(q, i);\n    }\n    for i in 0..ROUNDS {\n        p = rndp(p, i << 56);\n    }\n    for i in 0..COLS {\n        h[i] ^= q[i] ^ p[i];\n    }\n}","Real(LocalPath(\"groestl/src/compress512.rs\"))"],"compress512::p":["pub(crate) fn p(h: &[u64; COLS]) -> [u64; COLS]{\n    let mut p = *h;\n    for i in 0..ROUNDS {\n        p = rndp(p, i << 56);\n    }\n    for i in 0..COLS {\n        p[i] ^= h[i];\n    }\n    p\n}","Real(LocalPath(\"groestl/src/compress512.rs\"))"],"compress512::rndp":["#[inline(always)]\nfn rndp(mut x: [u64; COLS], r: u64) -> [u64; COLS]{\n    for i in 0..COLS {\n        x[i] ^= ((i as u64) << 60) ^ r;\n    }\n    [\n        column(&x, [0, 1, 2, 3, 4, 5, 6, 7]),\n        column(&x, [1, 2, 3, 4, 5, 6, 7, 0]),\n        column(&x, [2, 3, 4, 5, 6, 7, 0, 1]),\n        column(&x, [3, 4, 5, 6, 7, 0, 1, 2]),\n        column(&x, [4, 5, 6, 7, 0, 1, 2, 3]),\n        column(&x, [5, 6, 7, 0, 1, 2, 3, 4]),\n        column(&x, [6, 7, 0, 1, 2, 3, 4, 5]),\n        column(&x, [7, 0, 1, 2, 3, 4, 5, 6]),\n    ]\n}","Real(LocalPath(\"groestl/src/compress512.rs\"))"],"compress512::rndq":["#[inline(always)]\nfn rndq(mut x: [u64; COLS], r: u64) -> [u64; COLS]{\n    for i in 0..COLS {\n        x[i] ^= u64::MAX.wrapping_sub((i as u64) << 4) ^ r;\n    }\n    [\n        column(&x, [1, 3, 5, 7, 0, 2, 4, 6]),\n        column(&x, [2, 4, 6, 0, 1, 3, 5, 7]),\n        column(&x, [3, 5, 7, 1, 2, 4, 6, 0]),\n        column(&x, [4, 6, 0, 2, 3, 5, 7, 1]),\n        column(&x, [5, 7, 1, 3, 4, 6, 0, 2]),\n        column(&x, [6, 0, 2, 4, 5, 7, 1, 3]),\n        column(&x, [7, 1, 3, 5, 6, 0, 2, 4]),\n        column(&x, [0, 2, 4, 6, 7, 1, 3, 5]),\n    ]\n}","Real(LocalPath(\"groestl/src/compress512.rs\"))"]},"struct_constructor":{"GroestlLongVarCore":["clone"],"GroestlShortVarCore":["clone"],"[u64; _]":["p"],"core::result::Result":["fmt","new","write_alg_name"],"u64":["column"]},"struct_to_trait":{"GroestlLongVarCore":["core::clone::Clone","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::UpdateCore","digest::core_api::VariableOutputCore"],"GroestlShortVarCore":["core::clone::Clone","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::UpdateCore","digest::core_api::VariableOutputCore"]},"targets":{"<GroestlLongVarCore as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"groestl/src/lib.rs\"))","core::fmt::Debug"],"<GroestlLongVarCore as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"groestl/src/lib.rs\"))","digest::core_api::AlgorithmName"],"<GroestlLongVarCore as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"groestl/src/lib.rs\"))","digest::core_api::UpdateCore"],"<GroestlLongVarCore as digest::core_api::VariableOutputCore>::finalize_variable_core":["finalize_variable_core","Real(LocalPath(\"groestl/src/lib.rs\"))","digest::core_api::VariableOutputCore"],"<GroestlLongVarCore as digest::core_api::VariableOutputCore>::new":["new","Real(LocalPath(\"groestl/src/lib.rs\"))","digest::core_api::VariableOutputCore"],"<GroestlShortVarCore as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"groestl/src/lib.rs\"))","core::fmt::Debug"],"<GroestlShortVarCore as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"groestl/src/lib.rs\"))","digest::core_api::AlgorithmName"],"<GroestlShortVarCore as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"groestl/src/lib.rs\"))","digest::core_api::UpdateCore"],"<GroestlShortVarCore as digest::core_api::VariableOutputCore>::finalize_variable_core":["finalize_variable_core","Real(LocalPath(\"groestl/src/lib.rs\"))","digest::core_api::VariableOutputCore"],"<GroestlShortVarCore as digest::core_api::VariableOutputCore>::new":["new","Real(LocalPath(\"groestl/src/lib.rs\"))","digest::core_api::VariableOutputCore"],"compress1024::column":["column","Real(LocalPath(\"groestl/src/compress1024.rs\"))",""],"compress1024::compress":["compress","Real(LocalPath(\"groestl/src/compress1024.rs\"))",""],"compress1024::p":["p","Real(LocalPath(\"groestl/src/compress1024.rs\"))",""],"compress1024::rndp":["rndp","Real(LocalPath(\"groestl/src/compress1024.rs\"))",""],"compress1024::rndq":["rndq","Real(LocalPath(\"groestl/src/compress1024.rs\"))",""],"compress512::column":["column","Real(LocalPath(\"groestl/src/compress512.rs\"))",""],"compress512::compress":["compress","Real(LocalPath(\"groestl/src/compress512.rs\"))",""],"compress512::p":["p","Real(LocalPath(\"groestl/src/compress512.rs\"))",""],"compress512::rndp":["rndp","Real(LocalPath(\"groestl/src/compress512.rs\"))",""],"compress512::rndq":["rndq","Real(LocalPath(\"groestl/src/compress512.rs\"))",""]},"trait_to_struct":{"core::clone::Clone":["GroestlLongVarCore","GroestlShortVarCore"],"core::fmt::Debug":["GroestlLongVarCore","GroestlShortVarCore"],"digest::HashMarker":["GroestlLongVarCore","GroestlShortVarCore"],"digest::OutputSizeUser":["GroestlLongVarCore","GroestlShortVarCore"],"digest::core_api::AlgorithmName":["GroestlLongVarCore","GroestlShortVarCore"],"digest::core_api::BlockSizeUser":["GroestlLongVarCore","GroestlShortVarCore"],"digest::core_api::BufferKindUser":["GroestlLongVarCore","GroestlShortVarCore"],"digest::core_api::UpdateCore":["GroestlLongVarCore","GroestlShortVarCore"],"digest::core_api::VariableOutputCore":["GroestlLongVarCore","GroestlShortVarCore"]},"type_to_def_path":{"GroestlLongVarCore":"GroestlLongVarCore","GroestlShortVarCore":"GroestlShortVarCore"}}