{"dependencies":{"<Md5Core as core::clone::Clone>::clone":["Md5Core"],"<Md5Core as core::default::Default>::default":["Md5Core"],"<Md5Core as core::fmt::Debug>::fmt":["Md5Core","core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Md5Core as digest::Reset>::reset":["Md5Core"],"<Md5Core as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Md5Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["Md5Core","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero"],"<Md5Core as digest::core_api::UpdateCore>::update_blocks":["Md5Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"Md5Core":["Md5Core"],"compress::compress":[],"compress::compress_block":[],"compress::op_f":[],"compress::op_g":[],"compress::op_h":[],"compress::op_i":[],"convert":["core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"]},"glob_path_import":{},"self_to_fn":{"Md5Core":["Clone","impl AlgorithmName for Md5Core {\n    fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"Md5\")\n    }\n}","impl BlockSizeUser for Md5Core {\n    type BlockSize = U64;\n}","impl BufferKindUser for Md5Core {\n    type BufferKind = Eager;\n}","impl Default for Md5Core {\n    #[inline]\n    fn default() -> Self {\n        Self {\n            block_len: 0,\n            state: [0x6745_2301, 0xEFCD_AB89, 0x98BA_DCFE, 0x1032_5476],\n        }\n    }\n}","impl FixedOutputCore for Md5Core {\n    #[inline]\n    fn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n        let bit_len = self\n            .block_len\n            .wrapping_mul(Self::BlockSize::U64)\n            .wrapping_add(buffer.get_pos() as u64)\n            .wrapping_mul(8);\n        let mut s = self.state;\n        buffer.len64_padding_le(bit_len, |b| compress(&mut s, convert(from_ref(b))));\n        for (chunk, v) in out.chunks_exact_mut(4).zip(s.iter()) {\n            chunk.copy_from_slice(&v.to_le_bytes());\n        }\n    }\n}","impl HashMarker for Md5Core {}","impl OutputSizeUser for Md5Core {\n    type OutputSize = U16;\n}","impl Reset for Md5Core {\n    #[inline]\n    fn reset(&mut self) {\n        *self = Default::default();\n    }\n}","impl UpdateCore for Md5Core {\n    #[inline]\n    fn update_blocks(&mut self, blocks: &[Block<Self>]) {\n        self.block_len = self.block_len.wrapping_add(blocks.len() as u64);\n        compress(&mut self.state, convert(blocks))\n    }\n}","impl fmt::Debug for Md5Core {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"Md5Core { ... }\")\n    }\n}"]},"single_path_import":{"digest":"digest","digest::Digest":"Digest"},"srcs":{"<Md5Core as core::default::Default>::default":["#[inline]\nfn default() -> Self{\n        Self {\n            block_len: 0,\n            state: [0x6745_2301, 0xEFCD_AB89, 0x98BA_DCFE, 0x1032_5476],\n        }\n    }","Real(LocalPath(\"md5/src/lib.rs\"))"],"<Md5Core as core::fmt::Debug>::fmt":["fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"Md5Core { ... }\")\n    }","Real(LocalPath(\"md5/src/lib.rs\"))"],"<Md5Core as digest::Reset>::reset":["#[inline]\nfn reset(&mut self){\n        *self = Default::default();\n    }","Real(LocalPath(\"md5/src/lib.rs\"))"],"<Md5Core as digest::core_api::AlgorithmName>::write_alg_name":["fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"Md5\")\n    }","Real(LocalPath(\"md5/src/lib.rs\"))"],"<Md5Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["#[inline]\nfn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n        let bit_len = self\n            .block_len\n            .wrapping_mul(Self::BlockSize::U64)\n            .wrapping_add(buffer.get_pos() as u64)\n            .wrapping_mul(8);\n        let mut s = self.state;\n        buffer.len64_padding_le(bit_len, |b| compress(&mut s, convert(from_ref(b))));\n        for (chunk, v) in out.chunks_exact_mut(4).zip(s.iter()) {\n            chunk.copy_from_slice(&v.to_le_bytes());\n        }\n    }","Real(LocalPath(\"md5/src/lib.rs\"))"],"<Md5Core as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[Block<Self>]){\n        self.block_len = self.block_len.wrapping_add(blocks.len() as u64);\n        compress(&mut self.state, convert(blocks))\n    }","Real(LocalPath(\"md5/src/lib.rs\"))"],"Md5Core":["/// Core MD5 hasher state.\npub struct Md5Core {\n    block_len: u64,\n    state: [u32; 4],\n}","Real(LocalPath(\"md5/src/lib.rs\"))"],"compress::compress":["#[inline]\npub fn compress(state: &mut [u32; 4], blocks: &[[u8; 64]]){\n    for block in blocks {\n        compress_block(state, block)\n    }\n}","Real(LocalPath(\"md5/src/compress.rs\"))"],"compress::compress_block":["#[inline]\npub fn compress_block(state: &mut [u32; 4], input: &[u8; 64]){\n    let mut a = state[0];\n    let mut b = state[1];\n    let mut c = state[2];\n    let mut d = state[3];\n\n    let mut data = [0u32; 16];\n    for (o, chunk) in data.iter_mut().zip(input.chunks_exact(4)) {\n        *o = u32::from_le_bytes(chunk.try_into().unwrap());\n    }\n\n    // round 1\n    a = op_f(a, b, c, d, data[0], RC[0], 7);\n    d = op_f(d, a, b, c, data[1], RC[1], 12);\n    c = op_f(c, d, a, b, data[2], RC[2], 17);\n    b = op_f(b, c, d, a, data[3], RC[3], 22);\n\n    a = op_f(a, b, c, d, data[4], RC[4], 7);\n    d = op_f(d, a, b, c, data[5], RC[5], 12);\n    c = op_f(c, d, a, b, data[6], RC[6], 17);\n    b = op_f(b, c, d, a, data[7], RC[7], 22);\n\n    a = op_f(a, b, c, d, data[8], RC[8], 7);\n    d = op_f(d, a, b, c, data[9], RC[9], 12);\n    c = op_f(c, d, a, b, data[10], RC[10], 17);\n    b = op_f(b, c, d, a, data[11], RC[11], 22);\n\n    a = op_f(a, b, c, d, data[12], RC[12], 7);\n    d = op_f(d, a, b, c, data[13], RC[13], 12);\n    c = op_f(c, d, a, b, data[14], RC[14], 17);\n    b = op_f(b, c, d, a, data[15], RC[15], 22);\n\n    // round 2\n    a = op_g(a, b, c, d, data[1], RC[16], 5);\n    d = op_g(d, a, b, c, data[6], RC[17], 9);\n    c = op_g(c, d, a, b, data[11], RC[18], 14);\n    b = op_g(b, c, d, a, data[0], RC[19], 20);\n\n    a = op_g(a, b, c, d, data[5], RC[20], 5);\n    d = op_g(d, a, b, c, data[10], RC[21], 9);\n    c = op_g(c, d, a, b, data[15], RC[22], 14);\n    b = op_g(b, c, d, a, data[4], RC[23], 20);\n\n    a = op_g(a, b, c, d, data[9], RC[24], 5);\n    d = op_g(d, a, b, c, data[14], RC[25], 9);\n    c = op_g(c, d, a, b, data[3], RC[26], 14);\n    b = op_g(b, c, d, a, data[8], RC[27], 20);\n\n    a = op_g(a, b, c, d, data[13], RC[28], 5);\n    d = op_g(d, a, b, c, data[2], RC[29], 9);\n    c = op_g(c, d, a, b, data[7], RC[30], 14);\n    b = op_g(b, c, d, a, data[12], RC[31], 20);\n\n    // round 3\n    a = op_h(a, b, c, d, data[5], RC[32], 4);\n    d = op_h(d, a, b, c, data[8], RC[33], 11);\n    c = op_h(c, d, a, b, data[11], RC[34], 16);\n    b = op_h(b, c, d, a, data[14], RC[35], 23);\n\n    a = op_h(a, b, c, d, data[1], RC[36], 4);\n    d = op_h(d, a, b, c, data[4], RC[37], 11);\n    c = op_h(c, d, a, b, data[7], RC[38], 16);\n    b = op_h(b, c, d, a, data[10], RC[39], 23);\n\n    a = op_h(a, b, c, d, data[13], RC[40], 4);\n    d = op_h(d, a, b, c, data[0], RC[41], 11);\n    c = op_h(c, d, a, b, data[3], RC[42], 16);\n    b = op_h(b, c, d, a, data[6], RC[43], 23);\n\n    a = op_h(a, b, c, d, data[9], RC[44], 4);\n    d = op_h(d, a, b, c, data[12], RC[45], 11);\n    c = op_h(c, d, a, b, data[15], RC[46], 16);\n    b = op_h(b, c, d, a, data[2], RC[47], 23);\n\n    // round 4\n    a = op_i(a, b, c, d, data[0], RC[48], 6);\n    d = op_i(d, a, b, c, data[7], RC[49], 10);\n    c = op_i(c, d, a, b, data[14], RC[50], 15);\n    b = op_i(b, c, d, a, data[5], RC[51], 21);\n\n    a = op_i(a, b, c, d, data[12], RC[52], 6);\n    d = op_i(d, a, b, c, data[3], RC[53], 10);\n    c = op_i(c, d, a, b, data[10], RC[54], 15);\n    b = op_i(b, c, d, a, data[1], RC[55], 21);\n\n    a = op_i(a, b, c, d, data[8], RC[56], 6);\n    d = op_i(d, a, b, c, data[15], RC[57], 10);\n    c = op_i(c, d, a, b, data[6], RC[58], 15);\n    b = op_i(b, c, d, a, data[13], RC[59], 21);\n\n    a = op_i(a, b, c, d, data[4], RC[60], 6);\n    d = op_i(d, a, b, c, data[11], RC[61], 10);\n    c = op_i(c, d, a, b, data[2], RC[62], 15);\n    b = op_i(b, c, d, a, data[9], RC[63], 21);\n\n    state[0] = state[0].wrapping_add(a);\n    state[1] = state[1].wrapping_add(b);\n    state[2] = state[2].wrapping_add(c);\n    state[3] = state[3].wrapping_add(d);\n}","Real(LocalPath(\"md5/src/compress.rs\"))"],"compress::op_f":["#[inline(always)]\nfn op_f(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32{\n    ((x & y) | (!x & z))\n        .wrapping_add(w)\n        .wrapping_add(m)\n        .wrapping_add(c)\n        .rotate_left(s)\n        .wrapping_add(x)\n}","Real(LocalPath(\"md5/src/compress.rs\"))"],"compress::op_g":["#[inline(always)]\nfn op_g(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32{\n    ((x & z) | (y & !z))\n        .wrapping_add(w)\n        .wrapping_add(m)\n        .wrapping_add(c)\n        .rotate_left(s)\n        .wrapping_add(x)\n}","Real(LocalPath(\"md5/src/compress.rs\"))"],"compress::op_h":["#[inline(always)]\nfn op_h(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32{\n    (x ^ y ^ z)\n        .wrapping_add(w)\n        .wrapping_add(m)\n        .wrapping_add(c)\n        .rotate_left(s)\n        .wrapping_add(x)\n}","Real(LocalPath(\"md5/src/compress.rs\"))"],"compress::op_i":["#[inline(always)]\nfn op_i(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32{\n    (y ^ (x | !z))\n        .wrapping_add(w)\n        .wrapping_add(m)\n        .wrapping_add(c)\n        .rotate_left(s)\n        .wrapping_add(x)\n}","Real(LocalPath(\"md5/src/compress.rs\"))"],"convert":["#[inline(always)]\nfn convert(blocks: &[Block<Md5Core>]) -> &[[u8; BLOCK_SIZE]]{\n    // SAFETY: GenericArray<u8, U64> and [u8; 64] have\n    // exactly the same memory layout\n    let p = blocks.as_ptr() as *const [u8; BLOCK_SIZE];\n    unsafe { core::slice::from_raw_parts(p, blocks.len()) }\n}","Real(LocalPath(\"md5/src/lib.rs\"))"]},"struct_constructor":{"&[[u8; _]]":["convert"],"Md5Core":["clone","default"],"core::result::Result":["fmt","write_alg_name"]},"struct_to_trait":{"Md5Core":["core::clone::Clone","core::default::Default","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::Reset","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::FixedOutputCore","digest::core_api::UpdateCore"]},"targets":{"<Md5Core as core::default::Default>::default":["default","Real(LocalPath(\"md5/src/lib.rs\"))","core::default::Default"],"<Md5Core as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"md5/src/lib.rs\"))","core::fmt::Debug"],"<Md5Core as digest::Reset>::reset":["reset","Real(LocalPath(\"md5/src/lib.rs\"))","digest::Reset"],"<Md5Core as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"md5/src/lib.rs\"))","digest::core_api::AlgorithmName"],"<Md5Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["finalize_fixed_core","Real(LocalPath(\"md5/src/lib.rs\"))","digest::core_api::FixedOutputCore"],"<Md5Core as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"md5/src/lib.rs\"))","digest::core_api::UpdateCore"],"compress::compress":["compress","Real(LocalPath(\"md5/src/compress.rs\"))",""],"compress::compress_block":["compress_block","Real(LocalPath(\"md5/src/compress.rs\"))",""],"compress::op_f":["op_f","Real(LocalPath(\"md5/src/compress.rs\"))",""],"compress::op_g":["op_g","Real(LocalPath(\"md5/src/compress.rs\"))",""],"compress::op_h":["op_h","Real(LocalPath(\"md5/src/compress.rs\"))",""],"compress::op_i":["op_i","Real(LocalPath(\"md5/src/compress.rs\"))",""],"convert":["convert","Real(LocalPath(\"md5/src/lib.rs\"))",""]},"trait_to_struct":{"core::clone::Clone":["Md5Core"],"core::default::Default":["Md5Core"],"core::fmt::Debug":["Md5Core"],"digest::HashMarker":["Md5Core"],"digest::OutputSizeUser":["Md5Core"],"digest::Reset":["Md5Core"],"digest::core_api::AlgorithmName":["Md5Core"],"digest::core_api::BlockSizeUser":["Md5Core"],"digest::core_api::BufferKindUser":["Md5Core"],"digest::core_api::FixedOutputCore":["Md5Core"],"digest::core_api::UpdateCore":["Md5Core"]},"type_to_def_path":{"Md5Core":"Md5Core"}}