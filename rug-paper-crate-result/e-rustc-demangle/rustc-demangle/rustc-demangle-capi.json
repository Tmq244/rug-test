{"dependencies":{"rustc_demangle":[]},"glob_path_import":{},"self_to_fn":{},"single_path_import":{},"srcs":{"rustc_demangle":["/// C-style interface for demangling.\n/// Demangles symbol given in `mangled` argument into `out` buffer\n///\n/// Unsafe as it handles buffers by raw pointers.\n///\n/// Returns 0 if `mangled` is not Rust symbol or if `out` buffer is too small\n/// Returns 1 otherwise\n#[no_mangle]\npub unsafe extern \"C\" fn rustc_demangle(\n    mangled: *const c_char,\n    out: *mut c_char,\n    out_size: usize,\n) -> c_int{\n    let mangled_str = match std::ffi::CStr::from_ptr(mangled).to_str() {\n        Ok(s) => s,\n        Err(_) => return 0,\n    };\n    match rustc_demangle::try_demangle(mangled_str) {\n        Ok(demangle) => {\n            let mut out_slice = std::slice::from_raw_parts_mut(out as *mut u8, out_size);\n            match write!(out_slice, \"{:#}\\0\", demangle) {\n                Ok(_) => return 1,\n                Err(_) => return 0,\n            }\n        }\n        Err(_) => return 0,\n    }\n}","Real(LocalPath(\"crates/capi/src/lib.rs\"))"]},"struct_constructor":{"i32":["rustc_demangle"]},"struct_to_trait":{},"targets":{"rustc_demangle":["rustc_demangle","Real(LocalPath(\"crates/capi/src/lib.rs\"))",""]},"trait_to_struct":{},"type_to_def_path":{}}