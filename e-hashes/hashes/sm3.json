{"dependencies":{"<Sm3Core as core::clone::Clone>::clone":["Sm3Core"],"<Sm3Core as core::default::Default>::default":["Sm3Core"],"<Sm3Core as core::fmt::Debug>::fmt":["Sm3Core","core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Sm3Core as digest::Reset>::reset":["Sm3Core"],"<Sm3Core as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Sm3Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["Sm3Core","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero"],"<Sm3Core as digest::core_api::UpdateCore>::update_blocks":["Sm3Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"Sm3Core":["Sm3Core"],"compress::compress":["core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"compress::compress_u32":[],"compress::ff1":[],"compress::ff2":[],"compress::gg1":[],"compress::gg2":[],"compress::p0":[],"compress::p1":[],"compress::sm3_round1":[],"compress::sm3_round2":[],"compress::t":[],"compress::w1":[],"compress::w2":[]},"glob_path_import":{},"self_to_fn":{"Sm3Core":["Clone","impl AlgorithmName for Sm3Core {\n    fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"Sm3\")\n    }\n}","impl BlockSizeUser for Sm3Core {\n    type BlockSize = U64;\n}","impl BufferKindUser for Sm3Core {\n    type BufferKind = Eager;\n}","impl Default for Sm3Core {\n    #[inline]\n    fn default() -> Self {\n        Self {\n            h: consts::H0,\n            block_len: 0,\n        }\n    }\n}","impl FixedOutputCore for Sm3Core {\n    #[inline]\n    fn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n        let bs = Self::BlockSize::U64;\n        let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);\n\n        let mut h = self.h;\n        buffer.len64_padding_be(bit_len, |b| compress(&mut h, from_ref(b)));\n        for (chunk, v) in out.chunks_exact_mut(4).zip(h.iter()) {\n            chunk.copy_from_slice(&v.to_be_bytes());\n        }\n    }\n}","impl HashMarker for Sm3Core {}","impl OutputSizeUser for Sm3Core {\n    type OutputSize = U32;\n}","impl Reset for Sm3Core {\n    #[inline]\n    fn reset(&mut self) {\n        *self = Default::default();\n    }\n}","impl UpdateCore for Sm3Core {\n    #[inline]\n    fn update_blocks(&mut self, blocks: &[Block<Self>]) {\n        self.block_len += blocks.len() as u64;\n        compress(&mut self.h, blocks);\n    }\n}","impl fmt::Debug for Sm3Core {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"Sm3Core { ... }\")\n    }\n}"]},"single_path_import":{"digest":"digest","digest::Digest":"Digest"},"srcs":{"<Sm3Core as core::default::Default>::default":["#[inline]\nfn default() -> Self{\n        Self {\n            h: consts::H0,\n            block_len: 0,\n        }\n    }","Real(LocalPath(\"sm3/src/lib.rs\"))"],"<Sm3Core as core::fmt::Debug>::fmt":["fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"Sm3Core { ... }\")\n    }","Real(LocalPath(\"sm3/src/lib.rs\"))"],"<Sm3Core as digest::Reset>::reset":["#[inline]\nfn reset(&mut self){\n        *self = Default::default();\n    }","Real(LocalPath(\"sm3/src/lib.rs\"))"],"<Sm3Core as digest::core_api::AlgorithmName>::write_alg_name":["fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"Sm3\")\n    }","Real(LocalPath(\"sm3/src/lib.rs\"))"],"<Sm3Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["#[inline]\nfn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n        let bs = Self::BlockSize::U64;\n        let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);\n\n        let mut h = self.h;\n        buffer.len64_padding_be(bit_len, |b| compress(&mut h, from_ref(b)));\n        for (chunk, v) in out.chunks_exact_mut(4).zip(h.iter()) {\n            chunk.copy_from_slice(&v.to_be_bytes());\n        }\n    }","Real(LocalPath(\"sm3/src/lib.rs\"))"],"<Sm3Core as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[Block<Self>]){\n        self.block_len += blocks.len() as u64;\n        compress(&mut self.h, blocks);\n    }","Real(LocalPath(\"sm3/src/lib.rs\"))"],"Sm3Core":["/// Core SM3 hasher state.\npub struct Sm3Core {\n    block_len: u64,\n    h: [u32; 8],\n}","Real(LocalPath(\"sm3/src/lib.rs\"))"],"compress::compress":["pub(crate) fn compress(state: &mut [u32; 8], blocks: &[Block<Sm3Core>]){\n    for block in blocks {\n        let mut w = [0u32; 16];\n        for (o, chunk) in w.iter_mut().zip(block.chunks_exact(4)) {\n            *o = u32::from_be_bytes(chunk.try_into().unwrap());\n        }\n        compress_u32(state, &w);\n    }\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"],"compress::compress_u32":["fn compress_u32(state: &mut [u32; 8], block: &[u32; 16]){\n    let mut x: [u32; 16] = *block;\n\n    let mut a = state[0];\n    let mut b = state[1];\n    let mut c = state[2];\n    let mut d = state[3];\n    let mut e = state[4];\n    let mut f = state[5];\n    let mut g = state[6];\n    let mut h = state[7];\n\n    R1!(a, b, c, d, e, f, g, h, t(0), w1(&x, 0), w1(&x, 4));\n    R1!(d, a, b, c, h, e, f, g, t(1), w1(&x, 1), w1(&x, 5));\n    R1!(c, d, a, b, g, h, e, f, t(2), w1(&x, 2), w1(&x, 6));\n    R1!(b, c, d, a, f, g, h, e, t(3), w1(&x, 3), w1(&x, 7));\n    R1!(a, b, c, d, e, f, g, h, t(4), w1(&x, 4), w1(&x, 8));\n    R1!(d, a, b, c, h, e, f, g, t(5), w1(&x, 5), w1(&x, 9));\n    R1!(c, d, a, b, g, h, e, f, t(6), w1(&x, 6), w1(&x, 10));\n    R1!(b, c, d, a, f, g, h, e, t(7), w1(&x, 7), w1(&x, 11));\n    R1!(a, b, c, d, e, f, g, h, t(8), w1(&x, 8), w1(&x, 12));\n    R1!(d, a, b, c, h, e, f, g, t(9), w1(&x, 9), w1(&x, 13));\n    R1!(c, d, a, b, g, h, e, f, t(10), w1(&x, 10), w1(&x, 14));\n    R1!(b, c, d, a, f, g, h, e, t(11), w1(&x, 11), w1(&x, 15));\n    R1!(a, b, c, d, e, f, g, h, t(12), w1(&x, 12), w2(&mut x, 16));\n    R1!(d, a, b, c, h, e, f, g, t(13), w1(&x, 13), w2(&mut x, 17));\n    R1!(c, d, a, b, g, h, e, f, t(14), w1(&x, 14), w2(&mut x, 18));\n    R1!(b, c, d, a, f, g, h, e, t(15), w1(&x, 15), w2(&mut x, 19));\n    R2!(a, b, c, d, e, f, g, h, t(16), w1(&x, 16), w2(&mut x, 20));\n    R2!(d, a, b, c, h, e, f, g, t(17), w1(&x, 17), w2(&mut x, 21));\n    R2!(c, d, a, b, g, h, e, f, t(18), w1(&x, 18), w2(&mut x, 22));\n    R2!(b, c, d, a, f, g, h, e, t(19), w1(&x, 19), w2(&mut x, 23));\n    R2!(a, b, c, d, e, f, g, h, t(20), w1(&x, 20), w2(&mut x, 24));\n    R2!(d, a, b, c, h, e, f, g, t(21), w1(&x, 21), w2(&mut x, 25));\n    R2!(c, d, a, b, g, h, e, f, t(22), w1(&x, 22), w2(&mut x, 26));\n    R2!(b, c, d, a, f, g, h, e, t(23), w1(&x, 23), w2(&mut x, 27));\n    R2!(a, b, c, d, e, f, g, h, t(24), w1(&x, 24), w2(&mut x, 28));\n    R2!(d, a, b, c, h, e, f, g, t(25), w1(&x, 25), w2(&mut x, 29));\n    R2!(c, d, a, b, g, h, e, f, t(26), w1(&x, 26), w2(&mut x, 30));\n    R2!(b, c, d, a, f, g, h, e, t(27), w1(&x, 27), w2(&mut x, 31));\n    R2!(a, b, c, d, e, f, g, h, t(28), w1(&x, 28), w2(&mut x, 32));\n    R2!(d, a, b, c, h, e, f, g, t(29), w1(&x, 29), w2(&mut x, 33));\n    R2!(c, d, a, b, g, h, e, f, t(30), w1(&x, 30), w2(&mut x, 34));\n    R2!(b, c, d, a, f, g, h, e, t(31), w1(&x, 31), w2(&mut x, 35));\n    R2!(a, b, c, d, e, f, g, h, t(32), w1(&x, 32), w2(&mut x, 36));\n    R2!(d, a, b, c, h, e, f, g, t(33), w1(&x, 33), w2(&mut x, 37));\n    R2!(c, d, a, b, g, h, e, f, t(34), w1(&x, 34), w2(&mut x, 38));\n    R2!(b, c, d, a, f, g, h, e, t(35), w1(&x, 35), w2(&mut x, 39));\n    R2!(a, b, c, d, e, f, g, h, t(36), w1(&x, 36), w2(&mut x, 40));\n    R2!(d, a, b, c, h, e, f, g, t(37), w1(&x, 37), w2(&mut x, 41));\n    R2!(c, d, a, b, g, h, e, f, t(38), w1(&x, 38), w2(&mut x, 42));\n    R2!(b, c, d, a, f, g, h, e, t(39), w1(&x, 39), w2(&mut x, 43));\n    R2!(a, b, c, d, e, f, g, h, t(40), w1(&x, 40), w2(&mut x, 44));\n    R2!(d, a, b, c, h, e, f, g, t(41), w1(&x, 41), w2(&mut x, 45));\n    R2!(c, d, a, b, g, h, e, f, t(42), w1(&x, 42), w2(&mut x, 46));\n    R2!(b, c, d, a, f, g, h, e, t(43), w1(&x, 43), w2(&mut x, 47));\n    R2!(a, b, c, d, e, f, g, h, t(44), w1(&x, 44), w2(&mut x, 48));\n    R2!(d, a, b, c, h, e, f, g, t(45), w1(&x, 45), w2(&mut x, 49));\n    R2!(c, d, a, b, g, h, e, f, t(46), w1(&x, 46), w2(&mut x, 50));\n    R2!(b, c, d, a, f, g, h, e, t(47), w1(&x, 47), w2(&mut x, 51));\n    R2!(a, b, c, d, e, f, g, h, t(48), w1(&x, 48), w2(&mut x, 52));\n    R2!(d, a, b, c, h, e, f, g, t(49), w1(&x, 49), w2(&mut x, 53));\n    R2!(c, d, a, b, g, h, e, f, t(50), w1(&x, 50), w2(&mut x, 54));\n    R2!(b, c, d, a, f, g, h, e, t(51), w1(&x, 51), w2(&mut x, 55));\n    R2!(a, b, c, d, e, f, g, h, t(52), w1(&x, 52), w2(&mut x, 56));\n    R2!(d, a, b, c, h, e, f, g, t(53), w1(&x, 53), w2(&mut x, 57));\n    R2!(c, d, a, b, g, h, e, f, t(54), w1(&x, 54), w2(&mut x, 58));\n    R2!(b, c, d, a, f, g, h, e, t(55), w1(&x, 55), w2(&mut x, 59));\n    R2!(a, b, c, d, e, f, g, h, t(56), w1(&x, 56), w2(&mut x, 60));\n    R2!(d, a, b, c, h, e, f, g, t(57), w1(&x, 57), w2(&mut x, 61));\n    R2!(c, d, a, b, g, h, e, f, t(58), w1(&x, 58), w2(&mut x, 62));\n    R2!(b, c, d, a, f, g, h, e, t(59), w1(&x, 59), w2(&mut x, 63));\n    R2!(a, b, c, d, e, f, g, h, t(60), w1(&x, 60), w2(&mut x, 64));\n    R2!(d, a, b, c, h, e, f, g, t(61), w1(&x, 61), w2(&mut x, 65));\n    R2!(c, d, a, b, g, h, e, f, t(62), w1(&x, 62), w2(&mut x, 66));\n    R2!(b, c, d, a, f, g, h, e, t(63), w1(&x, 63), w2(&mut x, 67));\n\n    state[0] ^= a;\n    state[1] ^= b;\n    state[2] ^= c;\n    state[3] ^= d;\n    state[4] ^= e;\n    state[5] ^= f;\n    state[6] ^= g;\n    state[7] ^= h;\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"],"compress::ff1":["#[inline(always)]\nfn ff1(x: u32, y: u32, z: u32) -> u32{\n    x ^ y ^ z\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"],"compress::ff2":["#[inline(always)]\nfn ff2(x: u32, y: u32, z: u32) -> u32{\n    (x & y) | (x & z) | (y & z)\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"],"compress::gg1":["#[inline(always)]\nfn gg1(x: u32, y: u32, z: u32) -> u32{\n    x ^ y ^ z\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"],"compress::gg2":["#[inline(always)]\nfn gg2(x: u32, y: u32, z: u32) -> u32{\n    // This line is equivalent to `(x & y) | (!x & z)`, but executes faster\n    (y ^ z) & x ^ z\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"],"compress::p0":["#[inline(always)]\nfn p0(x: u32) -> u32{\n    x ^ x.rotate_left(9) ^ x.rotate_left(17)\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"],"compress::p1":["#[inline(always)]\nfn p1(x: u32) -> u32{\n    x ^ x.rotate_left(15) ^ x.rotate_left(23)\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"],"compress::sm3_round1":["fn sm3_round1(\n    a: u32,\n    b: u32,\n    c: u32,\n    d: u32,\n    e: u32,\n    f: u32,\n    g: u32,\n    h: u32,\n    t: u32,\n    w1: u32,\n    w2: u32,\n) -> [u32; 8]{\n    let ss1 = (a.rotate_left(12).wrapping_add(e).wrapping_add(t)).rotate_left(7);\n    let ss2 = ss1 ^ a.rotate_left(12);\n\n    let d = d\n        .wrapping_add(ff1(a, b, c))\n        .wrapping_add(ss2)\n        .wrapping_add(w1 ^ w2);\n    let h = h\n        .wrapping_add(gg1(e, f, g))\n        .wrapping_add(ss1)\n        .wrapping_add(w1);\n    let b = b.rotate_left(9);\n    let f = f.rotate_left(19);\n    let h = p0(h);\n\n    [a, b, c, d, e, f, g, h]\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"],"compress::sm3_round2":["fn sm3_round2(\n    a: u32,\n    b: u32,\n    c: u32,\n    d: u32,\n    e: u32,\n    f: u32,\n    g: u32,\n    h: u32,\n    t: u32,\n    w1: u32,\n    w2: u32,\n) -> [u32; 8]{\n    let ss1 = (a.rotate_left(12).wrapping_add(e).wrapping_add(t)).rotate_left(7);\n    let ss2 = ss1 ^ a.rotate_left(12);\n\n    let d = d\n        .wrapping_add(ff2(a, b, c))\n        .wrapping_add(ss2)\n        .wrapping_add(w1 ^ w2);\n    let h = h\n        .wrapping_add(gg2(e, f, g))\n        .wrapping_add(ss1)\n        .wrapping_add(w1);\n    let b = b.rotate_left(9);\n    let f = f.rotate_left(19);\n    let h = p0(h);\n\n    [a, b, c, d, e, f, g, h]\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"],"compress::t":["#[inline(always)]\nfn t(i: usize) -> u32{\n    T32[i]\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"],"compress::w1":["#[inline(always)]\nfn w1(x: &[u32; 16], i: usize) -> u32{\n    x[i & 0x0f]\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"],"compress::w2":["#[inline(always)]\nfn w2(x: &mut [u32; 16], i: usize) -> u32{\n    let tw = w1(x, i) ^ w1(x, i - 9) ^ w1(x, i - 3).rotate_left(15);\n    let tw = p1(tw) ^ w1(x, i - 13).rotate_left(7) ^ w1(x, i - 6);\n    x[i & 0x0f] = tw;\n    tw\n}","Real(LocalPath(\"sm3/src/compress.rs\"))"]},"struct_constructor":{"Sm3Core":["clone","default"],"[u32; 8]":["sm3_round1","sm3_round2"],"core::result::Result":["fmt","write_alg_name"],"u32":["t","w1","w2"]},"struct_to_trait":{"Sm3Core":["core::clone::Clone","core::default::Default","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::Reset","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::FixedOutputCore","digest::core_api::UpdateCore"]},"targets":{"<Sm3Core as core::default::Default>::default":["default","Real(LocalPath(\"sm3/src/lib.rs\"))","core::default::Default"],"<Sm3Core as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"sm3/src/lib.rs\"))","core::fmt::Debug"],"<Sm3Core as digest::Reset>::reset":["reset","Real(LocalPath(\"sm3/src/lib.rs\"))","digest::Reset"],"<Sm3Core as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"sm3/src/lib.rs\"))","digest::core_api::AlgorithmName"],"<Sm3Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["finalize_fixed_core","Real(LocalPath(\"sm3/src/lib.rs\"))","digest::core_api::FixedOutputCore"],"<Sm3Core as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"sm3/src/lib.rs\"))","digest::core_api::UpdateCore"],"compress::compress":["compress","Real(LocalPath(\"sm3/src/compress.rs\"))",""],"compress::compress_u32":["compress_u32","Real(LocalPath(\"sm3/src/compress.rs\"))",""],"compress::ff1":["ff1","Real(LocalPath(\"sm3/src/compress.rs\"))",""],"compress::ff2":["ff2","Real(LocalPath(\"sm3/src/compress.rs\"))",""],"compress::gg1":["gg1","Real(LocalPath(\"sm3/src/compress.rs\"))",""],"compress::gg2":["gg2","Real(LocalPath(\"sm3/src/compress.rs\"))",""],"compress::p0":["p0","Real(LocalPath(\"sm3/src/compress.rs\"))",""],"compress::p1":["p1","Real(LocalPath(\"sm3/src/compress.rs\"))",""],"compress::sm3_round1":["sm3_round1","Real(LocalPath(\"sm3/src/compress.rs\"))",""],"compress::sm3_round2":["sm3_round2","Real(LocalPath(\"sm3/src/compress.rs\"))",""],"compress::t":["t","Real(LocalPath(\"sm3/src/compress.rs\"))",""],"compress::w1":["w1","Real(LocalPath(\"sm3/src/compress.rs\"))",""],"compress::w2":["w2","Real(LocalPath(\"sm3/src/compress.rs\"))",""]},"trait_to_struct":{"core::clone::Clone":["Sm3Core"],"core::default::Default":["Sm3Core"],"core::fmt::Debug":["Sm3Core"],"digest::HashMarker":["Sm3Core"],"digest::OutputSizeUser":["Sm3Core"],"digest::Reset":["Sm3Core"],"digest::core_api::AlgorithmName":["Sm3Core"],"digest::core_api::BlockSizeUser":["Sm3Core"],"digest::core_api::BufferKindUser":["Sm3Core"],"digest::core_api::FixedOutputCore":["Sm3Core"],"digest::core_api::UpdateCore":["Sm3Core"]},"type_to_def_path":{"Sm3Core":"Sm3Core"}}