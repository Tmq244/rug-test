{"dependencies":{"<Ripemd128Core as core::clone::Clone>::clone":["Ripemd128Core"],"<Ripemd128Core as core::default::Default>::default":["Ripemd128Core"],"<Ripemd128Core as core::fmt::Debug>::fmt":["Ripemd128Core","core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Ripemd128Core as digest::Reset>::reset":["Ripemd128Core"],"<Ripemd128Core as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Ripemd128Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["Ripemd128Core","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero"],"<Ripemd128Core as digest::core_api::UpdateCore>::update_blocks":["Ripemd128Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"<Ripemd160Core as core::clone::Clone>::clone":["Ripemd160Core"],"<Ripemd160Core as core::default::Default>::default":["Ripemd160Core"],"<Ripemd160Core as core::fmt::Debug>::fmt":["Ripemd160Core","core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Ripemd160Core as digest::Reset>::reset":["Ripemd160Core"],"<Ripemd160Core as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Ripemd160Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["Ripemd160Core","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero"],"<Ripemd160Core as digest::core_api::UpdateCore>::update_blocks":["Ripemd160Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"<Ripemd256Core as core::clone::Clone>::clone":["Ripemd256Core"],"<Ripemd256Core as core::default::Default>::default":["Ripemd256Core"],"<Ripemd256Core as core::fmt::Debug>::fmt":["Ripemd256Core","core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Ripemd256Core as digest::Reset>::reset":["Ripemd256Core"],"<Ripemd256Core as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Ripemd256Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["Ripemd256Core","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero"],"<Ripemd256Core as digest::core_api::UpdateCore>::update_blocks":["Ripemd256Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"<Ripemd320Core as core::clone::Clone>::clone":["Ripemd320Core"],"<Ripemd320Core as core::default::Default>::default":["Ripemd320Core"],"<Ripemd320Core as core::fmt::Debug>::fmt":["Ripemd320Core","core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Ripemd320Core as digest::Reset>::reset":["Ripemd320Core"],"<Ripemd320Core as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Ripemd320Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["Ripemd320Core","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero"],"<Ripemd320Core as digest::core_api::UpdateCore>::update_blocks":["Ripemd320Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"Ripemd128Core":["Ripemd128Core"],"Ripemd160Core":["Ripemd160Core"],"Ripemd256Core":["Ripemd256Core"],"Ripemd320Core":["Ripemd320Core"],"c128::compress":[],"c160::compress":[],"c256::compress":[],"c256::swap_idx":[],"c320::compress":[],"c320::swap_idx":[]},"glob_path_import":{},"self_to_fn":{"Ripemd128Core":["Clone","impl AlgorithmName for $name {\n            #[inline]\n            fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                f.write_str(concat!(\"Ripemd\", $alg_width))\n            }\n        }","impl BlockSizeUser for $name {\n            type BlockSize = U64;\n        }","impl BufferKindUser for $name {\n            type BufferKind = Eager;\n        }","impl Default for $name {\n            #[inline]\n            fn default() -> Self {\n                Self {\n                    h: $mod::H0,\n                    block_len: 0,\n                }\n            }\n        }","impl FixedOutputCore for $name {\n            #[inline]\n            fn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n                let bs = Self::BlockSize::U64;\n                let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);\n                let mut h = self.h;\n                buffer.len64_padding_le(bit_len, |block| $mod::compress(&mut h, block.as_ref()));\n\n                for (chunk, v) in out.chunks_exact_mut(4).zip(h.iter()) {\n                    chunk.copy_from_slice(&v.to_le_bytes());\n                }\n            }\n        }","impl HashMarker for $name {}","impl OutputSizeUser for $name {\n            type OutputSize = $output_size;\n        }","impl Reset for $name {\n            #[inline]\n            fn reset(&mut self) {\n                *self = Default::default();\n            }\n        }","impl UpdateCore for $name {\n            #[inline]\n            fn update_blocks(&mut self, blocks: &[Block<Self>]) {\n                // Assumes that `block_len` does not overflow\n                self.block_len += blocks.len() as u64;\n                for block in blocks {\n                    $mod::compress(&mut self.h, block.as_ref());\n                }\n            }\n        }","impl fmt::Debug for $name {\n            #[inline]\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                f.write_str(concat!(\"Ripemd\", $alg_width, \"Core { ... }\"))\n            }\n        }"],"Ripemd160Core":["Clone","impl AlgorithmName for $name {\n            #[inline]\n            fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                f.write_str(concat!(\"Ripemd\", $alg_width))\n            }\n        }","impl BlockSizeUser for $name {\n            type BlockSize = U64;\n        }","impl BufferKindUser for $name {\n            type BufferKind = Eager;\n        }","impl Default for $name {\n            #[inline]\n            fn default() -> Self {\n                Self {\n                    h: $mod::H0,\n                    block_len: 0,\n                }\n            }\n        }","impl FixedOutputCore for $name {\n            #[inline]\n            fn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n                let bs = Self::BlockSize::U64;\n                let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);\n                let mut h = self.h;\n                buffer.len64_padding_le(bit_len, |block| $mod::compress(&mut h, block.as_ref()));\n\n                for (chunk, v) in out.chunks_exact_mut(4).zip(h.iter()) {\n                    chunk.copy_from_slice(&v.to_le_bytes());\n                }\n            }\n        }","impl HashMarker for $name {}","impl OutputSizeUser for $name {\n            type OutputSize = $output_size;\n        }","impl Reset for $name {\n            #[inline]\n            fn reset(&mut self) {\n                *self = Default::default();\n            }\n        }","impl UpdateCore for $name {\n            #[inline]\n            fn update_blocks(&mut self, blocks: &[Block<Self>]) {\n                // Assumes that `block_len` does not overflow\n                self.block_len += blocks.len() as u64;\n                for block in blocks {\n                    $mod::compress(&mut self.h, block.as_ref());\n                }\n            }\n        }","impl fmt::Debug for $name {\n            #[inline]\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                f.write_str(concat!(\"Ripemd\", $alg_width, \"Core { ... }\"))\n            }\n        }"],"Ripemd256Core":["Clone","impl AlgorithmName for $name {\n            #[inline]\n            fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                f.write_str(concat!(\"Ripemd\", $alg_width))\n            }\n        }","impl BlockSizeUser for $name {\n            type BlockSize = U64;\n        }","impl BufferKindUser for $name {\n            type BufferKind = Eager;\n        }","impl Default for $name {\n            #[inline]\n            fn default() -> Self {\n                Self {\n                    h: $mod::H0,\n                    block_len: 0,\n                }\n            }\n        }","impl FixedOutputCore for $name {\n            #[inline]\n            fn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n                let bs = Self::BlockSize::U64;\n                let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);\n                let mut h = self.h;\n                buffer.len64_padding_le(bit_len, |block| $mod::compress(&mut h, block.as_ref()));\n\n                for (chunk, v) in out.chunks_exact_mut(4).zip(h.iter()) {\n                    chunk.copy_from_slice(&v.to_le_bytes());\n                }\n            }\n        }","impl HashMarker for $name {}","impl OutputSizeUser for $name {\n            type OutputSize = $output_size;\n        }","impl Reset for $name {\n            #[inline]\n            fn reset(&mut self) {\n                *self = Default::default();\n            }\n        }","impl UpdateCore for $name {\n            #[inline]\n            fn update_blocks(&mut self, blocks: &[Block<Self>]) {\n                // Assumes that `block_len` does not overflow\n                self.block_len += blocks.len() as u64;\n                for block in blocks {\n                    $mod::compress(&mut self.h, block.as_ref());\n                }\n            }\n        }","impl fmt::Debug for $name {\n            #[inline]\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                f.write_str(concat!(\"Ripemd\", $alg_width, \"Core { ... }\"))\n            }\n        }"],"Ripemd320Core":["Clone","impl AlgorithmName for $name {\n            #[inline]\n            fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                f.write_str(concat!(\"Ripemd\", $alg_width))\n            }\n        }","impl BlockSizeUser for $name {\n            type BlockSize = U64;\n        }","impl BufferKindUser for $name {\n            type BufferKind = Eager;\n        }","impl Default for $name {\n            #[inline]\n            fn default() -> Self {\n                Self {\n                    h: $mod::H0,\n                    block_len: 0,\n                }\n            }\n        }","impl FixedOutputCore for $name {\n            #[inline]\n            fn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n                let bs = Self::BlockSize::U64;\n                let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);\n                let mut h = self.h;\n                buffer.len64_padding_le(bit_len, |block| $mod::compress(&mut h, block.as_ref()));\n\n                for (chunk, v) in out.chunks_exact_mut(4).zip(h.iter()) {\n                    chunk.copy_from_slice(&v.to_le_bytes());\n                }\n            }\n        }","impl HashMarker for $name {}","impl OutputSizeUser for $name {\n            type OutputSize = $output_size;\n        }","impl Reset for $name {\n            #[inline]\n            fn reset(&mut self) {\n                *self = Default::default();\n            }\n        }","impl UpdateCore for $name {\n            #[inline]\n            fn update_blocks(&mut self, blocks: &[Block<Self>]) {\n                // Assumes that `block_len` does not overflow\n                self.block_len += blocks.len() as u64;\n                for block in blocks {\n                    $mod::compress(&mut self.h, block.as_ref());\n                }\n            }\n        }","impl fmt::Debug for $name {\n            #[inline]\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                f.write_str(concat!(\"Ripemd\", $alg_width, \"Core { ... }\"))\n            }\n        }"]},"single_path_import":{"digest":"digest","digest::Digest":"Digest"},"srcs":{"<Ripemd128Core as core::default::Default>::default":["#[inline]\nfn default() -> Self{\n                Self {\n                    h: $mod::H0,\n                    block_len: 0,\n                }\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd128Core as core::fmt::Debug>::fmt":["#[inline]\nfn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n                f.write_str(concat!(\"Ripemd\", $alg_width, \"Core { ... }\"))\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd128Core as digest::Reset>::reset":["#[inline]\nfn reset(&mut self){\n                *self = Default::default();\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd128Core as digest::core_api::AlgorithmName>::write_alg_name":["#[inline]\nfn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n                f.write_str(concat!(\"Ripemd\", $alg_width))\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd128Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["#[inline]\nfn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n                let bs = Self::BlockSize::U64;\n                let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);\n                let mut h = self.h;\n                buffer.len64_padding_le(bit_len, |block| $mod::compress(&mut h, block.as_ref()));\n\n                for (chunk, v) in out.chunks_exact_mut(4).zip(h.iter()) {\n                    chunk.copy_from_slice(&v.to_le_bytes());\n                }\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd128Core as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[Block<Self>]){\n                // Assumes that `block_len` does not overflow\n                self.block_len += blocks.len() as u64;\n                for block in blocks {\n                    $mod::compress(&mut self.h, block.as_ref());\n                }\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd160Core as core::default::Default>::default":["#[inline]\nfn default() -> Self{\n                Self {\n                    h: $mod::H0,\n                    block_len: 0,\n                }\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd160Core as core::fmt::Debug>::fmt":["#[inline]\nfn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n                f.write_str(concat!(\"Ripemd\", $alg_width, \"Core { ... }\"))\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd160Core as digest::Reset>::reset":["#[inline]\nfn reset(&mut self){\n                *self = Default::default();\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd160Core as digest::core_api::AlgorithmName>::write_alg_name":["#[inline]\nfn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n                f.write_str(concat!(\"Ripemd\", $alg_width))\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd160Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["#[inline]\nfn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n                let bs = Self::BlockSize::U64;\n                let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);\n                let mut h = self.h;\n                buffer.len64_padding_le(bit_len, |block| $mod::compress(&mut h, block.as_ref()));\n\n                for (chunk, v) in out.chunks_exact_mut(4).zip(h.iter()) {\n                    chunk.copy_from_slice(&v.to_le_bytes());\n                }\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd160Core as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[Block<Self>]){\n                // Assumes that `block_len` does not overflow\n                self.block_len += blocks.len() as u64;\n                for block in blocks {\n                    $mod::compress(&mut self.h, block.as_ref());\n                }\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd256Core as core::default::Default>::default":["#[inline]\nfn default() -> Self{\n                Self {\n                    h: $mod::H0,\n                    block_len: 0,\n                }\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd256Core as core::fmt::Debug>::fmt":["#[inline]\nfn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n                f.write_str(concat!(\"Ripemd\", $alg_width, \"Core { ... }\"))\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd256Core as digest::Reset>::reset":["#[inline]\nfn reset(&mut self){\n                *self = Default::default();\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd256Core as digest::core_api::AlgorithmName>::write_alg_name":["#[inline]\nfn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n                f.write_str(concat!(\"Ripemd\", $alg_width))\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd256Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["#[inline]\nfn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n                let bs = Self::BlockSize::U64;\n                let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);\n                let mut h = self.h;\n                buffer.len64_padding_le(bit_len, |block| $mod::compress(&mut h, block.as_ref()));\n\n                for (chunk, v) in out.chunks_exact_mut(4).zip(h.iter()) {\n                    chunk.copy_from_slice(&v.to_le_bytes());\n                }\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd256Core as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[Block<Self>]){\n                // Assumes that `block_len` does not overflow\n                self.block_len += blocks.len() as u64;\n                for block in blocks {\n                    $mod::compress(&mut self.h, block.as_ref());\n                }\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd320Core as core::default::Default>::default":["#[inline]\nfn default() -> Self{\n                Self {\n                    h: $mod::H0,\n                    block_len: 0,\n                }\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd320Core as core::fmt::Debug>::fmt":["#[inline]\nfn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n                f.write_str(concat!(\"Ripemd\", $alg_width, \"Core { ... }\"))\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd320Core as digest::Reset>::reset":["#[inline]\nfn reset(&mut self){\n                *self = Default::default();\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd320Core as digest::core_api::AlgorithmName>::write_alg_name":["#[inline]\nfn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n                f.write_str(concat!(\"Ripemd\", $alg_width))\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd320Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["#[inline]\nfn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n                let bs = Self::BlockSize::U64;\n                let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);\n                let mut h = self.h;\n                buffer.len64_padding_le(bit_len, |block| $mod::compress(&mut h, block.as_ref()));\n\n                for (chunk, v) in out.chunks_exact_mut(4).zip(h.iter()) {\n                    chunk.copy_from_slice(&v.to_le_bytes());\n                }\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"<Ripemd320Core as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[Block<Self>]){\n                // Assumes that `block_len` does not overflow\n                self.block_len += blocks.len() as u64;\n                for block in blocks {\n                    $mod::compress(&mut self.h, block.as_ref());\n                }\n            }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"Ripemd128Core":["#[doc = \"Core block-level\"]\n#[doc = $doc_name]\n#[doc = \" hasher state.\"]\npub struct $name {\n            h: [u32; $mod::DIGEST_BUF_LEN],\n            block_len: u64,\n        }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"Ripemd160Core":["#[doc = \"Core block-level\"]\n#[doc = $doc_name]\n#[doc = \" hasher state.\"]\npub struct $name {\n            h: [u32; $mod::DIGEST_BUF_LEN],\n            block_len: u64,\n        }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"Ripemd256Core":["#[doc = \"Core block-level\"]\n#[doc = $doc_name]\n#[doc = \" hasher state.\"]\npub struct $name {\n            h: [u32; $mod::DIGEST_BUF_LEN],\n            block_len: u64,\n        }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"Ripemd320Core":["#[doc = \"Core block-level\"]\n#[doc = $doc_name]\n#[doc = \" hasher state.\"]\npub struct $name {\n            h: [u32; $mod::DIGEST_BUF_LEN],\n            block_len: u64,\n        }","Real(LocalPath(\"ripemd/src/lib.rs\"))"],"c128::compress":["pub fn compress(h: &mut [u32; DIGEST_BUF_LEN], data: &[u8; 64]){\n    let mut w = [0u32; WORK_BUF_LEN];\n    for (o, chunk) in w.iter_mut().zip(data.chunks_exact(4)) {\n        *o = u32::from_le_bytes(chunk.try_into().unwrap());\n    }\n    process_block!(h, w[..],\n    // Round 1\n        round1: h_ordering 0, 1, 2, 3; data_index  0; roll_shift 11\n        round1: h_ordering 3, 0, 1, 2; data_index  1; roll_shift 14\n        round1: h_ordering 2, 3, 0, 1; data_index  2; roll_shift 15\n        round1: h_ordering 1, 2, 3, 0; data_index  3; roll_shift 12\n        round1: h_ordering 0, 1, 2, 3; data_index  4; roll_shift  5\n        round1: h_ordering 3, 0, 1, 2; data_index  5; roll_shift  8\n        round1: h_ordering 2, 3, 0, 1; data_index  6; roll_shift  7\n        round1: h_ordering 1, 2, 3, 0; data_index  7; roll_shift  9\n        round1: h_ordering 0, 1, 2, 3; data_index  8; roll_shift 11\n        round1: h_ordering 3, 0, 1, 2; data_index  9; roll_shift 13\n        round1: h_ordering 2, 3, 0, 1; data_index 10; roll_shift 14\n        round1: h_ordering 1, 2, 3, 0; data_index 11; roll_shift 15\n        round1: h_ordering 0, 1, 2, 3; data_index 12; roll_shift  6\n        round1: h_ordering 3, 0, 1, 2; data_index 13; roll_shift  7\n        round1: h_ordering 2, 3, 0, 1; data_index 14; roll_shift  9\n        round1: h_ordering 1, 2, 3, 0; data_index 15; roll_shift  8;\n\n    // Round 2\n        round2: h_ordering 0, 1, 2, 3; data_index  7; roll_shift  7\n        round2: h_ordering 3, 0, 1, 2; data_index  4; roll_shift  6\n        round2: h_ordering 2, 3, 0, 1; data_index 13; roll_shift  8\n        round2: h_ordering 1, 2, 3, 0; data_index  1; roll_shift 13\n        round2: h_ordering 0, 1, 2, 3; data_index 10; roll_shift 11\n        round2: h_ordering 3, 0, 1, 2; data_index  6; roll_shift  9\n        round2: h_ordering 2, 3, 0, 1; data_index 15; roll_shift  7\n        round2: h_ordering 1, 2, 3, 0; data_index  3; roll_shift 15\n        round2: h_ordering 0, 1, 2, 3; data_index 12; roll_shift  7\n        round2: h_ordering 3, 0, 1, 2; data_index  0; roll_shift 12\n        round2: h_ordering 2, 3, 0, 1; data_index  9; roll_shift 15\n        round2: h_ordering 1, 2, 3, 0; data_index  5; roll_shift  9\n        round2: h_ordering 0, 1, 2, 3; data_index  2; roll_shift 11\n        round2: h_ordering 3, 0, 1, 2; data_index 14; roll_shift  7\n        round2: h_ordering 2, 3, 0, 1; data_index 11; roll_shift 13\n        round2: h_ordering 1, 2, 3, 0; data_index  8; roll_shift 12;\n\n    // Round 3\n        round3: h_ordering 0, 1, 2, 3; data_index  3; roll_shift 11\n        round3: h_ordering 3, 0, 1, 2; data_index 10; roll_shift 13\n        round3: h_ordering 2, 3, 0, 1; data_index 14; roll_shift  6\n        round3: h_ordering 1, 2, 3, 0; data_index  4; roll_shift  7\n        round3: h_ordering 0, 1, 2, 3; data_index  9; roll_shift 14\n        round3: h_ordering 3, 0, 1, 2; data_index 15; roll_shift  9\n        round3: h_ordering 2, 3, 0, 1; data_index  8; roll_shift 13\n        round3: h_ordering 1, 2, 3, 0; data_index  1; roll_shift 15\n        round3: h_ordering 0, 1, 2, 3; data_index  2; roll_shift 14\n        round3: h_ordering 3, 0, 1, 2; data_index  7; roll_shift  8\n        round3: h_ordering 2, 3, 0, 1; data_index  0; roll_shift 13\n        round3: h_ordering 1, 2, 3, 0; data_index  6; roll_shift  6\n        round3: h_ordering 0, 1, 2, 3; data_index 13; roll_shift  5\n        round3: h_ordering 3, 0, 1, 2; data_index 11; roll_shift 12\n        round3: h_ordering 2, 3, 0, 1; data_index  5; roll_shift  7\n        round3: h_ordering 1, 2, 3, 0; data_index 12; roll_shift  5;\n\n    // Round 4\n        round4: h_ordering 0, 1, 2, 3; data_index  1; roll_shift 11\n        round4: h_ordering 3, 0, 1, 2; data_index  9; roll_shift 12\n        round4: h_ordering 2, 3, 0, 1; data_index 11; roll_shift 14\n        round4: h_ordering 1, 2, 3, 0; data_index 10; roll_shift 15\n        round4: h_ordering 0, 1, 2, 3; data_index  0; roll_shift 14\n        round4: h_ordering 3, 0, 1, 2; data_index  8; roll_shift 15\n        round4: h_ordering 2, 3, 0, 1; data_index 12; roll_shift  9\n        round4: h_ordering 1, 2, 3, 0; data_index  4; roll_shift  8\n        round4: h_ordering 0, 1, 2, 3; data_index 13; roll_shift  9\n        round4: h_ordering 3, 0, 1, 2; data_index  3; roll_shift 14\n        round4: h_ordering 2, 3, 0, 1; data_index  7; roll_shift  5\n        round4: h_ordering 1, 2, 3, 0; data_index 15; roll_shift  6\n        round4: h_ordering 0, 1, 2, 3; data_index 14; roll_shift  8\n        round4: h_ordering 3, 0, 1, 2; data_index  5; roll_shift  6\n        round4: h_ordering 2, 3, 0, 1; data_index  6; roll_shift  5\n        round4: h_ordering 1, 2, 3, 0; data_index  2; roll_shift 12;\n\n    // Parallel Round 1\n        par_round1: h_ordering 0, 1, 2, 3; data_index  5; roll_shift  8\n        par_round1: h_ordering 3, 0, 1, 2; data_index 14; roll_shift  9\n        par_round1: h_ordering 2, 3, 0, 1; data_index  7; roll_shift  9\n        par_round1: h_ordering 1, 2, 3, 0; data_index  0; roll_shift 11\n        par_round1: h_ordering 0, 1, 2, 3; data_index  9; roll_shift 13\n        par_round1: h_ordering 3, 0, 1, 2; data_index  2; roll_shift 15\n        par_round1: h_ordering 2, 3, 0, 1; data_index 11; roll_shift 15\n        par_round1: h_ordering 1, 2, 3, 0; data_index  4; roll_shift  5\n        par_round1: h_ordering 0, 1, 2, 3; data_index 13; roll_shift  7\n        par_round1: h_ordering 3, 0, 1, 2; data_index  6; roll_shift  7\n        par_round1: h_ordering 2, 3, 0, 1; data_index 15; roll_shift  8\n        par_round1: h_ordering 1, 2, 3, 0; data_index  8; roll_shift 11\n        par_round1: h_ordering 0, 1, 2, 3; data_index  1; roll_shift 14\n        par_round1: h_ordering 3, 0, 1, 2; data_index 10; roll_shift 14\n        par_round1: h_ordering 2, 3, 0, 1; data_index  3; roll_shift 12\n        par_round1: h_ordering 1, 2, 3, 0; data_index 12; roll_shift  6;\n\n    // Parallel Round 2\n        par_round2: h_ordering 0, 1, 2, 3; data_index  6; roll_shift  9\n        par_round2: h_ordering 3, 0, 1, 2; data_index 11; roll_shift 13\n        par_round2: h_ordering 2, 3, 0, 1; data_index  3; roll_shift 15\n        par_round2: h_ordering 1, 2, 3, 0; data_index  7; roll_shift  7\n        par_round2: h_ordering 0, 1, 2, 3; data_index  0; roll_shift 12\n        par_round2: h_ordering 3, 0, 1, 2; data_index 13; roll_shift  8\n        par_round2: h_ordering 2, 3, 0, 1; data_index  5; roll_shift  9\n        par_round2: h_ordering 1, 2, 3, 0; data_index 10; roll_shift 11\n        par_round2: h_ordering 0, 1, 2, 3; data_index 14; roll_shift  7\n        par_round2: h_ordering 3, 0, 1, 2; data_index 15; roll_shift  7\n        par_round2: h_ordering 2, 3, 0, 1; data_index  8; roll_shift 12\n        par_round2: h_ordering 1, 2, 3, 0; data_index 12; roll_shift  7\n        par_round2: h_ordering 0, 1, 2, 3; data_index  4; roll_shift  6\n        par_round2: h_ordering 3, 0, 1, 2; data_index  9; roll_shift 15\n        par_round2: h_ordering 2, 3, 0, 1; data_index  1; roll_shift 13\n        par_round2: h_ordering 1, 2, 3, 0; data_index  2; roll_shift 11;\n\n    // Parallel Round 3\n        par_round3: h_ordering 0, 1, 2, 3; data_index 15; roll_shift  9\n        par_round3: h_ordering 3, 0, 1, 2; data_index  5; roll_shift  7\n        par_round3: h_ordering 2, 3, 0, 1; data_index  1; roll_shift 15\n        par_round3: h_ordering 1, 2, 3, 0; data_index  3; roll_shift 11\n        par_round3: h_ordering 0, 1, 2, 3; data_index  7; roll_shift  8\n        par_round3: h_ordering 3, 0, 1, 2; data_index 14; roll_shift  6\n        par_round3: h_ordering 2, 3, 0, 1; data_index  6; roll_shift  6\n        par_round3: h_ordering 1, 2, 3, 0; data_index  9; roll_shift 14\n        par_round3: h_ordering 0, 1, 2, 3; data_index 11; roll_shift 12\n        par_round3: h_ordering 3, 0, 1, 2; data_index  8; roll_shift 13\n        par_round3: h_ordering 2, 3, 0, 1; data_index 12; roll_shift  5\n        par_round3: h_ordering 1, 2, 3, 0; data_index  2; roll_shift 14\n        par_round3: h_ordering 0, 1, 2, 3; data_index 10; roll_shift 13\n        par_round3: h_ordering 3, 0, 1, 2; data_index  0; roll_shift 13\n        par_round3: h_ordering 2, 3, 0, 1; data_index  4; roll_shift  7\n        par_round3: h_ordering 1, 2, 3, 0; data_index 13; roll_shift  5;\n\n    // Parallel Round 4\n        par_round4: h_ordering 0, 1, 2, 3; data_index  8; roll_shift 15\n        par_round4: h_ordering 3, 0, 1, 2; data_index  6; roll_shift  5\n        par_round4: h_ordering 2, 3, 0, 1; data_index  4; roll_shift  8\n        par_round4: h_ordering 1, 2, 3, 0; data_index  1; roll_shift 11\n        par_round4: h_ordering 0, 1, 2, 3; data_index  3; roll_shift 14\n        par_round4: h_ordering 3, 0, 1, 2; data_index 11; roll_shift 14\n        par_round4: h_ordering 2, 3, 0, 1; data_index 15; roll_shift  6\n        par_round4: h_ordering 1, 2, 3, 0; data_index  0; roll_shift 14\n        par_round4: h_ordering 0, 1, 2, 3; data_index  5; roll_shift  6\n        par_round4: h_ordering 3, 0, 1, 2; data_index 12; roll_shift  9\n        par_round4: h_ordering 2, 3, 0, 1; data_index  2; roll_shift 12\n        par_round4: h_ordering 1, 2, 3, 0; data_index 13; roll_shift  9\n        par_round4: h_ordering 0, 1, 2, 3; data_index  9; roll_shift 12\n        par_round4: h_ordering 3, 0, 1, 2; data_index  7; roll_shift  5\n        par_round4: h_ordering 2, 3, 0, 1; data_index 10; roll_shift 15\n        par_round4: h_ordering 1, 2, 3, 0; data_index 14; roll_shift  8;\n    );\n}","Real(LocalPath(\"ripemd/src/c128.rs\"))"],"c160::compress":["pub fn compress(h: &mut [u32; DIGEST_BUF_LEN], data: &[u8; 64]){\n    let mut w = [0u32; WORK_BUF_LEN];\n    for (o, chunk) in w.iter_mut().zip(data.chunks_exact(4)) {\n        *o = u32::from_le_bytes(chunk.try_into().unwrap());\n    }\n    process_block!(h, w[..],\n    // Round 1\n        round1: h_ordering 0, 1, 2, 3, 4; data_index  0; roll_shift 11\n        round1: h_ordering 4, 0, 1, 2, 3; data_index  1; roll_shift 14\n        round1: h_ordering 3, 4, 0, 1, 2; data_index  2; roll_shift 15\n        round1: h_ordering 2, 3, 4, 0, 1; data_index  3; roll_shift 12\n        round1: h_ordering 1, 2, 3, 4, 0; data_index  4; roll_shift  5\n        round1: h_ordering 0, 1, 2, 3, 4; data_index  5; roll_shift  8\n        round1: h_ordering 4, 0, 1, 2, 3; data_index  6; roll_shift  7\n        round1: h_ordering 3, 4, 0, 1, 2; data_index  7; roll_shift  9\n        round1: h_ordering 2, 3, 4, 0, 1; data_index  8; roll_shift 11\n        round1: h_ordering 1, 2, 3, 4, 0; data_index  9; roll_shift 13\n        round1: h_ordering 0, 1, 2, 3, 4; data_index 10; roll_shift 14\n        round1: h_ordering 4, 0, 1, 2, 3; data_index 11; roll_shift 15\n        round1: h_ordering 3, 4, 0, 1, 2; data_index 12; roll_shift  6\n        round1: h_ordering 2, 3, 4, 0, 1; data_index 13; roll_shift  7\n        round1: h_ordering 1, 2, 3, 4, 0; data_index 14; roll_shift  9\n        round1: h_ordering 0, 1, 2, 3, 4; data_index 15; roll_shift  8;\n\n    // Round 2\n        round2: h_ordering 4, 0, 1, 2, 3; data_index  7; roll_shift  7\n        round2: h_ordering 3, 4, 0, 1, 2; data_index  4; roll_shift  6\n        round2: h_ordering 2, 3, 4, 0, 1; data_index 13; roll_shift  8\n        round2: h_ordering 1, 2, 3, 4, 0; data_index  1; roll_shift 13\n        round2: h_ordering 0, 1, 2, 3, 4; data_index 10; roll_shift 11\n        round2: h_ordering 4, 0, 1, 2, 3; data_index  6; roll_shift  9\n        round2: h_ordering 3, 4, 0, 1, 2; data_index 15; roll_shift  7\n        round2: h_ordering 2, 3, 4, 0, 1; data_index  3; roll_shift 15\n        round2: h_ordering 1, 2, 3, 4, 0; data_index 12; roll_shift  7\n        round2: h_ordering 0, 1, 2, 3, 4; data_index  0; roll_shift 12\n        round2: h_ordering 4, 0, 1, 2, 3; data_index  9; roll_shift 15\n        round2: h_ordering 3, 4, 0, 1, 2; data_index  5; roll_shift  9\n        round2: h_ordering 2, 3, 4, 0, 1; data_index  2; roll_shift 11\n        round2: h_ordering 1, 2, 3, 4, 0; data_index 14; roll_shift  7\n        round2: h_ordering 0, 1, 2, 3, 4; data_index 11; roll_shift 13\n        round2: h_ordering 4, 0, 1, 2, 3; data_index  8; roll_shift 12;\n\n    // Round 3\n        round3: h_ordering 3, 4, 0, 1, 2; data_index  3; roll_shift 11\n        round3: h_ordering 2, 3, 4, 0, 1; data_index 10; roll_shift 13\n        round3: h_ordering 1, 2, 3, 4, 0; data_index 14; roll_shift  6\n        round3: h_ordering 0, 1, 2, 3, 4; data_index  4; roll_shift  7\n        round3: h_ordering 4, 0, 1, 2, 3; data_index  9; roll_shift 14\n        round3: h_ordering 3, 4, 0, 1, 2; data_index 15; roll_shift  9\n        round3: h_ordering 2, 3, 4, 0, 1; data_index  8; roll_shift 13\n        round3: h_ordering 1, 2, 3, 4, 0; data_index  1; roll_shift 15\n        round3: h_ordering 0, 1, 2, 3, 4; data_index  2; roll_shift 14\n        round3: h_ordering 4, 0, 1, 2, 3; data_index  7; roll_shift  8\n        round3: h_ordering 3, 4, 0, 1, 2; data_index  0; roll_shift 13\n        round3: h_ordering 2, 3, 4, 0, 1; data_index  6; roll_shift  6\n        round3: h_ordering 1, 2, 3, 4, 0; data_index 13; roll_shift  5\n        round3: h_ordering 0, 1, 2, 3, 4; data_index 11; roll_shift 12\n        round3: h_ordering 4, 0, 1, 2, 3; data_index  5; roll_shift  7\n        round3: h_ordering 3, 4, 0, 1, 2; data_index 12; roll_shift  5;\n\n    // Round 4\n        round4: h_ordering 2, 3, 4, 0, 1; data_index  1; roll_shift 11\n        round4: h_ordering 1, 2, 3, 4, 0; data_index  9; roll_shift 12\n        round4: h_ordering 0, 1, 2, 3, 4; data_index 11; roll_shift 14\n        round4: h_ordering 4, 0, 1, 2, 3; data_index 10; roll_shift 15\n        round4: h_ordering 3, 4, 0, 1, 2; data_index  0; roll_shift 14\n        round4: h_ordering 2, 3, 4, 0, 1; data_index  8; roll_shift 15\n        round4: h_ordering 1, 2, 3, 4, 0; data_index 12; roll_shift  9\n        round4: h_ordering 0, 1, 2, 3, 4; data_index  4; roll_shift  8\n        round4: h_ordering 4, 0, 1, 2, 3; data_index 13; roll_shift  9\n        round4: h_ordering 3, 4, 0, 1, 2; data_index  3; roll_shift 14\n        round4: h_ordering 2, 3, 4, 0, 1; data_index  7; roll_shift  5\n        round4: h_ordering 1, 2, 3, 4, 0; data_index 15; roll_shift  6\n        round4: h_ordering 0, 1, 2, 3, 4; data_index 14; roll_shift  8\n        round4: h_ordering 4, 0, 1, 2, 3; data_index  5; roll_shift  6\n        round4: h_ordering 3, 4, 0, 1, 2; data_index  6; roll_shift  5\n        round4: h_ordering 2, 3, 4, 0, 1; data_index  2; roll_shift 12;\n\n    // Round 5\n        round5: h_ordering 1, 2, 3, 4, 0; data_index  4; roll_shift  9\n        round5: h_ordering 0, 1, 2, 3, 4; data_index  0; roll_shift 15\n        round5: h_ordering 4, 0, 1, 2, 3; data_index  5; roll_shift  5\n        round5: h_ordering 3, 4, 0, 1, 2; data_index  9; roll_shift 11\n        round5: h_ordering 2, 3, 4, 0, 1; data_index  7; roll_shift  6\n        round5: h_ordering 1, 2, 3, 4, 0; data_index 12; roll_shift  8\n        round5: h_ordering 0, 1, 2, 3, 4; data_index  2; roll_shift 13\n        round5: h_ordering 4, 0, 1, 2, 3; data_index 10; roll_shift 12\n        round5: h_ordering 3, 4, 0, 1, 2; data_index 14; roll_shift  5\n        round5: h_ordering 2, 3, 4, 0, 1; data_index  1; roll_shift 12\n        round5: h_ordering 1, 2, 3, 4, 0; data_index  3; roll_shift 13\n        round5: h_ordering 0, 1, 2, 3, 4; data_index  8; roll_shift 14\n        round5: h_ordering 4, 0, 1, 2, 3; data_index 11; roll_shift 11\n        round5: h_ordering 3, 4, 0, 1, 2; data_index  6; roll_shift  8\n        round5: h_ordering 2, 3, 4, 0, 1; data_index 15; roll_shift  5\n        round5: h_ordering 1, 2, 3, 4, 0; data_index 13; roll_shift  6;\n\n    // Parallel Round 1\n        par_round1: h_ordering 0, 1, 2, 3, 4; data_index  5; roll_shift  8\n        par_round1: h_ordering 4, 0, 1, 2, 3; data_index 14; roll_shift  9\n        par_round1: h_ordering 3, 4, 0, 1, 2; data_index  7; roll_shift  9\n        par_round1: h_ordering 2, 3, 4, 0, 1; data_index  0; roll_shift 11\n        par_round1: h_ordering 1, 2, 3, 4, 0; data_index  9; roll_shift 13\n        par_round1: h_ordering 0, 1, 2, 3, 4; data_index  2; roll_shift 15\n        par_round1: h_ordering 4, 0, 1, 2, 3; data_index 11; roll_shift 15\n        par_round1: h_ordering 3, 4, 0, 1, 2; data_index  4; roll_shift  5\n        par_round1: h_ordering 2, 3, 4, 0, 1; data_index 13; roll_shift  7\n        par_round1: h_ordering 1, 2, 3, 4, 0; data_index  6; roll_shift  7\n        par_round1: h_ordering 0, 1, 2, 3, 4; data_index 15; roll_shift  8\n        par_round1: h_ordering 4, 0, 1, 2, 3; data_index  8; roll_shift 11\n        par_round1: h_ordering 3, 4, 0, 1, 2; data_index  1; roll_shift 14\n        par_round1: h_ordering 2, 3, 4, 0, 1; data_index 10; roll_shift 14\n        par_round1: h_ordering 1, 2, 3, 4, 0; data_index  3; roll_shift 12\n        par_round1: h_ordering 0, 1, 2, 3, 4; data_index 12; roll_shift  6;\n\n    // Parallel Round 2\n        par_round2: h_ordering 4, 0, 1, 2, 3; data_index  6; roll_shift  9\n        par_round2: h_ordering 3, 4, 0, 1, 2; data_index 11; roll_shift 13\n        par_round2: h_ordering 2, 3, 4, 0, 1; data_index  3; roll_shift 15\n        par_round2: h_ordering 1, 2, 3, 4, 0; data_index  7; roll_shift  7\n        par_round2: h_ordering 0, 1, 2, 3, 4; data_index  0; roll_shift 12\n        par_round2: h_ordering 4, 0, 1, 2, 3; data_index 13; roll_shift  8\n        par_round2: h_ordering 3, 4, 0, 1, 2; data_index  5; roll_shift  9\n        par_round2: h_ordering 2, 3, 4, 0, 1; data_index 10; roll_shift 11\n        par_round2: h_ordering 1, 2, 3, 4, 0; data_index 14; roll_shift  7\n        par_round2: h_ordering 0, 1, 2, 3, 4; data_index 15; roll_shift  7\n        par_round2: h_ordering 4, 0, 1, 2, 3; data_index  8; roll_shift 12\n        par_round2: h_ordering 3, 4, 0, 1, 2; data_index 12; roll_shift  7\n        par_round2: h_ordering 2, 3, 4, 0, 1; data_index  4; roll_shift  6\n        par_round2: h_ordering 1, 2, 3, 4, 0; data_index  9; roll_shift 15\n        par_round2: h_ordering 0, 1, 2, 3, 4; data_index  1; roll_shift 13\n        par_round2: h_ordering 4, 0, 1, 2, 3; data_index  2; roll_shift 11;\n\n    // Parallel Round 3\n        par_round3: h_ordering 3, 4, 0, 1, 2; data_index 15; roll_shift  9\n        par_round3: h_ordering 2, 3, 4, 0, 1; data_index  5; roll_shift  7\n        par_round3: h_ordering 1, 2, 3, 4, 0; data_index  1; roll_shift 15\n        par_round3: h_ordering 0, 1, 2, 3, 4; data_index  3; roll_shift 11\n        par_round3: h_ordering 4, 0, 1, 2, 3; data_index  7; roll_shift  8\n        par_round3: h_ordering 3, 4, 0, 1, 2; data_index 14; roll_shift  6\n        par_round3: h_ordering 2, 3, 4, 0, 1; data_index  6; roll_shift  6\n        par_round3: h_ordering 1, 2, 3, 4, 0; data_index  9; roll_shift 14\n        par_round3: h_ordering 0, 1, 2, 3, 4; data_index 11; roll_shift 12\n        par_round3: h_ordering 4, 0, 1, 2, 3; data_index  8; roll_shift 13\n        par_round3: h_ordering 3, 4, 0, 1, 2; data_index 12; roll_shift  5\n        par_round3: h_ordering 2, 3, 4, 0, 1; data_index  2; roll_shift 14\n        par_round3: h_ordering 1, 2, 3, 4, 0; data_index 10; roll_shift 13\n        par_round3: h_ordering 0, 1, 2, 3, 4; data_index  0; roll_shift 13\n        par_round3: h_ordering 4, 0, 1, 2, 3; data_index  4; roll_shift  7\n        par_round3: h_ordering 3, 4, 0, 1, 2; data_index 13; roll_shift  5;\n\n    // Parallel Round 4\n        par_round4: h_ordering 2, 3, 4, 0, 1; data_index  8; roll_shift 15\n        par_round4: h_ordering 1, 2, 3, 4, 0; data_index  6; roll_shift  5\n        par_round4: h_ordering 0, 1, 2, 3, 4; data_index  4; roll_shift  8\n        par_round4: h_ordering 4, 0, 1, 2, 3; data_index  1; roll_shift 11\n        par_round4: h_ordering 3, 4, 0, 1, 2; data_index  3; roll_shift 14\n        par_round4: h_ordering 2, 3, 4, 0, 1; data_index 11; roll_shift 14\n        par_round4: h_ordering 1, 2, 3, 4, 0; data_index 15; roll_shift  6\n        par_round4: h_ordering 0, 1, 2, 3, 4; data_index  0; roll_shift 14\n        par_round4: h_ordering 4, 0, 1, 2, 3; data_index  5; roll_shift  6\n        par_round4: h_ordering 3, 4, 0, 1, 2; data_index 12; roll_shift  9\n        par_round4: h_ordering 2, 3, 4, 0, 1; data_index  2; roll_shift 12\n        par_round4: h_ordering 1, 2, 3, 4, 0; data_index 13; roll_shift  9\n        par_round4: h_ordering 0, 1, 2, 3, 4; data_index  9; roll_shift 12\n        par_round4: h_ordering 4, 0, 1, 2, 3; data_index  7; roll_shift  5\n        par_round4: h_ordering 3, 4, 0, 1, 2; data_index 10; roll_shift 15\n        par_round4: h_ordering 2, 3, 4, 0, 1; data_index 14; roll_shift  8;\n\n    // Parallel Round 5\n        par_round5: h_ordering 1, 2, 3, 4, 0; data_index 12; roll_shift  8\n        par_round5: h_ordering 0, 1, 2, 3, 4; data_index 15; roll_shift  5\n        par_round5: h_ordering 4, 0, 1, 2, 3; data_index 10; roll_shift 12\n        par_round5: h_ordering 3, 4, 0, 1, 2; data_index  4; roll_shift  9\n        par_round5: h_ordering 2, 3, 4, 0, 1; data_index  1; roll_shift 12\n        par_round5: h_ordering 1, 2, 3, 4, 0; data_index  5; roll_shift  5\n        par_round5: h_ordering 0, 1, 2, 3, 4; data_index  8; roll_shift 14\n        par_round5: h_ordering 4, 0, 1, 2, 3; data_index  7; roll_shift  6\n        par_round5: h_ordering 3, 4, 0, 1, 2; data_index  6; roll_shift  8\n        par_round5: h_ordering 2, 3, 4, 0, 1; data_index  2; roll_shift 13\n        par_round5: h_ordering 1, 2, 3, 4, 0; data_index 13; roll_shift  6\n        par_round5: h_ordering 0, 1, 2, 3, 4; data_index 14; roll_shift  5\n        par_round5: h_ordering 4, 0, 1, 2, 3; data_index  0; roll_shift 15\n        par_round5: h_ordering 3, 4, 0, 1, 2; data_index  3; roll_shift 13\n        par_round5: h_ordering 2, 3, 4, 0, 1; data_index  9; roll_shift 11\n        par_round5: h_ordering 1, 2, 3, 4, 0; data_index 11; roll_shift 11;\n    );\n}","Real(LocalPath(\"ripemd/src/c160.rs\"))"],"c256::compress":["pub fn compress(h: &mut [u32; DIGEST_BUF_LEN], data: &[u8; 64]){\n    let mut w = [0u32; WORK_BUF_LEN];\n    for (o, chunk) in w.iter_mut().zip(data.chunks_exact(4)) {\n        *o = u32::from_le_bytes(chunk.try_into().unwrap());\n    }\n\n    process_block!(h, w[..],\n\n    // Round 1\n        round1: h_ordering 0, 1, 2, 3; data_index  0; roll_shift 11\n        round1: h_ordering 3, 0, 1, 2; data_index  1; roll_shift 14\n        round1: h_ordering 2, 3, 0, 1; data_index  2; roll_shift 15\n        round1: h_ordering 1, 2, 3, 0; data_index  3; roll_shift 12\n        round1: h_ordering 0, 1, 2, 3; data_index  4; roll_shift  5\n        round1: h_ordering 3, 0, 1, 2; data_index  5; roll_shift  8\n        round1: h_ordering 2, 3, 0, 1; data_index  6; roll_shift  7\n        round1: h_ordering 1, 2, 3, 0; data_index  7; roll_shift  9\n        round1: h_ordering 0, 1, 2, 3; data_index  8; roll_shift 11\n        round1: h_ordering 3, 0, 1, 2; data_index  9; roll_shift 13\n        round1: h_ordering 2, 3, 0, 1; data_index 10; roll_shift 14\n        round1: h_ordering 1, 2, 3, 0; data_index 11; roll_shift 15\n        round1: h_ordering 0, 1, 2, 3; data_index 12; roll_shift  6\n        round1: h_ordering 3, 0, 1, 2; data_index 13; roll_shift  7\n        round1: h_ordering 2, 3, 0, 1; data_index 14; roll_shift  9\n        round1: h_ordering 1, 2, 3, 0; data_index 15; roll_shift  8;\n\n    // Round 2\n        round2: h_ordering 0, 1, 2, 3; data_index  7; roll_shift  7\n        round2: h_ordering 3, 0, 1, 2; data_index  4; roll_shift  6\n        round2: h_ordering 2, 3, 0, 1; data_index 13; roll_shift  8\n        round2: h_ordering 1, 2, 3, 0; data_index  1; roll_shift 13\n        round2: h_ordering 0, 1, 2, 3; data_index 10; roll_shift 11\n        round2: h_ordering 3, 0, 1, 2; data_index  6; roll_shift  9\n        round2: h_ordering 2, 3, 0, 1; data_index 15; roll_shift  7\n        round2: h_ordering 1, 2, 3, 0; data_index  3; roll_shift 15\n        round2: h_ordering 0, 1, 2, 3; data_index 12; roll_shift  7\n        round2: h_ordering 3, 0, 1, 2; data_index  0; roll_shift 12\n        round2: h_ordering 2, 3, 0, 1; data_index  9; roll_shift 15\n        round2: h_ordering 1, 2, 3, 0; data_index  5; roll_shift  9\n        round2: h_ordering 0, 1, 2, 3; data_index  2; roll_shift 11\n        round2: h_ordering 3, 0, 1, 2; data_index 14; roll_shift  7\n        round2: h_ordering 2, 3, 0, 1; data_index 11; roll_shift 13\n        round2: h_ordering 1, 2, 3, 0; data_index  8; roll_shift 12;\n\n    // Round 3\n        round3: h_ordering 0, 1, 2, 3; data_index  3; roll_shift 11\n        round3: h_ordering 3, 0, 1, 2; data_index 10; roll_shift 13\n        round3: h_ordering 2, 3, 0, 1; data_index 14; roll_shift  6\n        round3: h_ordering 1, 2, 3, 0; data_index  4; roll_shift  7\n        round3: h_ordering 0, 1, 2, 3; data_index  9; roll_shift 14\n        round3: h_ordering 3, 0, 1, 2; data_index 15; roll_shift  9\n        round3: h_ordering 2, 3, 0, 1; data_index  8; roll_shift 13\n        round3: h_ordering 1, 2, 3, 0; data_index  1; roll_shift 15\n        round3: h_ordering 0, 1, 2, 3; data_index  2; roll_shift 14\n        round3: h_ordering 3, 0, 1, 2; data_index  7; roll_shift  8\n        round3: h_ordering 2, 3, 0, 1; data_index  0; roll_shift 13\n        round3: h_ordering 1, 2, 3, 0; data_index  6; roll_shift  6\n        round3: h_ordering 0, 1, 2, 3; data_index 13; roll_shift  5\n        round3: h_ordering 3, 0, 1, 2; data_index 11; roll_shift 12\n        round3: h_ordering 2, 3, 0, 1; data_index  5; roll_shift  7\n        round3: h_ordering 1, 2, 3, 0; data_index 12; roll_shift  5;\n\n    // Round 4\n        round4: h_ordering 0, 1, 2, 3; data_index  1; roll_shift 11\n        round4: h_ordering 3, 0, 1, 2; data_index  9; roll_shift 12\n        round4: h_ordering 2, 3, 0, 1; data_index 11; roll_shift 14\n        round4: h_ordering 1, 2, 3, 0; data_index 10; roll_shift 15\n        round4: h_ordering 0, 1, 2, 3; data_index  0; roll_shift 14\n        round4: h_ordering 3, 0, 1, 2; data_index  8; roll_shift 15\n        round4: h_ordering 2, 3, 0, 1; data_index 12; roll_shift  9\n        round4: h_ordering 1, 2, 3, 0; data_index  4; roll_shift  8\n        round4: h_ordering 0, 1, 2, 3; data_index 13; roll_shift  9\n        round4: h_ordering 3, 0, 1, 2; data_index  3; roll_shift 14\n        round4: h_ordering 2, 3, 0, 1; data_index  7; roll_shift  5\n        round4: h_ordering 1, 2, 3, 0; data_index 15; roll_shift  6\n        round4: h_ordering 0, 1, 2, 3; data_index 14; roll_shift  8\n        round4: h_ordering 3, 0, 1, 2; data_index  5; roll_shift  6\n        round4: h_ordering 2, 3, 0, 1; data_index  6; roll_shift  5\n        round4: h_ordering 1, 2, 3, 0; data_index  2; roll_shift 12;\n\n    // Parallel Round 1\n        par_round1: h_ordering 0, 1, 2, 3; data_index  5; roll_shift  8\n        par_round1: h_ordering 3, 0, 1, 2; data_index 14; roll_shift  9\n        par_round1: h_ordering 2, 3, 0, 1; data_index  7; roll_shift  9\n        par_round1: h_ordering 1, 2, 3, 0; data_index  0; roll_shift 11\n        par_round1: h_ordering 0, 1, 2, 3; data_index  9; roll_shift 13\n        par_round1: h_ordering 3, 0, 1, 2; data_index  2; roll_shift 15\n        par_round1: h_ordering 2, 3, 0, 1; data_index 11; roll_shift 15\n        par_round1: h_ordering 1, 2, 3, 0; data_index  4; roll_shift  5\n        par_round1: h_ordering 0, 1, 2, 3; data_index 13; roll_shift  7\n        par_round1: h_ordering 3, 0, 1, 2; data_index  6; roll_shift  7\n        par_round1: h_ordering 2, 3, 0, 1; data_index 15; roll_shift  8\n        par_round1: h_ordering 1, 2, 3, 0; data_index  8; roll_shift 11\n        par_round1: h_ordering 0, 1, 2, 3; data_index  1; roll_shift 14\n        par_round1: h_ordering 3, 0, 1, 2; data_index 10; roll_shift 14\n        par_round1: h_ordering 2, 3, 0, 1; data_index  3; roll_shift 12\n        par_round1: h_ordering 1, 2, 3, 0; data_index 12; roll_shift  6;\n\n    // Parallel Round 2\n        par_round2: h_ordering 0, 1, 2, 3; data_index  6; roll_shift  9\n        par_round2: h_ordering 3, 0, 1, 2; data_index 11; roll_shift 13\n        par_round2: h_ordering 2, 3, 0, 1; data_index  3; roll_shift 15\n        par_round2: h_ordering 1, 2, 3, 0; data_index  7; roll_shift  7\n        par_round2: h_ordering 0, 1, 2, 3; data_index  0; roll_shift 12\n        par_round2: h_ordering 3, 0, 1, 2; data_index 13; roll_shift  8\n        par_round2: h_ordering 2, 3, 0, 1; data_index  5; roll_shift  9\n        par_round2: h_ordering 1, 2, 3, 0; data_index 10; roll_shift 11\n        par_round2: h_ordering 0, 1, 2, 3; data_index 14; roll_shift  7\n        par_round2: h_ordering 3, 0, 1, 2; data_index 15; roll_shift  7\n        par_round2: h_ordering 2, 3, 0, 1; data_index  8; roll_shift 12\n        par_round2: h_ordering 1, 2, 3, 0; data_index 12; roll_shift  7\n        par_round2: h_ordering 0, 1, 2, 3; data_index  4; roll_shift  6\n        par_round2: h_ordering 3, 0, 1, 2; data_index  9; roll_shift 15\n        par_round2: h_ordering 2, 3, 0, 1; data_index  1; roll_shift 13\n        par_round2: h_ordering 1, 2, 3, 0; data_index  2; roll_shift 11;\n\n    // Parallel Round 3\n        par_round3: h_ordering 0, 1, 2, 3; data_index 15; roll_shift  9\n        par_round3: h_ordering 3, 0, 1, 2; data_index  5; roll_shift  7\n        par_round3: h_ordering 2, 3, 0, 1; data_index  1; roll_shift 15\n        par_round3: h_ordering 1, 2, 3, 0; data_index  3; roll_shift 11\n        par_round3: h_ordering 0, 1, 2, 3; data_index  7; roll_shift  8\n        par_round3: h_ordering 3, 0, 1, 2; data_index 14; roll_shift  6\n        par_round3: h_ordering 2, 3, 0, 1; data_index  6; roll_shift  6\n        par_round3: h_ordering 1, 2, 3, 0; data_index  9; roll_shift 14\n        par_round3: h_ordering 0, 1, 2, 3; data_index 11; roll_shift 12\n        par_round3: h_ordering 3, 0, 1, 2; data_index  8; roll_shift 13\n        par_round3: h_ordering 2, 3, 0, 1; data_index 12; roll_shift  5\n        par_round3: h_ordering 1, 2, 3, 0; data_index  2; roll_shift 14\n        par_round3: h_ordering 0, 1, 2, 3; data_index 10; roll_shift 13\n        par_round3: h_ordering 3, 0, 1, 2; data_index  0; roll_shift 13\n        par_round3: h_ordering 2, 3, 0, 1; data_index  4; roll_shift  7\n        par_round3: h_ordering 1, 2, 3, 0; data_index 13; roll_shift  5;\n\n    // Parallel Round 4\n        par_round4: h_ordering 0, 1, 2, 3; data_index  8; roll_shift 15\n        par_round4: h_ordering 3, 0, 1, 2; data_index  6; roll_shift  5\n        par_round4: h_ordering 2, 3, 0, 1; data_index  4; roll_shift  8\n        par_round4: h_ordering 1, 2, 3, 0; data_index  1; roll_shift 11\n        par_round4: h_ordering 0, 1, 2, 3; data_index  3; roll_shift 14\n        par_round4: h_ordering 3, 0, 1, 2; data_index 11; roll_shift 14\n        par_round4: h_ordering 2, 3, 0, 1; data_index 15; roll_shift  6\n        par_round4: h_ordering 1, 2, 3, 0; data_index  0; roll_shift 14\n        par_round4: h_ordering 0, 1, 2, 3; data_index  5; roll_shift  6\n        par_round4: h_ordering 3, 0, 1, 2; data_index 12; roll_shift  9\n        par_round4: h_ordering 2, 3, 0, 1; data_index  2; roll_shift 12\n        par_round4: h_ordering 1, 2, 3, 0; data_index 13; roll_shift  9\n        par_round4: h_ordering 0, 1, 2, 3; data_index  9; roll_shift 12\n        par_round4: h_ordering 3, 0, 1, 2; data_index  7; roll_shift  5\n        par_round4: h_ordering 2, 3, 0, 1; data_index 10; roll_shift 15\n        par_round4: h_ordering 1, 2, 3, 0; data_index 14; roll_shift  8;\n    );\n}","Real(LocalPath(\"ripemd/src/c256.rs\"))"],"c256::swap_idx":["#[inline(always)]\nfn swap_idx(bb: &mut [u32; HALF_DIGEST_BUF_LEN], bbb: &mut [u32; HALF_DIGEST_BUF_LEN], idx: usize){\n    swap(&mut bb[idx], &mut bbb[idx]);\n}","Real(LocalPath(\"ripemd/src/c256.rs\"))"],"c320::compress":["pub fn compress(h: &mut [u32; DIGEST_BUF_LEN], data: &[u8; 64]){\n    let mut w = [0u32; WORK_BUF_LEN];\n    for (o, chunk) in w.iter_mut().zip(data.chunks_exact(4)) {\n        *o = u32::from_le_bytes(chunk.try_into().unwrap());\n    }\n\n    process_block!(h, w[..],\n    // Round 1\n        round1: h_ordering 0, 1, 2, 3, 4; data_index  0; roll_shift 11\n        round1: h_ordering 4, 0, 1, 2, 3; data_index  1; roll_shift 14\n        round1: h_ordering 3, 4, 0, 1, 2; data_index  2; roll_shift 15\n        round1: h_ordering 2, 3, 4, 0, 1; data_index  3; roll_shift 12\n        round1: h_ordering 1, 2, 3, 4, 0; data_index  4; roll_shift  5\n        round1: h_ordering 0, 1, 2, 3, 4; data_index  5; roll_shift  8\n        round1: h_ordering 4, 0, 1, 2, 3; data_index  6; roll_shift  7\n        round1: h_ordering 3, 4, 0, 1, 2; data_index  7; roll_shift  9\n        round1: h_ordering 2, 3, 4, 0, 1; data_index  8; roll_shift 11\n        round1: h_ordering 1, 2, 3, 4, 0; data_index  9; roll_shift 13\n        round1: h_ordering 0, 1, 2, 3, 4; data_index 10; roll_shift 14\n        round1: h_ordering 4, 0, 1, 2, 3; data_index 11; roll_shift 15\n        round1: h_ordering 3, 4, 0, 1, 2; data_index 12; roll_shift  6\n        round1: h_ordering 2, 3, 4, 0, 1; data_index 13; roll_shift  7\n        round1: h_ordering 1, 2, 3, 4, 0; data_index 14; roll_shift  9\n        round1: h_ordering 0, 1, 2, 3, 4; data_index 15; roll_shift  8;\n\n    // Round 2\n        round2: h_ordering 4, 0, 1, 2, 3; data_index  7; roll_shift  7\n        round2: h_ordering 3, 4, 0, 1, 2; data_index  4; roll_shift  6\n        round2: h_ordering 2, 3, 4, 0, 1; data_index 13; roll_shift  8\n        round2: h_ordering 1, 2, 3, 4, 0; data_index  1; roll_shift 13\n        round2: h_ordering 0, 1, 2, 3, 4; data_index 10; roll_shift 11\n        round2: h_ordering 4, 0, 1, 2, 3; data_index  6; roll_shift  9\n        round2: h_ordering 3, 4, 0, 1, 2; data_index 15; roll_shift  7\n        round2: h_ordering 2, 3, 4, 0, 1; data_index  3; roll_shift 15\n        round2: h_ordering 1, 2, 3, 4, 0; data_index 12; roll_shift  7\n        round2: h_ordering 0, 1, 2, 3, 4; data_index  0; roll_shift 12\n        round2: h_ordering 4, 0, 1, 2, 3; data_index  9; roll_shift 15\n        round2: h_ordering 3, 4, 0, 1, 2; data_index  5; roll_shift  9\n        round2: h_ordering 2, 3, 4, 0, 1; data_index  2; roll_shift 11\n        round2: h_ordering 1, 2, 3, 4, 0; data_index 14; roll_shift  7\n        round2: h_ordering 0, 1, 2, 3, 4; data_index 11; roll_shift 13\n        round2: h_ordering 4, 0, 1, 2, 3; data_index  8; roll_shift 12;\n\n    // Round 3\n        round3: h_ordering 3, 4, 0, 1, 2; data_index  3; roll_shift 11\n        round3: h_ordering 2, 3, 4, 0, 1; data_index 10; roll_shift 13\n        round3: h_ordering 1, 2, 3, 4, 0; data_index 14; roll_shift  6\n        round3: h_ordering 0, 1, 2, 3, 4; data_index  4; roll_shift  7\n        round3: h_ordering 4, 0, 1, 2, 3; data_index  9; roll_shift 14\n        round3: h_ordering 3, 4, 0, 1, 2; data_index 15; roll_shift  9\n        round3: h_ordering 2, 3, 4, 0, 1; data_index  8; roll_shift 13\n        round3: h_ordering 1, 2, 3, 4, 0; data_index  1; roll_shift 15\n        round3: h_ordering 0, 1, 2, 3, 4; data_index  2; roll_shift 14\n        round3: h_ordering 4, 0, 1, 2, 3; data_index  7; roll_shift  8\n        round3: h_ordering 3, 4, 0, 1, 2; data_index  0; roll_shift 13\n        round3: h_ordering 2, 3, 4, 0, 1; data_index  6; roll_shift  6\n        round3: h_ordering 1, 2, 3, 4, 0; data_index 13; roll_shift  5\n        round3: h_ordering 0, 1, 2, 3, 4; data_index 11; roll_shift 12\n        round3: h_ordering 4, 0, 1, 2, 3; data_index  5; roll_shift  7\n        round3: h_ordering 3, 4, 0, 1, 2; data_index 12; roll_shift  5;\n\n    // Round 4\n        round4: h_ordering 2, 3, 4, 0, 1; data_index  1; roll_shift 11\n        round4: h_ordering 1, 2, 3, 4, 0; data_index  9; roll_shift 12\n        round4: h_ordering 0, 1, 2, 3, 4; data_index 11; roll_shift 14\n        round4: h_ordering 4, 0, 1, 2, 3; data_index 10; roll_shift 15\n        round4: h_ordering 3, 4, 0, 1, 2; data_index  0; roll_shift 14\n        round4: h_ordering 2, 3, 4, 0, 1; data_index  8; roll_shift 15\n        round4: h_ordering 1, 2, 3, 4, 0; data_index 12; roll_shift  9\n        round4: h_ordering 0, 1, 2, 3, 4; data_index  4; roll_shift  8\n        round4: h_ordering 4, 0, 1, 2, 3; data_index 13; roll_shift  9\n        round4: h_ordering 3, 4, 0, 1, 2; data_index  3; roll_shift 14\n        round4: h_ordering 2, 3, 4, 0, 1; data_index  7; roll_shift  5\n        round4: h_ordering 1, 2, 3, 4, 0; data_index 15; roll_shift  6\n        round4: h_ordering 0, 1, 2, 3, 4; data_index 14; roll_shift  8\n        round4: h_ordering 4, 0, 1, 2, 3; data_index  5; roll_shift  6\n        round4: h_ordering 3, 4, 0, 1, 2; data_index  6; roll_shift  5\n        round4: h_ordering 2, 3, 4, 0, 1; data_index  2; roll_shift 12;\n\n    // Round 5\n        round5: h_ordering 1, 2, 3, 4, 0; data_index  4; roll_shift  9\n        round5: h_ordering 0, 1, 2, 3, 4; data_index  0; roll_shift 15\n        round5: h_ordering 4, 0, 1, 2, 3; data_index  5; roll_shift  5\n        round5: h_ordering 3, 4, 0, 1, 2; data_index  9; roll_shift 11\n        round5: h_ordering 2, 3, 4, 0, 1; data_index  7; roll_shift  6\n        round5: h_ordering 1, 2, 3, 4, 0; data_index 12; roll_shift  8\n        round5: h_ordering 0, 1, 2, 3, 4; data_index  2; roll_shift 13\n        round5: h_ordering 4, 0, 1, 2, 3; data_index 10; roll_shift 12\n        round5: h_ordering 3, 4, 0, 1, 2; data_index 14; roll_shift  5\n        round5: h_ordering 2, 3, 4, 0, 1; data_index  1; roll_shift 12\n        round5: h_ordering 1, 2, 3, 4, 0; data_index  3; roll_shift 13\n        round5: h_ordering 0, 1, 2, 3, 4; data_index  8; roll_shift 14\n        round5: h_ordering 4, 0, 1, 2, 3; data_index 11; roll_shift 11\n        round5: h_ordering 3, 4, 0, 1, 2; data_index  6; roll_shift  8\n        round5: h_ordering 2, 3, 4, 0, 1; data_index 15; roll_shift  5\n        round5: h_ordering 1, 2, 3, 4, 0; data_index 13; roll_shift  6;\n\n    // Parallel Round 1\n        par_round1: h_ordering 0, 1, 2, 3, 4; data_index  5; roll_shift  8\n        par_round1: h_ordering 4, 0, 1, 2, 3; data_index 14; roll_shift  9\n        par_round1: h_ordering 3, 4, 0, 1, 2; data_index  7; roll_shift  9\n        par_round1: h_ordering 2, 3, 4, 0, 1; data_index  0; roll_shift 11\n        par_round1: h_ordering 1, 2, 3, 4, 0; data_index  9; roll_shift 13\n        par_round1: h_ordering 0, 1, 2, 3, 4; data_index  2; roll_shift 15\n        par_round1: h_ordering 4, 0, 1, 2, 3; data_index 11; roll_shift 15\n        par_round1: h_ordering 3, 4, 0, 1, 2; data_index  4; roll_shift  5\n        par_round1: h_ordering 2, 3, 4, 0, 1; data_index 13; roll_shift  7\n        par_round1: h_ordering 1, 2, 3, 4, 0; data_index  6; roll_shift  7\n        par_round1: h_ordering 0, 1, 2, 3, 4; data_index 15; roll_shift  8\n        par_round1: h_ordering 4, 0, 1, 2, 3; data_index  8; roll_shift 11\n        par_round1: h_ordering 3, 4, 0, 1, 2; data_index  1; roll_shift 14\n        par_round1: h_ordering 2, 3, 4, 0, 1; data_index 10; roll_shift 14\n        par_round1: h_ordering 1, 2, 3, 4, 0; data_index  3; roll_shift 12\n        par_round1: h_ordering 0, 1, 2, 3, 4; data_index 12; roll_shift  6;\n\n    // Parallel Round 2\n        par_round2: h_ordering 4, 0, 1, 2, 3; data_index  6; roll_shift  9\n        par_round2: h_ordering 3, 4, 0, 1, 2; data_index 11; roll_shift 13\n        par_round2: h_ordering 2, 3, 4, 0, 1; data_index  3; roll_shift 15\n        par_round2: h_ordering 1, 2, 3, 4, 0; data_index  7; roll_shift  7\n        par_round2: h_ordering 0, 1, 2, 3, 4; data_index  0; roll_shift 12\n        par_round2: h_ordering 4, 0, 1, 2, 3; data_index 13; roll_shift  8\n        par_round2: h_ordering 3, 4, 0, 1, 2; data_index  5; roll_shift  9\n        par_round2: h_ordering 2, 3, 4, 0, 1; data_index 10; roll_shift 11\n        par_round2: h_ordering 1, 2, 3, 4, 0; data_index 14; roll_shift  7\n        par_round2: h_ordering 0, 1, 2, 3, 4; data_index 15; roll_shift  7\n        par_round2: h_ordering 4, 0, 1, 2, 3; data_index  8; roll_shift 12\n        par_round2: h_ordering 3, 4, 0, 1, 2; data_index 12; roll_shift  7\n        par_round2: h_ordering 2, 3, 4, 0, 1; data_index  4; roll_shift  6\n        par_round2: h_ordering 1, 2, 3, 4, 0; data_index  9; roll_shift 15\n        par_round2: h_ordering 0, 1, 2, 3, 4; data_index  1; roll_shift 13\n        par_round2: h_ordering 4, 0, 1, 2, 3; data_index  2; roll_shift 11;\n\n    // Parallel Round 3\n        par_round3: h_ordering 3, 4, 0, 1, 2; data_index 15; roll_shift  9\n        par_round3: h_ordering 2, 3, 4, 0, 1; data_index  5; roll_shift  7\n        par_round3: h_ordering 1, 2, 3, 4, 0; data_index  1; roll_shift 15\n        par_round3: h_ordering 0, 1, 2, 3, 4; data_index  3; roll_shift 11\n        par_round3: h_ordering 4, 0, 1, 2, 3; data_index  7; roll_shift  8\n        par_round3: h_ordering 3, 4, 0, 1, 2; data_index 14; roll_shift  6\n        par_round3: h_ordering 2, 3, 4, 0, 1; data_index  6; roll_shift  6\n        par_round3: h_ordering 1, 2, 3, 4, 0; data_index  9; roll_shift 14\n        par_round3: h_ordering 0, 1, 2, 3, 4; data_index 11; roll_shift 12\n        par_round3: h_ordering 4, 0, 1, 2, 3; data_index  8; roll_shift 13\n        par_round3: h_ordering 3, 4, 0, 1, 2; data_index 12; roll_shift  5\n        par_round3: h_ordering 2, 3, 4, 0, 1; data_index  2; roll_shift 14\n        par_round3: h_ordering 1, 2, 3, 4, 0; data_index 10; roll_shift 13\n        par_round3: h_ordering 0, 1, 2, 3, 4; data_index  0; roll_shift 13\n        par_round3: h_ordering 4, 0, 1, 2, 3; data_index  4; roll_shift  7\n        par_round3: h_ordering 3, 4, 0, 1, 2; data_index 13; roll_shift  5;\n\n    // Parallel Round 4\n        par_round4: h_ordering 2, 3, 4, 0, 1; data_index  8; roll_shift 15\n        par_round4: h_ordering 1, 2, 3, 4, 0; data_index  6; roll_shift  5\n        par_round4: h_ordering 0, 1, 2, 3, 4; data_index  4; roll_shift  8\n        par_round4: h_ordering 4, 0, 1, 2, 3; data_index  1; roll_shift 11\n        par_round4: h_ordering 3, 4, 0, 1, 2; data_index  3; roll_shift 14\n        par_round4: h_ordering 2, 3, 4, 0, 1; data_index 11; roll_shift 14\n        par_round4: h_ordering 1, 2, 3, 4, 0; data_index 15; roll_shift  6\n        par_round4: h_ordering 0, 1, 2, 3, 4; data_index  0; roll_shift 14\n        par_round4: h_ordering 4, 0, 1, 2, 3; data_index  5; roll_shift  6\n        par_round4: h_ordering 3, 4, 0, 1, 2; data_index 12; roll_shift  9\n        par_round4: h_ordering 2, 3, 4, 0, 1; data_index  2; roll_shift 12\n        par_round4: h_ordering 1, 2, 3, 4, 0; data_index 13; roll_shift  9\n        par_round4: h_ordering 0, 1, 2, 3, 4; data_index  9; roll_shift 12\n        par_round4: h_ordering 4, 0, 1, 2, 3; data_index  7; roll_shift  5\n        par_round4: h_ordering 3, 4, 0, 1, 2; data_index 10; roll_shift 15\n        par_round4: h_ordering 2, 3, 4, 0, 1; data_index 14; roll_shift  8;\n\n    // Parallel Round 5\n        par_round5: h_ordering 1, 2, 3, 4, 0; data_index 12; roll_shift  8\n        par_round5: h_ordering 0, 1, 2, 3, 4; data_index 15; roll_shift  5\n        par_round5: h_ordering 4, 0, 1, 2, 3; data_index 10; roll_shift 12\n        par_round5: h_ordering 3, 4, 0, 1, 2; data_index  4; roll_shift  9\n        par_round5: h_ordering 2, 3, 4, 0, 1; data_index  1; roll_shift 12\n        par_round5: h_ordering 1, 2, 3, 4, 0; data_index  5; roll_shift  5\n        par_round5: h_ordering 0, 1, 2, 3, 4; data_index  8; roll_shift 14\n        par_round5: h_ordering 4, 0, 1, 2, 3; data_index  7; roll_shift  6\n        par_round5: h_ordering 3, 4, 0, 1, 2; data_index  6; roll_shift  8\n        par_round5: h_ordering 2, 3, 4, 0, 1; data_index  2; roll_shift 13\n        par_round5: h_ordering 1, 2, 3, 4, 0; data_index 13; roll_shift  6\n        par_round5: h_ordering 0, 1, 2, 3, 4; data_index 14; roll_shift  5\n        par_round5: h_ordering 4, 0, 1, 2, 3; data_index  0; roll_shift 15\n        par_round5: h_ordering 3, 4, 0, 1, 2; data_index  3; roll_shift 13\n        par_round5: h_ordering 2, 3, 4, 0, 1; data_index  9; roll_shift 11\n        par_round5: h_ordering 1, 2, 3, 4, 0; data_index 11; roll_shift 11;\n    );\n}","Real(LocalPath(\"ripemd/src/c320.rs\"))"],"c320::swap_idx":["#[inline(always)]\nfn swap_idx(bb: &mut [u32; HALF_DIGEST_BUF_LEN], bbb: &mut [u32; HALF_DIGEST_BUF_LEN], idx: usize){\n    swap(&mut bb[idx], &mut bbb[idx]);\n}","Real(LocalPath(\"ripemd/src/c320.rs\"))"]},"struct_constructor":{"Ripemd128Core":["clone","default"],"Ripemd160Core":["clone","default"],"Ripemd256Core":["clone","default"],"Ripemd320Core":["clone","default"],"core::result::Result":["fmt","write_alg_name"]},"struct_to_trait":{"Ripemd128Core":["core::clone::Clone","core::default::Default","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::Reset","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::FixedOutputCore","digest::core_api::UpdateCore"],"Ripemd160Core":["core::clone::Clone","core::default::Default","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::Reset","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::FixedOutputCore","digest::core_api::UpdateCore"],"Ripemd256Core":["core::clone::Clone","core::default::Default","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::Reset","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::FixedOutputCore","digest::core_api::UpdateCore"],"Ripemd320Core":["core::clone::Clone","core::default::Default","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::Reset","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::FixedOutputCore","digest::core_api::UpdateCore"]},"targets":{"<Ripemd128Core as core::default::Default>::default":["default","Real(LocalPath(\"ripemd/src/lib.rs\"))","core::default::Default"],"<Ripemd128Core as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"ripemd/src/lib.rs\"))","core::fmt::Debug"],"<Ripemd128Core as digest::Reset>::reset":["reset","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::Reset"],"<Ripemd128Core as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::core_api::AlgorithmName"],"<Ripemd128Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["finalize_fixed_core","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::core_api::FixedOutputCore"],"<Ripemd128Core as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::core_api::UpdateCore"],"<Ripemd160Core as core::default::Default>::default":["default","Real(LocalPath(\"ripemd/src/lib.rs\"))","core::default::Default"],"<Ripemd160Core as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"ripemd/src/lib.rs\"))","core::fmt::Debug"],"<Ripemd160Core as digest::Reset>::reset":["reset","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::Reset"],"<Ripemd160Core as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::core_api::AlgorithmName"],"<Ripemd160Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["finalize_fixed_core","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::core_api::FixedOutputCore"],"<Ripemd160Core as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::core_api::UpdateCore"],"<Ripemd256Core as core::default::Default>::default":["default","Real(LocalPath(\"ripemd/src/lib.rs\"))","core::default::Default"],"<Ripemd256Core as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"ripemd/src/lib.rs\"))","core::fmt::Debug"],"<Ripemd256Core as digest::Reset>::reset":["reset","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::Reset"],"<Ripemd256Core as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::core_api::AlgorithmName"],"<Ripemd256Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["finalize_fixed_core","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::core_api::FixedOutputCore"],"<Ripemd256Core as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::core_api::UpdateCore"],"<Ripemd320Core as core::default::Default>::default":["default","Real(LocalPath(\"ripemd/src/lib.rs\"))","core::default::Default"],"<Ripemd320Core as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"ripemd/src/lib.rs\"))","core::fmt::Debug"],"<Ripemd320Core as digest::Reset>::reset":["reset","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::Reset"],"<Ripemd320Core as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::core_api::AlgorithmName"],"<Ripemd320Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["finalize_fixed_core","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::core_api::FixedOutputCore"],"<Ripemd320Core as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"ripemd/src/lib.rs\"))","digest::core_api::UpdateCore"],"c128::compress":["compress","Real(LocalPath(\"ripemd/src/c128.rs\"))",""],"c160::compress":["compress","Real(LocalPath(\"ripemd/src/c160.rs\"))",""],"c256::compress":["compress","Real(LocalPath(\"ripemd/src/c256.rs\"))",""],"c256::swap_idx":["swap_idx","Real(LocalPath(\"ripemd/src/c256.rs\"))",""],"c320::compress":["compress","Real(LocalPath(\"ripemd/src/c320.rs\"))",""],"c320::swap_idx":["swap_idx","Real(LocalPath(\"ripemd/src/c320.rs\"))",""]},"trait_to_struct":{"core::clone::Clone":["Ripemd128Core","Ripemd160Core","Ripemd256Core","Ripemd320Core"],"core::default::Default":["Ripemd128Core","Ripemd160Core","Ripemd256Core","Ripemd320Core"],"core::fmt::Debug":["Ripemd128Core","Ripemd160Core","Ripemd256Core","Ripemd320Core"],"digest::HashMarker":["Ripemd128Core","Ripemd160Core","Ripemd256Core","Ripemd320Core"],"digest::OutputSizeUser":["Ripemd128Core","Ripemd160Core","Ripemd256Core","Ripemd320Core"],"digest::Reset":["Ripemd128Core","Ripemd160Core","Ripemd256Core","Ripemd320Core"],"digest::core_api::AlgorithmName":["Ripemd128Core","Ripemd160Core","Ripemd256Core","Ripemd320Core"],"digest::core_api::BlockSizeUser":["Ripemd128Core","Ripemd160Core","Ripemd256Core","Ripemd320Core"],"digest::core_api::BufferKindUser":["Ripemd128Core","Ripemd160Core","Ripemd256Core","Ripemd320Core"],"digest::core_api::FixedOutputCore":["Ripemd128Core","Ripemd160Core","Ripemd256Core","Ripemd320Core"],"digest::core_api::UpdateCore":["Ripemd128Core","Ripemd160Core","Ripemd256Core","Ripemd320Core"]},"type_to_def_path":{"Ripemd128Core":"Ripemd128Core","Ripemd160Core":"Ripemd160Core","Ripemd256Core":"Ripemd256Core","Ripemd320Core":"Ripemd320Core"}}