{"dependencies":{"<Tiger2Core as core::clone::Clone>::clone":["Tiger2Core"],"<Tiger2Core as core::default::Default>::default":["Tiger2Core"],"<Tiger2Core as core::fmt::Debug>::fmt":["Tiger2Core","core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Tiger2Core as digest::Reset>::reset":["Tiger2Core"],"<Tiger2Core as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<Tiger2Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["Tiger2Core","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero"],"<Tiger2Core as digest::core_api::UpdateCore>::update_blocks":["Tiger2Core","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"<TigerCore as core::clone::Clone>::clone":["TigerCore"],"<TigerCore as core::default::Default>::default":["TigerCore"],"<TigerCore as core::fmt::Debug>::fmt":["TigerCore","core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<TigerCore as digest::Reset>::reset":["TigerCore"],"<TigerCore as digest::core_api::AlgorithmName>::write_alg_name":["core::fmt::Formatter","core::marker::Sized","core::result::Result"],"<TigerCore as digest::core_api::FixedOutputCore>::finalize_fixed_core":["TigerCore","core::marker::Sized","digest::block_buffer::BlockBuffer","digest::block_buffer::BufferKind","digest::generic_array::ArrayLength","digest::generic_array::GenericArray","digest::typenum::IsLess","digest::typenum::NonZero"],"<TigerCore as digest::core_api::UpdateCore>::update_blocks":["TigerCore","core::marker::Sized","digest::generic_array::ArrayLength","digest::generic_array::GenericArray"],"Tiger2Core":["Tiger2Core"],"TigerCore":["TigerCore"],"compress::compress":[],"compress::key_schedule":[],"compress::pass":[],"compress::round":[]},"glob_path_import":{},"self_to_fn":{"Tiger2Core":["Clone","impl AlgorithmName for Tiger2Core {\n    fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"Tiger2\")\n    }\n}","impl BlockSizeUser for Tiger2Core {\n    type BlockSize = U64;\n}","impl BufferKindUser for Tiger2Core {\n    type BufferKind = Eager;\n}","impl Default for Tiger2Core {\n    fn default() -> Self {\n        Self {\n            block_len: 0,\n            state: [\n                0x0123_4567_89AB_CDEF,\n                0xFEDC_BA98_7654_3210,\n                0xF096_A5B4_C3B2_E187,\n            ],\n        }\n    }\n}","impl FixedOutputCore for Tiger2Core {\n    #[inline]\n    fn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n        let bs = Self::BlockSize::U64 as u64;\n        let pos = buffer.get_pos() as u64;\n        let bit_len = 8 * (pos + bs * self.block_len);\n\n        buffer.len64_padding_le(bit_len, |b| compress(&mut self.state, b.as_ref()));\n        for (chunk, v) in out.chunks_exact_mut(8).zip(self.state.iter()) {\n            chunk.copy_from_slice(&v.to_le_bytes());\n        }\n    }\n}","impl HashMarker for Tiger2Core {}","impl OutputSizeUser for Tiger2Core {\n    type OutputSize = U24;\n}","impl Reset for Tiger2Core {\n    #[inline]\n    fn reset(&mut self) {\n        *self = Default::default();\n    }\n}","impl UpdateCore for Tiger2Core {\n    #[inline]\n    fn update_blocks(&mut self, blocks: &[Block<Self>]) {\n        self.block_len += blocks.len() as u64;\n        for block in blocks {\n            compress(&mut self.state, block.as_ref());\n        }\n    }\n}","impl fmt::Debug for Tiger2Core {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"Tiger2Core { ... }\")\n    }\n}"],"TigerCore":["Clone","impl AlgorithmName for TigerCore {\n    fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"Tiger\")\n    }\n}","impl BlockSizeUser for TigerCore {\n    type BlockSize = U64;\n}","impl BufferKindUser for TigerCore {\n    type BufferKind = Eager;\n}","impl Default for TigerCore {\n    fn default() -> Self {\n        Self {\n            block_len: 0,\n            state: S0,\n        }\n    }\n}","impl FixedOutputCore for TigerCore {\n    #[inline]\n    fn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {\n        let bs = Self::BlockSize::U64 as u64;\n        let pos = buffer.get_pos() as u64;\n        let bit_len = 8 * (pos + bs * self.block_len);\n\n        buffer.digest_pad(1, &bit_len.to_le_bytes(), |b| {\n            compress(&mut self.state, b.as_ref())\n        });\n        for (chunk, v) in out.chunks_exact_mut(8).zip(self.state.iter()) {\n            chunk.copy_from_slice(&v.to_le_bytes());\n        }\n    }\n}","impl HashMarker for TigerCore {}","impl OutputSizeUser for TigerCore {\n    type OutputSize = U24;\n}","impl Reset for TigerCore {\n    fn reset(&mut self) {\n        *self = Default::default();\n    }\n}","impl UpdateCore for TigerCore {\n    #[inline]\n    fn update_blocks(&mut self, blocks: &[Block<Self>]) {\n        self.block_len += blocks.len() as u64;\n        for block in blocks {\n            compress(&mut self.state, block.as_ref());\n        }\n    }\n}","impl fmt::Debug for TigerCore {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.write_str(\"TigerCore { ... }\")\n    }\n}"]},"single_path_import":{"digest":"digest","digest::Digest":"Digest"},"srcs":{"<Tiger2Core as core::default::Default>::default":["fn default() -> Self{\n        Self {\n            block_len: 0,\n            state: [\n                0x0123_4567_89AB_CDEF,\n                0xFEDC_BA98_7654_3210,\n                0xF096_A5B4_C3B2_E187,\n            ],\n        }\n    }","Real(LocalPath(\"tiger/src/lib.rs\"))"],"<Tiger2Core as core::fmt::Debug>::fmt":["fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"Tiger2Core { ... }\")\n    }","Real(LocalPath(\"tiger/src/lib.rs\"))"],"<Tiger2Core as digest::Reset>::reset":["#[inline]\nfn reset(&mut self){\n        *self = Default::default();\n    }","Real(LocalPath(\"tiger/src/lib.rs\"))"],"<Tiger2Core as digest::core_api::AlgorithmName>::write_alg_name":["fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"Tiger2\")\n    }","Real(LocalPath(\"tiger/src/lib.rs\"))"],"<Tiger2Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["#[inline]\nfn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n        let bs = Self::BlockSize::U64 as u64;\n        let pos = buffer.get_pos() as u64;\n        let bit_len = 8 * (pos + bs * self.block_len);\n\n        buffer.len64_padding_le(bit_len, |b| compress(&mut self.state, b.as_ref()));\n        for (chunk, v) in out.chunks_exact_mut(8).zip(self.state.iter()) {\n            chunk.copy_from_slice(&v.to_le_bytes());\n        }\n    }","Real(LocalPath(\"tiger/src/lib.rs\"))"],"<Tiger2Core as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[Block<Self>]){\n        self.block_len += blocks.len() as u64;\n        for block in blocks {\n            compress(&mut self.state, block.as_ref());\n        }\n    }","Real(LocalPath(\"tiger/src/lib.rs\"))"],"<TigerCore as core::default::Default>::default":["fn default() -> Self{\n        Self {\n            block_len: 0,\n            state: S0,\n        }\n    }","Real(LocalPath(\"tiger/src/lib.rs\"))"],"<TigerCore as core::fmt::Debug>::fmt":["fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"TigerCore { ... }\")\n    }","Real(LocalPath(\"tiger/src/lib.rs\"))"],"<TigerCore as digest::Reset>::reset":["fn reset(&mut self){\n        *self = Default::default();\n    }","Real(LocalPath(\"tiger/src/lib.rs\"))"],"<TigerCore as digest::core_api::AlgorithmName>::write_alg_name":["fn write_alg_name(f: &mut fmt::Formatter<'_>) -> fmt::Result{\n        f.write_str(\"Tiger\")\n    }","Real(LocalPath(\"tiger/src/lib.rs\"))"],"<TigerCore as digest::core_api::FixedOutputCore>::finalize_fixed_core":["#[inline]\nfn finalize_fixed_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>){\n        let bs = Self::BlockSize::U64 as u64;\n        let pos = buffer.get_pos() as u64;\n        let bit_len = 8 * (pos + bs * self.block_len);\n\n        buffer.digest_pad(1, &bit_len.to_le_bytes(), |b| {\n            compress(&mut self.state, b.as_ref())\n        });\n        for (chunk, v) in out.chunks_exact_mut(8).zip(self.state.iter()) {\n            chunk.copy_from_slice(&v.to_le_bytes());\n        }\n    }","Real(LocalPath(\"tiger/src/lib.rs\"))"],"<TigerCore as digest::core_api::UpdateCore>::update_blocks":["#[inline]\nfn update_blocks(&mut self, blocks: &[Block<Self>]){\n        self.block_len += blocks.len() as u64;\n        for block in blocks {\n            compress(&mut self.state, block.as_ref());\n        }\n    }","Real(LocalPath(\"tiger/src/lib.rs\"))"],"Tiger2Core":["/// Core Tiger2 hasher state.\npub struct Tiger2Core {\n    block_len: u64,\n    state: State,\n}","Real(LocalPath(\"tiger/src/lib.rs\"))"],"TigerCore":["/// Core Tiger hasher state.\npub struct TigerCore {\n    block_len: u64,\n    state: State,\n}","Real(LocalPath(\"tiger/src/lib.rs\"))"],"compress::compress":["pub(crate) fn compress(state: &mut State, raw_block: &[u8; 64]){\n    let mut block: [u64; 8] = Default::default();\n    for (o, chunk) in block.iter_mut().zip(raw_block.chunks_exact(8)) {\n        *o = u64::from_le_bytes(chunk.try_into().unwrap());\n    }\n    let [mut a, mut b, mut c] = *state;\n\n    pass(&mut a, &mut b, &mut c, &block, 5);\n    key_schedule(&mut block);\n    pass(&mut c, &mut a, &mut b, &block, 7);\n    key_schedule(&mut block);\n    pass(&mut b, &mut c, &mut a, &block, 9);\n\n    state[0] ^= a;\n    state[1] = b.wrapping_sub(state[1]);\n    state[2] = c.wrapping_add(state[2]);\n}","Real(LocalPath(\"tiger/src/compress.rs\"))"],"compress::key_schedule":["#[inline(always)]\nfn key_schedule(x: &mut [u64; 8]){\n    x[0] = x[0].wrapping_sub(x[7] ^ 0xA5A5_A5A5_A5A5_A5A5);\n    x[1] ^= x[0];\n    x[2] = x[2].wrapping_add(x[1]);\n    x[3] = x[3].wrapping_sub(x[2] ^ ((!x[1]) << 19));\n    x[4] ^= x[3];\n    x[5] = x[5].wrapping_add(x[4]);\n    x[6] = x[6].wrapping_sub(x[5] ^ ((!x[4]) >> 23));\n    x[7] ^= x[6];\n    x[0] = x[0].wrapping_add(x[7]);\n    x[1] = x[1].wrapping_sub(x[0] ^ ((!x[7]) << 19));\n    x[2] ^= x[1];\n    x[3] = x[3].wrapping_add(x[2]);\n    x[4] = x[4].wrapping_sub(x[3] ^ ((!x[2]) >> 23));\n    x[5] ^= x[4];\n    x[6] = x[6].wrapping_add(x[5]);\n    x[7] = x[7].wrapping_sub(x[6] ^ 0x0123_4567_89AB_CDEF);\n}","Real(LocalPath(\"tiger/src/compress.rs\"))"],"compress::pass":["#[inline(always)]\nfn pass(a: &mut u64, b: &mut u64, c: &mut u64, x: &[u64; 8], mul: u8){\n    round(a, b, c, &x[0], mul);\n    round(b, c, a, &x[1], mul);\n    round(c, a, b, &x[2], mul);\n    round(a, b, c, &x[3], mul);\n    round(b, c, a, &x[4], mul);\n    round(c, a, b, &x[5], mul);\n    round(a, b, c, &x[6], mul);\n    round(b, c, a, &x[7], mul);\n}","Real(LocalPath(\"tiger/src/compress.rs\"))"],"compress::round":["#[inline(always)]\nfn round(a: &mut u64, b: &mut u64, c: &mut u64, x: &u64, mul: u8){\n    *c ^= *x;\n    let c2: [u8; 8] = c.to_le_bytes();\n    let a2 = T1[usize::from(c2[0])]\n        ^ T2[usize::from(c2[2])]\n        ^ T3[usize::from(c2[4])]\n        ^ T4[usize::from(c2[6])];\n    let b2 = T4[usize::from(c2[1])]\n        ^ T3[usize::from(c2[3])]\n        ^ T2[usize::from(c2[5])]\n        ^ T1[usize::from(c2[7])];\n    *a = a.wrapping_sub(a2);\n    *b = b.wrapping_add(b2).wrapping_mul(u64::from(mul));\n}","Real(LocalPath(\"tiger/src/compress.rs\"))"]},"struct_constructor":{"Tiger2Core":["clone","default"],"TigerCore":["clone","default"],"core::result::Result":["fmt","write_alg_name"]},"struct_to_trait":{"Tiger2Core":["core::clone::Clone","core::default::Default","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::Reset","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::FixedOutputCore","digest::core_api::UpdateCore"],"TigerCore":["core::clone::Clone","core::default::Default","core::fmt::Debug","digest::HashMarker","digest::OutputSizeUser","digest::Reset","digest::core_api::AlgorithmName","digest::core_api::BlockSizeUser","digest::core_api::BufferKindUser","digest::core_api::FixedOutputCore","digest::core_api::UpdateCore"]},"targets":{"<Tiger2Core as core::default::Default>::default":["default","Real(LocalPath(\"tiger/src/lib.rs\"))","core::default::Default"],"<Tiger2Core as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"tiger/src/lib.rs\"))","core::fmt::Debug"],"<Tiger2Core as digest::Reset>::reset":["reset","Real(LocalPath(\"tiger/src/lib.rs\"))","digest::Reset"],"<Tiger2Core as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"tiger/src/lib.rs\"))","digest::core_api::AlgorithmName"],"<Tiger2Core as digest::core_api::FixedOutputCore>::finalize_fixed_core":["finalize_fixed_core","Real(LocalPath(\"tiger/src/lib.rs\"))","digest::core_api::FixedOutputCore"],"<Tiger2Core as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"tiger/src/lib.rs\"))","digest::core_api::UpdateCore"],"<TigerCore as core::default::Default>::default":["default","Real(LocalPath(\"tiger/src/lib.rs\"))","core::default::Default"],"<TigerCore as core::fmt::Debug>::fmt":["fmt","Real(LocalPath(\"tiger/src/lib.rs\"))","core::fmt::Debug"],"<TigerCore as digest::Reset>::reset":["reset","Real(LocalPath(\"tiger/src/lib.rs\"))","digest::Reset"],"<TigerCore as digest::core_api::AlgorithmName>::write_alg_name":["write_alg_name","Real(LocalPath(\"tiger/src/lib.rs\"))","digest::core_api::AlgorithmName"],"<TigerCore as digest::core_api::FixedOutputCore>::finalize_fixed_core":["finalize_fixed_core","Real(LocalPath(\"tiger/src/lib.rs\"))","digest::core_api::FixedOutputCore"],"<TigerCore as digest::core_api::UpdateCore>::update_blocks":["update_blocks","Real(LocalPath(\"tiger/src/lib.rs\"))","digest::core_api::UpdateCore"],"compress::compress":["compress","Real(LocalPath(\"tiger/src/compress.rs\"))",""],"compress::key_schedule":["key_schedule","Real(LocalPath(\"tiger/src/compress.rs\"))",""],"compress::pass":["pass","Real(LocalPath(\"tiger/src/compress.rs\"))",""],"compress::round":["round","Real(LocalPath(\"tiger/src/compress.rs\"))",""]},"trait_to_struct":{"core::clone::Clone":["Tiger2Core","TigerCore"],"core::default::Default":["Tiger2Core","TigerCore"],"core::fmt::Debug":["Tiger2Core","TigerCore"],"digest::HashMarker":["Tiger2Core","TigerCore"],"digest::OutputSizeUser":["Tiger2Core","TigerCore"],"digest::Reset":["Tiger2Core","TigerCore"],"digest::core_api::AlgorithmName":["Tiger2Core","TigerCore"],"digest::core_api::BlockSizeUser":["Tiger2Core","TigerCore"],"digest::core_api::BufferKindUser":["Tiger2Core","TigerCore"],"digest::core_api::FixedOutputCore":["Tiger2Core","TigerCore"],"digest::core_api::UpdateCore":["Tiger2Core","TigerCore"]},"type_to_def_path":{"Tiger2Core":"Tiger2Core","TigerCore":"TigerCore"}}