{
    "dependencies": {
        "<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::Elem as std::clone::Clone>::clone": [
            "color::Elem"
        ],
        "<color::Elem as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "color::Elem"
        ],
        "<color::Elem as std::cmp::PartialEq>::eq": [
            "color::Elem"
        ],
        "<color::Elem as std::fmt::Debug>::fmt": [
            "color::Elem",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::Elem as std::hash::Hash>::hash": [
            "color::Elem",
            "std::hash::Hasher",
            "std::marker::Sized"
        ],
        "<color::theme::Date as std::cmp::PartialEq>::eq": [
            "color::theme::Date",
            "crossterm::style::Color"
        ],
        "<color::theme::Date as std::default::Default>::default": [
            "color::theme::Date",
            "crossterm::style::Color"
        ],
        "<color::theme::Date as std::fmt::Debug>::fmt": [
            "color::theme::Date",
            "crossterm::style::Color",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::Dir as std::cmp::PartialEq>::eq": [
            "color::theme::Dir",
            "crossterm::style::Color"
        ],
        "<color::theme::Dir as std::default::Default>::default": [
            "color::theme::Dir",
            "crossterm::style::Color"
        ],
        "<color::theme::Dir as std::fmt::Debug>::fmt": [
            "color::theme::Dir",
            "crossterm::style::Color",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::File as std::cmp::PartialEq>::eq": [
            "color::theme::File",
            "crossterm::style::Color"
        ],
        "<color::theme::File as std::default::Default>::default": [
            "color::theme::File",
            "crossterm::style::Color"
        ],
        "<color::theme::File as std::fmt::Debug>::fmt": [
            "color::theme::File",
            "crossterm::style::Color",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::FileType as std::cmp::PartialEq>::eq": [
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::Symlink",
            "crossterm::style::Color"
        ],
        "<color::theme::FileType as std::default::Default>::default": [
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::Symlink",
            "crossterm::style::Color"
        ],
        "<color::theme::FileType as std::fmt::Debug>::fmt": [
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::Symlink",
            "crossterm::style::Color",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::INode as std::cmp::PartialEq>::eq": [
            "color::theme::INode",
            "crossterm::style::Color"
        ],
        "<color::theme::INode as std::default::Default>::default": [
            "color::theme::INode",
            "crossterm::style::Color"
        ],
        "<color::theme::INode as std::fmt::Debug>::fmt": [
            "color::theme::INode",
            "crossterm::style::Color",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::Links as std::cmp::PartialEq>::eq": [
            "color::theme::Links",
            "crossterm::style::Color"
        ],
        "<color::theme::Links as std::default::Default>::default": [
            "color::theme::Links",
            "crossterm::style::Color"
        ],
        "<color::theme::Links as std::fmt::Debug>::fmt": [
            "color::theme::Links",
            "crossterm::style::Color",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::Permission as std::cmp::PartialEq>::eq": [
            "color::theme::Permission",
            "crossterm::style::Color"
        ],
        "<color::theme::Permission as std::default::Default>::default": [
            "color::theme::Permission",
            "crossterm::style::Color"
        ],
        "<color::theme::Permission as std::fmt::Debug>::fmt": [
            "color::theme::Permission",
            "crossterm::style::Color",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::Size as std::cmp::PartialEq>::eq": [
            "color::theme::Size",
            "crossterm::style::Color"
        ],
        "<color::theme::Size as std::default::Default>::default": [
            "color::theme::Size",
            "crossterm::style::Color"
        ],
        "<color::theme::Size as std::fmt::Debug>::fmt": [
            "color::theme::Size",
            "crossterm::style::Color",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::Symlink as std::cmp::PartialEq>::eq": [
            "color::theme::Symlink",
            "crossterm::style::Color"
        ],
        "<color::theme::Symlink as std::default::Default>::default": [
            "color::theme::Symlink",
            "crossterm::style::Color"
        ],
        "<color::theme::Symlink as std::fmt::Debug>::fmt": [
            "color::theme::Symlink",
            "crossterm::style::Color",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::Theme as std::cmp::PartialEq>::eq": [
            "color::theme::Date",
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::INode",
            "color::theme::Links",
            "color::theme::Permission",
            "color::theme::Size",
            "color::theme::Symlink",
            "color::theme::Theme",
            "crossterm::style::Color"
        ],
        "<color::theme::Theme as std::default::Default>::default": [
            "color::theme::Date",
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::INode",
            "color::theme::Links",
            "color::theme::Permission",
            "color::theme::Size",
            "color::theme::Symlink",
            "color::theme::Theme",
            "crossterm::style::Color"
        ],
        "<color::theme::Theme as std::fmt::Debug>::fmt": [
            "color::theme::Date",
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::INode",
            "color::theme::Links",
            "color::theme::Permission",
            "color::theme::Size",
            "color::theme::Symlink",
            "color::theme::Theme",
            "crossterm::style::Color",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::Color as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "config_file::Color",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<config_file::Color as std::cmp::PartialEq>::eq": [
            "config_file::Color",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<config_file::Color as std::fmt::Debug>::fmt": [
            "config_file::Color",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "<config_file::Config as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<config_file::Config as std::cmp::PartialEq>::eq": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<config_file::Config as std::default::Default>::default": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<config_file::Config as std::fmt::Debug>::fmt": [
            "config_file::Config",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "<config_file::Icons as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "config_file::Icons",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<config_file::Icons as std::cmp::PartialEq>::eq": [
            "config_file::Icons",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<config_file::Icons as std::fmt::Debug>::fmt": [
            "config_file::Icons",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "<config_file::Recursion as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "config_file::Recursion",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<config_file::Recursion as std::cmp::PartialEq>::eq": [
            "config_file::Recursion",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<config_file::Recursion as std::fmt::Debug>::fmt": [
            "config_file::Recursion",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "<config_file::Sorting as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "config_file::Sorting",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<config_file::Sorting as std::cmp::PartialEq>::eq": [
            "config_file::Sorting",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<config_file::Sorting as std::fmt::Debug>::fmt": [
            "config_file::Sorting",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor",
            "config_file::_::_serde::de::Error",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor",
            "config_file::_::_serde::de::MapAccess",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor",
            "config_file::_::_serde::de::SeqAccess",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::Flags as std::clone::Clone>::clone": [
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::string::String",
            "std::vec::Vec"
        ],
        "<flags::Flags as std::default::Default>::default": [
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::string::String",
            "std::vec::Vec"
        ],
        "<flags::Flags as std::fmt::Debug>::fmt": [
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "std::alloc::Allocator",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result",
            "std::string::String",
            "std::vec::Vec"
        ],
        "<flags::blocks::Block as std::clone::Clone>::clone": [
            "flags::blocks::Block"
        ],
        "<flags::blocks::Block as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::blocks::Block"
        ],
        "<flags::blocks::Block as std::cmp::Ord>::cmp": [
            "flags::blocks::Block",
            "std::cmp::Ordering"
        ],
        "<flags::blocks::Block as std::cmp::PartialEq>::eq": [
            "flags::blocks::Block"
        ],
        "<flags::blocks::Block as std::cmp::PartialOrd>::partial_cmp": [
            "flags::blocks::Block",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::blocks::Block as std::convert::TryFrom<&str>>::try_from": [
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::blocks::Block as std::fmt::Debug>::fmt": [
            "flags::blocks::Block",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::blocks::Block as std::hash::Hash>::hash": [
            "flags::blocks::Block",
            "std::hash::Hasher",
            "std::marker::Sized"
        ],
        "<flags::blocks::Blocks as std::clone::Clone>::clone": [
            "flags::blocks::Blocks",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::vec::Vec"
        ],
        "<flags::blocks::Blocks as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::blocks::Blocks",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::vec::Vec"
        ],
        "<flags::blocks::Blocks as std::cmp::PartialEq>::eq": [
            "flags::blocks::Blocks",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::vec::Vec"
        ],
        "<flags::blocks::Blocks as std::default::Default>::default": [
            "flags::blocks::Blocks",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::vec::Vec"
        ],
        "<flags::blocks::Blocks as std::fmt::Debug>::fmt": [
            "flags::blocks::Blocks",
            "std::alloc::Allocator",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result",
            "std::vec::Vec"
        ],
        "<flags::color::Color as std::clone::Clone>::clone": [
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "std::string::String"
        ],
        "<flags::color::Color as std::default::Default>::default": [
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "std::string::String"
        ],
        "<flags::color::Color as std::fmt::Debug>::fmt": [
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result",
            "std::string::String"
        ],
        "<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_environment": [
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::color::ColorOption as std::clone::Clone>::clone": [
            "flags::color::ColorOption"
        ],
        "<flags::color::ColorOption as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::color::ColorOption"
        ],
        "<flags::color::ColorOption as std::cmp::PartialEq>::eq": [
            "flags::color::ColorOption"
        ],
        "<flags::color::ColorOption as std::default::Default>::default": [
            "flags::color::ColorOption"
        ],
        "<flags::color::ColorOption as std::fmt::Debug>::fmt": [
            "flags::color::ColorOption",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor": [
            "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor"
        ],
        "<flags::color::ThemeOption as std::clone::Clone>::clone": [
            "flags::color::ThemeOption",
            "std::string::String"
        ],
        "<flags::color::ThemeOption as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::color::ThemeOption",
            "std::string::String"
        ],
        "<flags::color::ThemeOption as std::cmp::PartialEq>::eq": [
            "flags::color::ThemeOption",
            "std::string::String"
        ],
        "<flags::color::ThemeOption as std::default::Default>::default": [
            "flags::color::ThemeOption",
            "std::string::String"
        ],
        "<flags::color::ThemeOption as std::fmt::Debug>::fmt": [
            "flags::color::ThemeOption",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result",
            "std::string::String"
        ],
        "<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::_serde::de::Error",
            "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::_serde::de::Error",
            "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::_serde::de::Error",
            "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum": [
            "config_file::_::_serde::de::EnumAccess",
            "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_environment": [
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::date::DateFlag as std::clone::Clone>::clone": [
            "flags::date::DateFlag",
            "std::string::String"
        ],
        "<flags::date::DateFlag as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::date::DateFlag",
            "std::string::String"
        ],
        "<flags::date::DateFlag as std::cmp::PartialEq>::eq": [
            "flags::date::DateFlag",
            "std::string::String"
        ],
        "<flags::date::DateFlag as std::default::Default>::default": [
            "flags::date::DateFlag",
            "std::string::String"
        ],
        "<flags::date::DateFlag as std::fmt::Debug>::fmt": [
            "flags::date::DateFlag",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result",
            "std::string::String"
        ],
        "<flags::dereference::Dereference as flags::Configurable<flags::dereference::Dereference>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::dereference::Dereference as flags::Configurable<flags::dereference::Dereference>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::dereference::Dereference as std::clone::Clone>::clone": [
            "flags::dereference::Dereference"
        ],
        "<flags::dereference::Dereference as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::dereference::Dereference"
        ],
        "<flags::dereference::Dereference as std::cmp::PartialEq>::eq": [
            "flags::dereference::Dereference"
        ],
        "<flags::dereference::Dereference as std::default::Default>::default": [
            "flags::dereference::Dereference"
        ],
        "<flags::dereference::Dereference as std::fmt::Debug>::fmt": [
            "flags::dereference::Dereference",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::display::Display as flags::Configurable<flags::display::Display>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::display::Display as flags::Configurable<flags::display::Display>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::display::Display as std::clone::Clone>::clone": [
            "flags::display::Display"
        ],
        "<flags::display::Display as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::display::Display"
        ],
        "<flags::display::Display as std::cmp::PartialEq>::eq": [
            "flags::display::Display"
        ],
        "<flags::display::Display as std::default::Default>::default": [
            "flags::display::Display"
        ],
        "<flags::display::Display as std::fmt::Debug>::fmt": [
            "flags::display::Display",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::_serde::de::Error",
            "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::_serde::de::Error",
            "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::_serde::de::Error",
            "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum": [
            "config_file::_::_serde::de::EnumAccess",
            "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::hyperlink::HyperlinkOption as flags::Configurable<flags::hyperlink::HyperlinkOption>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::hyperlink::HyperlinkOption as flags::Configurable<flags::hyperlink::HyperlinkOption>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::hyperlink::HyperlinkOption as std::clone::Clone>::clone": [
            "flags::hyperlink::HyperlinkOption"
        ],
        "<flags::hyperlink::HyperlinkOption as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::hyperlink::HyperlinkOption"
        ],
        "<flags::hyperlink::HyperlinkOption as std::cmp::PartialEq>::eq": [
            "flags::hyperlink::HyperlinkOption"
        ],
        "<flags::hyperlink::HyperlinkOption as std::default::Default>::default": [
            "flags::hyperlink::HyperlinkOption"
        ],
        "<flags::hyperlink::HyperlinkOption as std::fmt::Debug>::fmt": [
            "flags::hyperlink::HyperlinkOption",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::_serde::de::Error",
            "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::_serde::de::Error",
            "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::_serde::de::Error",
            "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum": [
            "config_file::_::_serde::de::EnumAccess",
            "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::IconOption as flags::Configurable<flags::icons::IconOption>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::icons::IconOption as flags::Configurable<flags::icons::IconOption>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::icons::IconOption as std::clone::Clone>::clone": [
            "flags::icons::IconOption"
        ],
        "<flags::icons::IconOption as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::icons::IconOption"
        ],
        "<flags::icons::IconOption as std::cmp::PartialEq>::eq": [
            "flags::icons::IconOption"
        ],
        "<flags::icons::IconOption as std::default::Default>::default": [
            "flags::icons::IconOption"
        ],
        "<flags::icons::IconOption as std::fmt::Debug>::fmt": [
            "flags::icons::IconOption",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::IconSeparator as flags::Configurable<flags::icons::IconSeparator>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::icons::IconSeparator as flags::Configurable<flags::icons::IconSeparator>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::icons::IconSeparator as std::clone::Clone>::clone": [
            "flags::icons::IconSeparator",
            "std::string::String"
        ],
        "<flags::icons::IconSeparator as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::icons::IconSeparator",
            "std::string::String"
        ],
        "<flags::icons::IconSeparator as std::cmp::PartialEq>::eq": [
            "flags::icons::IconSeparator",
            "std::string::String"
        ],
        "<flags::icons::IconSeparator as std::default::Default>::default": [
            "flags::icons::IconSeparator",
            "std::string::String"
        ],
        "<flags::icons::IconSeparator as std::fmt::Debug>::fmt": [
            "flags::icons::IconSeparator",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result",
            "std::string::String"
        ],
        "<flags::icons::IconTheme as flags::Configurable<flags::icons::IconTheme>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::icons::IconTheme as flags::Configurable<flags::icons::IconTheme>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::icons::IconTheme as std::clone::Clone>::clone": [
            "flags::icons::IconTheme"
        ],
        "<flags::icons::IconTheme as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::icons::IconTheme"
        ],
        "<flags::icons::IconTheme as std::cmp::PartialEq>::eq": [
            "flags::icons::IconTheme"
        ],
        "<flags::icons::IconTheme as std::default::Default>::default": [
            "flags::icons::IconTheme"
        ],
        "<flags::icons::IconTheme as std::fmt::Debug>::fmt": [
            "flags::icons::IconTheme",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::Icons as std::clone::Clone>::clone": [
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "std::string::String"
        ],
        "<flags::icons::Icons as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "std::string::String"
        ],
        "<flags::icons::Icons as std::cmp::PartialEq>::eq": [
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "std::string::String"
        ],
        "<flags::icons::Icons as std::default::Default>::default": [
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "std::string::String"
        ],
        "<flags::icons::Icons as std::fmt::Debug>::fmt": [
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result",
            "std::string::String"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::_serde::de::Error",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::_serde::de::Error",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::_serde::de::Error",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum": [
            "config_file::_::_serde::de::EnumAccess",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_newtype_struct": [
            "config_file::_::_serde::Deserializer",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq": [
            "config_file::_::_serde::de::SeqAccess",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::_serde::de::Error",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::_serde::de::Error",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::_serde::de::Error",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum": [
            "config_file::_::_serde::de::EnumAccess",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::ignore_globs::IgnoreGlobs as std::clone::Clone>::clone": [
            "flags::ignore_globs::IgnoreGlobs",
            "globset::GlobSet"
        ],
        "<flags::ignore_globs::IgnoreGlobs as std::default::Default>::default": [
            "flags::ignore_globs::IgnoreGlobs",
            "globset::GlobSet"
        ],
        "<flags::ignore_globs::IgnoreGlobs as std::fmt::Debug>::fmt": [
            "flags::ignore_globs::IgnoreGlobs",
            "globset::GlobSet",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::indicators::Indicators as flags::Configurable<flags::indicators::Indicators>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::indicators::Indicators as flags::Configurable<flags::indicators::Indicators>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::indicators::Indicators as std::clone::Clone>::clone": [
            "flags::indicators::Indicators"
        ],
        "<flags::indicators::Indicators as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::indicators::Indicators"
        ],
        "<flags::indicators::Indicators as std::cmp::PartialEq>::eq": [
            "flags::indicators::Indicators"
        ],
        "<flags::indicators::Indicators as std::default::Default>::default": [
            "flags::indicators::Indicators"
        ],
        "<flags::indicators::Indicators as std::fmt::Debug>::fmt": [
            "flags::indicators::Indicators",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::layout::Layout as flags::Configurable<flags::layout::Layout>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::layout::Layout as flags::Configurable<flags::layout::Layout>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::layout::Layout as std::clone::Clone>::clone": [
            "flags::layout::Layout"
        ],
        "<flags::layout::Layout as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::layout::Layout"
        ],
        "<flags::layout::Layout as std::cmp::PartialEq>::eq": [
            "flags::layout::Layout"
        ],
        "<flags::layout::Layout as std::default::Default>::default": [
            "flags::layout::Layout"
        ],
        "<flags::layout::Layout as std::fmt::Debug>::fmt": [
            "flags::layout::Layout",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::_serde::de::Error",
            "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::_serde::de::Error",
            "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::_serde::de::Error",
            "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum": [
            "config_file::_::_serde::de::EnumAccess",
            "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::permission::PermissionFlag as flags::Configurable<flags::permission::PermissionFlag>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::permission::PermissionFlag as flags::Configurable<flags::permission::PermissionFlag>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::permission::PermissionFlag as std::clone::Clone>::clone": [
            "flags::permission::PermissionFlag"
        ],
        "<flags::permission::PermissionFlag as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::permission::PermissionFlag"
        ],
        "<flags::permission::PermissionFlag as std::cmp::PartialEq>::eq": [
            "flags::permission::PermissionFlag"
        ],
        "<flags::permission::PermissionFlag as std::default::Default>::default": [
            "flags::permission::PermissionFlag"
        ],
        "<flags::permission::PermissionFlag as std::fmt::Debug>::fmt": [
            "flags::permission::PermissionFlag",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::_serde::de::Error",
            "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::_serde::de::Error",
            "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::_serde::de::Error",
            "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum": [
            "config_file::_::_serde::de::EnumAccess",
            "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::recursion::Recursion as std::clone::Clone>::clone": [
            "flags::recursion::Recursion"
        ],
        "<flags::recursion::Recursion as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::recursion::Recursion"
        ],
        "<flags::recursion::Recursion as std::cmp::PartialEq>::eq": [
            "flags::recursion::Recursion"
        ],
        "<flags::recursion::Recursion as std::default::Default>::default": [
            "flags::recursion::Recursion"
        ],
        "<flags::recursion::Recursion as std::fmt::Debug>::fmt": [
            "flags::recursion::Recursion",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::size::SizeFlag as flags::Configurable<flags::size::SizeFlag>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::size::SizeFlag as flags::Configurable<flags::size::SizeFlag>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::size::SizeFlag as std::clone::Clone>::clone": [
            "flags::size::SizeFlag"
        ],
        "<flags::size::SizeFlag as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::size::SizeFlag"
        ],
        "<flags::size::SizeFlag as std::cmp::PartialEq>::eq": [
            "flags::size::SizeFlag"
        ],
        "<flags::size::SizeFlag as std::default::Default>::default": [
            "flags::size::SizeFlag"
        ],
        "<flags::size::SizeFlag as std::fmt::Debug>::fmt": [
            "flags::size::SizeFlag",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::_serde::de::Error",
            "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::_serde::de::Error",
            "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::_serde::de::Error",
            "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum": [
            "config_file::_::_serde::de::EnumAccess",
            "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::DirGrouping as flags::Configurable<flags::sorting::DirGrouping>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::sorting::DirGrouping as flags::Configurable<flags::sorting::DirGrouping>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::sorting::DirGrouping as std::clone::Clone>::clone": [
            "flags::sorting::DirGrouping"
        ],
        "<flags::sorting::DirGrouping as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::sorting::DirGrouping"
        ],
        "<flags::sorting::DirGrouping as std::cmp::PartialEq>::eq": [
            "flags::sorting::DirGrouping"
        ],
        "<flags::sorting::DirGrouping as std::default::Default>::default": [
            "flags::sorting::DirGrouping"
        ],
        "<flags::sorting::DirGrouping as std::fmt::Debug>::fmt": [
            "flags::sorting::DirGrouping",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::SortColumn as flags::Configurable<flags::sorting::SortColumn>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::sorting::SortColumn as flags::Configurable<flags::sorting::SortColumn>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::sorting::SortColumn as std::clone::Clone>::clone": [
            "flags::sorting::SortColumn"
        ],
        "<flags::sorting::SortColumn as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::sorting::SortColumn"
        ],
        "<flags::sorting::SortColumn as std::cmp::PartialEq>::eq": [
            "flags::sorting::SortColumn"
        ],
        "<flags::sorting::SortColumn as std::default::Default>::default": [
            "flags::sorting::SortColumn"
        ],
        "<flags::sorting::SortColumn as std::fmt::Debug>::fmt": [
            "flags::sorting::SortColumn",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::SortOrder as flags::Configurable<flags::sorting::SortOrder>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::sorting::SortOrder as flags::Configurable<flags::sorting::SortOrder>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::sorting::SortOrder as std::clone::Clone>::clone": [
            "flags::sorting::SortOrder"
        ],
        "<flags::sorting::SortOrder as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::sorting::SortOrder"
        ],
        "<flags::sorting::SortOrder as std::cmp::PartialEq>::eq": [
            "flags::sorting::SortOrder"
        ],
        "<flags::sorting::SortOrder as std::default::Default>::default": [
            "flags::sorting::SortOrder"
        ],
        "<flags::sorting::SortOrder as std::fmt::Debug>::fmt": [
            "flags::sorting::SortOrder",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::Sorting as std::clone::Clone>::clone": [
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting"
        ],
        "<flags::sorting::Sorting as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting"
        ],
        "<flags::sorting::Sorting as std::cmp::PartialEq>::eq": [
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting"
        ],
        "<flags::sorting::Sorting as std::default::Default>::default": [
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting"
        ],
        "<flags::sorting::Sorting as std::fmt::Debug>::fmt": [
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::_serde::de::Error",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::_serde::de::Error",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::_serde::de::Error",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum": [
            "config_file::_::_serde::de::EnumAccess",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes": [
            "config_file::_::_serde::de::Error",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "config_file::_::_serde::de::Error",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64": [
            "config_file::_::_serde::de::Error",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor",
            "std::fmt::Formatter",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum": [
            "config_file::_::_serde::de::EnumAccess",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor",
            "std::marker::PhantomData",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::symlink_arrow::SymlinkArrow as flags::Configurable<flags::symlink_arrow::SymlinkArrow>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::symlink_arrow::SymlinkArrow as flags::Configurable<flags::symlink_arrow::SymlinkArrow>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::symlink_arrow::SymlinkArrow as std::clone::Clone>::clone": [
            "flags::symlink_arrow::SymlinkArrow",
            "std::string::String"
        ],
        "<flags::symlink_arrow::SymlinkArrow as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::symlink_arrow::SymlinkArrow",
            "std::string::String"
        ],
        "<flags::symlink_arrow::SymlinkArrow as std::cmp::PartialEq>::eq": [
            "flags::symlink_arrow::SymlinkArrow",
            "std::string::String"
        ],
        "<flags::symlink_arrow::SymlinkArrow as std::default::Default>::default": [
            "flags::symlink_arrow::SymlinkArrow",
            "std::string::String"
        ],
        "<flags::symlink_arrow::SymlinkArrow as std::fmt::Debug>::fmt": [
            "flags::symlink_arrow::SymlinkArrow",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result",
            "std::string::String"
        ],
        "<flags::symlink_arrow::SymlinkArrow as std::fmt::Display>::fmt": [
            "flags::symlink_arrow::SymlinkArrow",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result",
            "std::string::String"
        ],
        "<flags::symlinks::NoSymlink as flags::Configurable<flags::symlinks::NoSymlink>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::symlinks::NoSymlink as flags::Configurable<flags::symlinks::NoSymlink>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::symlinks::NoSymlink as std::clone::Clone>::clone": [
            "flags::symlinks::NoSymlink"
        ],
        "<flags::symlinks::NoSymlink as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::symlinks::NoSymlink"
        ],
        "<flags::symlinks::NoSymlink as std::cmp::PartialEq>::eq": [
            "flags::symlinks::NoSymlink"
        ],
        "<flags::symlinks::NoSymlink as std::default::Default>::default": [
            "flags::symlinks::NoSymlink"
        ],
        "<flags::symlinks::NoSymlink as std::fmt::Debug>::fmt": [
            "flags::symlinks::NoSymlink",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<flags::total_size::TotalSize as flags::Configurable<flags::total_size::TotalSize>>::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::total_size::TotalSize as flags::Configurable<flags::total_size::TotalSize>>::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<flags::total_size::TotalSize as std::clone::Clone>::clone": [
            "flags::total_size::TotalSize"
        ],
        "<flags::total_size::TotalSize as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "flags::total_size::TotalSize"
        ],
        "<flags::total_size::TotalSize as std::cmp::PartialEq>::eq": [
            "flags::total_size::TotalSize"
        ],
        "<flags::total_size::TotalSize as std::default::Default>::default": [
            "flags::total_size::TotalSize"
        ],
        "<flags::total_size::TotalSize as std::fmt::Debug>::fmt": [
            "flags::total_size::TotalSize",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<icon::Theme as std::clone::Clone>::clone": [
            "icon::Theme"
        ],
        "<icon::Theme as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "icon::Theme"
        ],
        "<icon::Theme as std::cmp::PartialEq>::eq": [
            "icon::Theme"
        ],
        "<icon::Theme as std::fmt::Debug>::fmt": [
            "icon::Theme",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<meta::Meta as std::clone::Clone>::clone": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "<meta::Meta as std::fmt::Debug>::fmt": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::result::Result",
            "std::string::String"
        ],
        "<meta::access_control::AccessControl as std::clone::Clone>::clone": [
            "meta::access_control::AccessControl",
            "std::string::String"
        ],
        "<meta::access_control::AccessControl as std::fmt::Debug>::fmt": [
            "meta::access_control::AccessControl",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result",
            "std::string::String"
        ],
        "<meta::date::Date as std::clone::Clone>::clone": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::date::Date",
            "std::marker::Sized"
        ],
        "<meta::date::Date as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::date::Date",
            "std::marker::Sized"
        ],
        "<meta::date::Date as std::cmp::Ord>::cmp": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::date::Date",
            "std::cmp::Ordering",
            "std::marker::Sized"
        ],
        "<meta::date::Date as std::cmp::PartialEq>::eq": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::date::Date",
            "std::marker::Sized"
        ],
        "<meta::date::Date as std::cmp::PartialOrd>::partial_cmp": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::date::Date",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<meta::date::Date as std::convert::From<&'a std::fs::Metadata>>::from": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::date::Date",
            "std::fs::Metadata",
            "std::marker::Sized"
        ],
        "<meta::date::Date as std::convert::From<std::time::SystemTime>>::from": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::date::Date",
            "std::marker::Sized",
            "std::time::SystemTime"
        ],
        "<meta::date::Date as std::fmt::Debug>::fmt": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::date::Date",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<meta::filetype::FileType as std::clone::Clone>::clone": [
            "meta::filetype::FileType"
        ],
        "<meta::filetype::FileType as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "meta::filetype::FileType"
        ],
        "<meta::filetype::FileType as std::cmp::PartialEq>::eq": [
            "meta::filetype::FileType"
        ],
        "<meta::filetype::FileType as std::fmt::Debug>::fmt": [
            "meta::filetype::FileType",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<meta::indicator::Indicator as std::clone::Clone>::clone": [
            "meta::indicator::Indicator"
        ],
        "<meta::indicator::Indicator as std::convert::From<meta::filetype::FileType>>::from": [
            "meta::filetype::FileType",
            "meta::indicator::Indicator"
        ],
        "<meta::indicator::Indicator as std::fmt::Debug>::fmt": [
            "meta::indicator::Indicator",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<meta::inode::INode as std::clone::Clone>::clone": [
            "meta::inode::INode",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<meta::inode::INode as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "meta::inode::INode",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<meta::inode::INode as std::cmp::PartialEq>::eq": [
            "meta::inode::INode",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<meta::inode::INode as std::convert::From<&'a std::fs::Metadata>>::from": [
            "meta::inode::INode",
            "std::fs::Metadata",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<meta::inode::INode as std::fmt::Debug>::fmt": [
            "meta::inode::INode",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "<meta::links::Links as std::clone::Clone>::clone": [
            "meta::links::Links",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<meta::links::Links as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "meta::links::Links",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<meta::links::Links as std::cmp::PartialEq>::eq": [
            "meta::links::Links",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<meta::links::Links as std::convert::From<&'a std::fs::Metadata>>::from": [
            "meta::links::Links",
            "std::fs::Metadata",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<meta::links::Links as std::fmt::Debug>::fmt": [
            "meta::links::Links",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "<meta::name::DisplayOption<'a> as std::fmt::Debug>::fmt": [
            "meta::name::DisplayOption",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::path::Path",
            "std::result::Result"
        ],
        "<meta::name::Name as std::clone::Clone>::clone": [
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "<meta::name::Name as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "<meta::name::Name as std::cmp::Ord>::cmp": [
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::cmp::Ordering",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "<meta::name::Name as std::cmp::PartialEq>::eq": [
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "<meta::name::Name as std::cmp::PartialOrd>::partial_cmp": [
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "<meta::name::Name as std::fmt::Debug>::fmt": [
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::result::Result",
            "std::string::String"
        ],
        "<meta::owner::Owner as std::clone::Clone>::clone": [
            "meta::owner::Owner",
            "std::string::String"
        ],
        "<meta::owner::Owner as std::convert::From<&'a std::fs::Metadata>>::from": [
            "meta::owner::Owner",
            "std::fs::Metadata",
            "std::string::String"
        ],
        "<meta::owner::Owner as std::fmt::Debug>::fmt": [
            "meta::owner::Owner",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result",
            "std::string::String"
        ],
        "<meta::permissions::Permissions as std::clone::Clone>::clone": [
            "meta::permissions::Permissions"
        ],
        "<meta::permissions::Permissions as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "meta::permissions::Permissions"
        ],
        "<meta::permissions::Permissions as std::cmp::PartialEq>::eq": [
            "meta::permissions::Permissions"
        ],
        "<meta::permissions::Permissions as std::convert::From<&'a std::fs::Metadata>>::from": [
            "meta::permissions::Permissions",
            "std::fs::Metadata"
        ],
        "<meta::permissions::Permissions as std::fmt::Debug>::fmt": [
            "meta::permissions::Permissions",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<meta::size::Size as std::clone::Clone>::clone": [
            "meta::size::Size"
        ],
        "<meta::size::Size as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "meta::size::Size"
        ],
        "<meta::size::Size as std::cmp::PartialEq>::eq": [
            "meta::size::Size"
        ],
        "<meta::size::Size as std::convert::From<&'a std::fs::Metadata>>::from": [
            "meta::size::Size",
            "std::fs::Metadata"
        ],
        "<meta::size::Size as std::fmt::Debug>::fmt": [
            "meta::size::Size",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<meta::size::Unit as std::clone::Clone>::clone": [
            "meta::size::Unit"
        ],
        "<meta::size::Unit as std::cmp::Eq>::assert_receiver_is_total_eq": [
            "meta::size::Unit"
        ],
        "<meta::size::Unit as std::cmp::PartialEq>::eq": [
            "meta::size::Unit"
        ],
        "<meta::size::Unit as std::fmt::Debug>::fmt": [
            "meta::size::Unit",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "<meta::symlink::SymLink as std::clone::Clone>::clone": [
            "meta::symlink::SymLink",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "<meta::symlink::SymLink as std::convert::From<&'a std::path::Path>>::from": [
            "meta::symlink::SymLink",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::Path"
        ],
        "<meta::symlink::SymLink as std::fmt::Debug>::fmt": [
            "meta::symlink::SymLink",
            "std::fmt::Formatter",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "app::build": [
            "clap::App"
        ],
        "app::validate_date_argument": [
            "std::marker::Sized",
            "std::result::Result",
            "std::string::String"
        ],
        "app::validate_time_format": [
            "std::marker::Sized",
            "std::result::Result"
        ],
        "color::Colors": [
            "color::Colors",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "color::Colors::colorize": [
            "color::Colors",
            "color::Elem",
            "crossterm::style::StyledContent",
            "flags::symlink_arrow::SymlinkArrow",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "color::Colors::colorize_using_path": [
            "color::Colors",
            "color::Elem",
            "crossterm::style::StyledContent",
            "flags::symlink_arrow::SymlinkArrow",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::Path",
            "std::string::String"
        ],
        "color::Colors::default_style": [
            "crossterm::style::ContentStyle"
        ],
        "color::Colors::get_indicator_from_elem": [
            "color::Colors",
            "color::Elem",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "color::Colors::new": [
            "color::Colors",
            "flags::color::ThemeOption",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "color::Colors::style": [
            "color::Colors",
            "color::Elem",
            "crossterm::style::ContentStyle",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "color::Colors::style_default": [
            "color::Colors",
            "color::Elem",
            "crossterm::style::ContentStyle",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "color::Colors::style_from_path": [
            "color::Colors",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::Path"
        ],
        "color::Elem": [
            "color::Elem"
        ],
        "color::Elem::get_color": [
            "color::Elem",
            "color::theme::Date",
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::INode",
            "color::theme::Links",
            "color::theme::Permission",
            "color::theme::Size",
            "color::theme::Symlink",
            "color::theme::Theme",
            "crossterm::style::Color"
        ],
        "color::Elem::has_suid": [
            "color::Elem"
        ],
        "color::theme::Date": [
            "color::theme::Date",
            "crossterm::style::Color"
        ],
        "color::theme::Dir": [
            "color::theme::Dir",
            "crossterm::style::Color"
        ],
        "color::theme::File": [
            "color::theme::File",
            "crossterm::style::Color"
        ],
        "color::theme::FileType": [
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::Symlink",
            "crossterm::style::Color"
        ],
        "color::theme::INode": [
            "color::theme::INode",
            "crossterm::style::Color"
        ],
        "color::theme::Links": [
            "color::theme::Links",
            "crossterm::style::Color"
        ],
        "color::theme::Permission": [
            "color::theme::Permission",
            "crossterm::style::Color"
        ],
        "color::theme::Size": [
            "color::theme::Size",
            "crossterm::style::Color"
        ],
        "color::theme::Symlink": [
            "color::theme::Symlink",
            "crossterm::style::Color"
        ],
        "color::theme::Theme": [
            "color::theme::Date",
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::INode",
            "color::theme::Links",
            "color::theme::Permission",
            "color::theme::Size",
            "color::theme::Symlink",
            "color::theme::Theme",
            "crossterm::style::Color"
        ],
        "color::theme::Theme::default_dark": [
            "color::theme::Date",
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::INode",
            "color::theme::Links",
            "color::theme::Permission",
            "color::theme::Size",
            "color::theme::Symlink",
            "color::theme::Theme",
            "crossterm::style::Color"
        ],
        "color::theme::Theme::from_path": [
            "std::marker::Sized",
            "std::option::Option"
        ],
        "color::theme::Theme::with_yaml": [
            "std::marker::Sized",
            "std::result::Result"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor": [
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor": [
            "color::theme::Date",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor",
            "crossterm::style::Color",
            "std::default::Default",
            "std::marker::PhantomData"
        ],
        "color::to_content_style": [
            "crossterm::style::ContentStyle",
            "lscolors::Style"
        ],
        "config_file::Color": [
            "config_file::Color",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "config_file::Config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "config_file::Config::config_file_path": [
            "std::marker::Sized",
            "std::option::Option"
        ],
        "config_file::Config::expand_home": [
            "std::convert::AsRef",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "config_file::Config::from_file": [
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "config_file::Config::from_yaml": [
            "std::marker::Sized",
            "std::result::Result"
        ],
        "config_file::Config::with_none": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "config_file::Icons": [
            "config_file::Icons",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "config_file::Recursion": [
            "config_file::Recursion",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "config_file::Sorting": [
            "config_file::Sorting",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor": [
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "core::Core": [
            "color::Colors",
            "core::Core",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "icon::Icons",
            "std::alloc::Allocator",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String",
            "std::vec::Vec"
        ],
        "core::Core::display": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "color::Colors",
            "core::Core",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "icon::Icons",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::alloc::Allocator",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String",
            "std::vec::Vec"
        ],
        "core::Core::fetch": [
            "color::Colors",
            "core::Core",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "icon::Icons",
            "std::alloc::Allocator",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String",
            "std::vec::Vec"
        ],
        "core::Core::new": [
            "color::Colors",
            "core::Core",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "icon::Icons",
            "std::alloc::Allocator",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String",
            "std::vec::Vec"
        ],
        "core::Core::run": [
            "color::Colors",
            "core::Core",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "icon::Icons",
            "std::alloc::Allocator",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String",
            "std::vec::Vec"
        ],
        "core::Core::sort": [
            "color::Colors",
            "core::Core",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "icon::Icons",
            "std::alloc::Allocator",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String",
            "std::vec::Vec"
        ],
        "display::detect_size_lengths": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String",
            "std::vec::Vec"
        ],
        "display::display_folder_path": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "display::get_output": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "color::Colors",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "icon::Icons",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::DisplayOption",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::alloc::Allocator",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::Path",
            "std::path::PathBuf",
            "std::string::String",
            "std::vec::Vec"
        ],
        "display::get_padding_rules": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::alloc::Allocator",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String",
            "std::vec::Vec"
        ],
        "display::get_visible_width": [],
        "display::grid": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "color::Colors",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "icon::Icons",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::alloc::Allocator",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String",
            "std::vec::Vec"
        ],
        "display::inner_display_grid": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "color::Colors",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "icon::Icons",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::DisplayOption",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::alloc::Allocator",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::Path",
            "std::path::PathBuf",
            "std::string::String",
            "std::vec::Vec"
        ],
        "display::inner_display_tree": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "color::Colors",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "icon::Icons",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::alloc::Allocator",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String",
            "std::vec::Vec"
        ],
        "display::should_display_folder_path": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String",
            "std::vec::Vec"
        ],
        "display::tree": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "color::Colors",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "icon::Icons",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::alloc::Allocator",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String",
            "std::vec::Vec"
        ],
        "flags::Configurable::configure_from": [
            "clap::ArgMatches",
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::Configurable::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::Configurable::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::Configurable::from_environment": [
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::Flags": [
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::string::String",
            "std::vec::Vec"
        ],
        "flags::Flags::configure_from": [
            "clap::ArgMatches",
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "flags::blocks::Block": [
            "flags::blocks::Block"
        ],
        "flags::blocks::Blocks": [
            "flags::blocks::Blocks",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::vec::Vec"
        ],
        "flags::blocks::Blocks::configure_from": [
            "clap::ArgMatches",
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "flags::blocks::Blocks::contains_inode": [
            "flags::blocks::Blocks",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::vec::Vec"
        ],
        "flags::blocks::Blocks::displays_size": [
            "flags::blocks::Blocks",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::vec::Vec"
        ],
        "flags::blocks::Blocks::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::blocks::Blocks::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::blocks::Blocks::long": [
            "flags::blocks::Blocks",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::vec::Vec"
        ],
        "flags::blocks::Blocks::optional_insert_context": [
            "flags::blocks::Blocks",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::vec::Vec"
        ],
        "flags::blocks::Blocks::optional_prepend_inode": [
            "flags::blocks::Blocks",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::vec::Vec"
        ],
        "flags::blocks::Blocks::prepend_inode": [
            "flags::blocks::Blocks",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::vec::Vec"
        ],
        "flags::color::Color": [
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "std::string::String"
        ],
        "flags::color::Color::configure_from": [
            "clap::ArgMatches",
            "config_file::Config",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "flags::color::ColorOption": [
            "flags::color::ColorOption"
        ],
        "flags::color::ColorOption::from_str": [
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::color::ThemeOption": [
            "flags::color::ThemeOption",
            "std::string::String"
        ],
        "flags::color::ThemeOption::from_config": [
            "config_file::Config",
            "flags::color::ThemeOption",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field": [
            "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor": [
            "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor": [
            "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "flags::date::DateFlag": [
            "flags::date::DateFlag",
            "std::string::String"
        ],
        "flags::date::DateFlag::from_format_string": [
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::date::DateFlag::from_str": [
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::dereference::Dereference": [
            "flags::dereference::Dereference"
        ],
        "flags::display::Display": [
            "flags::display::Display"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field": [
            "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor": [
            "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor": [
            "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "flags::hyperlink::HyperlinkOption": [
            "flags::hyperlink::HyperlinkOption"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field": [
            "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor": [
            "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor": [
            "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "flags::icons::IconOption": [
            "flags::icons::IconOption"
        ],
        "flags::icons::IconSeparator": [
            "flags::icons::IconSeparator",
            "std::string::String"
        ],
        "flags::icons::IconTheme": [
            "flags::icons::IconTheme"
        ],
        "flags::icons::Icons": [
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "std::string::String"
        ],
        "flags::icons::Icons::configure_from": [
            "clap::ArgMatches",
            "config_file::Config",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field": [
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor": [
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor": [
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor": [
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field": [
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor": [
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor": [
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "flags::ignore_globs::IgnoreGlobs": [
            "flags::ignore_globs::IgnoreGlobs",
            "globset::GlobSet"
        ],
        "flags::ignore_globs::IgnoreGlobs::configure_from": [
            "clap::ArgMatches",
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "flags::ignore_globs::IgnoreGlobs::create_glob": [
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::ignore_globs::IgnoreGlobs::create_glob_set": [
            "globset::GlobSetBuilder",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::ignore_globs::IgnoreGlobs::from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::ignore_globs::IgnoreGlobs::from_config": [
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::indicators::Indicators": [
            "flags::indicators::Indicators"
        ],
        "flags::layout::Layout": [
            "flags::layout::Layout"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field": [
            "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor": [
            "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor": [
            "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "flags::permission::PermissionFlag": [
            "flags::permission::PermissionFlag"
        ],
        "flags::permission::PermissionFlag::from_str": [
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field": [
            "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor": [
            "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor": [
            "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "flags::recursion::Recursion": [
            "flags::recursion::Recursion"
        ],
        "flags::recursion::Recursion::configure_from": [
            "clap::ArgMatches",
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "flags::recursion::Recursion::depth_from": [
            "clap::ArgMatches",
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option",
            "std::result::Result"
        ],
        "flags::recursion::Recursion::depth_from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::recursion::Recursion::enabled_from": [
            "clap::ArgMatches",
            "config_file::Config",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::recursion::Recursion::enabled_from_arg_matches": [
            "clap::ArgMatches",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::size::SizeFlag": [
            "flags::size::SizeFlag"
        ],
        "flags::size::SizeFlag::from_str": [
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field": [
            "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor": [
            "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor": [
            "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "flags::sorting::DirGrouping": [
            "flags::sorting::DirGrouping"
        ],
        "flags::sorting::DirGrouping::from_str": [
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::sorting::SortColumn": [
            "flags::sorting::SortColumn"
        ],
        "flags::sorting::SortOrder": [
            "flags::sorting::SortOrder"
        ],
        "flags::sorting::Sorting": [
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting"
        ],
        "flags::sorting::Sorting::configure_from": [
            "clap::ArgMatches",
            "config_file::Config",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field": [
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor": [
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor": [
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize": [
            "config_file::_::_serde::Deserializer",
            "std::marker::Sized",
            "std::result::Result"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field": [
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor": [
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor": [
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor",
            "std::marker::PhantomData"
        ],
        "flags::symlink_arrow::SymlinkArrow": [
            "flags::symlink_arrow::SymlinkArrow",
            "std::string::String"
        ],
        "flags::symlinks::NoSymlink": [
            "flags::symlinks::NoSymlink"
        ],
        "flags::total_size::TotalSize": [
            "flags::total_size::TotalSize"
        ],
        "icon::Icons": [
            "icon::Icons",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::string::String"
        ],
        "icon::Icons::get": [
            "icon::Icons",
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "icon::Icons::get_default_icons_by_extension": [
            "std::collections::HashMap",
            "std::marker::Sized"
        ],
        "icon::Icons::get_default_icons_by_name": [
            "std::collections::HashMap",
            "std::marker::Sized"
        ],
        "icon::Icons::new": [
            "icon::Icons",
            "icon::Theme",
            "std::collections::HashMap",
            "std::marker::Sized",
            "std::string::String"
        ],
        "icon::Theme": [
            "icon::Theme"
        ],
        "main": [],
        "meta::Meta": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "meta::Meta::calculate_total_file_size": [
            "std::path::Path"
        ],
        "meta::Meta::calculate_total_size": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "meta::Meta::from_path": [
            "std::marker::Sized",
            "std::path::Path",
            "std::result::Result"
        ],
        "meta::Meta::recurse_into": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::result::Result",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::access_control::AccessControl": [
            "meta::access_control::AccessControl",
            "std::string::String"
        ],
        "meta::access_control::AccessControl::for_path": [
            "meta::access_control::AccessControl",
            "std::path::Path",
            "std::string::String"
        ],
        "meta::access_control::AccessControl::from_data": [
            "meta::access_control::AccessControl",
            "std::string::String"
        ],
        "meta::access_control::AccessControl::render_context": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::symlink_arrow::SymlinkArrow",
            "meta::access_control::AccessControl",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "meta::access_control::AccessControl::render_method": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::symlink_arrow::SymlinkArrow",
            "meta::access_control::AccessControl",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "meta::access_control::Method": [
            "meta::access_control::Method"
        ],
        "meta::access_control::Method::name": [
            "meta::access_control::Method"
        ],
        "meta::date::Date": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::date::Date",
            "std::marker::Sized"
        ],
        "meta::date::Date::date_string": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::date::Date",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::date::Date::render": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::date::Date",
            "std::alloc::Allocator",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::filetype::FileType": [
            "meta::filetype::FileType"
        ],
        "meta::filetype::FileType::is_dirlike": [
            "meta::filetype::FileType"
        ],
        "meta::filetype::FileType::new": [
            "meta::filetype::FileType",
            "meta::permissions::Permissions",
            "std::fs::Metadata",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "meta::filetype::FileType::render": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::symlink_arrow::SymlinkArrow",
            "meta::filetype::FileType",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "meta::indicator::Indicator": [
            "meta::indicator::Indicator"
        ],
        "meta::indicator::Indicator::render": [
            "crossterm::style::StyledContent",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::indicator::Indicator",
            "std::alloc::Allocator",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::inode::INode": [
            "meta::inode::INode",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "meta::inode::INode::render": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::symlink_arrow::SymlinkArrow",
            "meta::inode::INode",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "meta::links::Links": [
            "meta::links::Links",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "meta::links::Links::render": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::symlink_arrow::SymlinkArrow",
            "meta::links::Links",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "meta::name::DisplayOption": [
            "meta::name::DisplayOption",
            "std::path::Path"
        ],
        "meta::name::Name": [
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "meta::name::Name::escape": [
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "meta::name::Name::extension": [
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "meta::name::Name::file_name": [
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "meta::name::Name::file_type": [
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "meta::name::Name::hyperlink": [
            "flags::hyperlink::HyperlinkOption",
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "meta::name::Name::new": [
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::Path",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "meta::name::Name::relative_path": [
            "color::Elem",
            "meta::filetype::FileType",
            "meta::name::Name",
            "std::clone::Clone",
            "std::convert::AsRef",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "meta::name::Name::render": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::hyperlink::HyperlinkOption",
            "flags::symlink_arrow::SymlinkArrow",
            "icon::Icons",
            "meta::filetype::FileType",
            "meta::name::DisplayOption",
            "meta::name::Name",
            "std::collections::HashMap",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::Path",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "meta::owner::Owner": [
            "meta::owner::Owner",
            "std::string::String"
        ],
        "meta::owner::Owner::new": [
            "meta::owner::Owner",
            "std::string::String"
        ],
        "meta::owner::Owner::render_group": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::symlink_arrow::SymlinkArrow",
            "meta::owner::Owner",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "meta::owner::Owner::render_user": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::symlink_arrow::SymlinkArrow",
            "meta::owner::Owner",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String"
        ],
        "meta::permissions::Permissions": [
            "meta::permissions::Permissions"
        ],
        "meta::permissions::Permissions::bits_to_octal": [],
        "meta::permissions::Permissions::is_executable": [
            "meta::permissions::Permissions"
        ],
        "meta::permissions::Permissions::render": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::permissions::Permissions",
            "std::alloc::Allocator",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::size::Size": [
            "meta::size::Size"
        ],
        "meta::size::Size::format_size": [
            "meta::size::Size",
            "std::string::String"
        ],
        "meta::size::Size::get_bytes": [
            "meta::size::Size"
        ],
        "meta::size::Size::get_unit": [
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::size::Size",
            "meta::size::Unit",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::size::Size::new": [
            "meta::size::Size"
        ],
        "meta::size::Size::paint": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::size::Size",
            "std::alloc::Allocator",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::size::Size::render": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::size::Size",
            "std::alloc::Allocator",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::size::Size::render_unit": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::size::Size",
            "std::alloc::Allocator",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::size::Size::render_value": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::size::Size",
            "std::alloc::Allocator",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::size::Size::unit_string": [
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::size::Size",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::size::Size::value_string": [
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::size::Size",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::size::Unit": [
            "meta::size::Unit"
        ],
        "meta::symlink::SymLink": [
            "meta::symlink::SymLink",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "meta::symlink::SymLink::render": [
            "color::Colors",
            "crossterm::style::StyledContent",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "meta::symlink::SymLink",
            "std::alloc::Allocator",
            "std::fmt::Display",
            "std::marker::Sized",
            "std::option::Option",
            "std::string::String",
            "std::vec::Vec"
        ],
        "meta::symlink::SymLink::symlink_string": [
            "meta::symlink::SymLink",
            "std::marker::Sized",
            "std::option::Option"
        ],
        "sort::assemble_sorters": [
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "globset::GlobSet",
            "std::alloc::Allocator",
            "std::marker::Sized",
            "std::string::String",
            "std::vec::Vec"
        ],
        "sort::by_date": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::cmp::Ordering",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "sort::by_extension": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::cmp::Ordering",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "sort::by_meta": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "flags::sorting::SortOrder",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::cmp::Ordering",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "sort::by_name": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::cmp::Ordering",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "sort::by_size": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::cmp::Ordering",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "sort::by_version": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::cmp::Ordering",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ],
        "sort::with_dirs_first": [
            "chrono::DateTime",
            "chrono::TimeZone",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink",
            "std::cmp::Ordering",
            "std::marker::Sized",
            "std::option::Option",
            "std::path::PathBuf",
            "std::string::String"
        ]
    },
    "glob_path_import": {},
    "self_to_fn": {
        "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor": [
            "impl<'de> Visitor<'de> for ThemeOptionVisitor {\n            type Value = ThemeOption;\n\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"`default` or <theme-file-path>\")\n            }\n\n            fn visit_str<E>(self, value: &str) -> Result<ThemeOption, E>\n            where\n                E: de::Error,\n            {\n                match value {\n                    \"default\" => Ok(ThemeOption::Default),\n                    str => Ok(ThemeOption::Custom(str.to_string())),\n                }\n            }\n        }"
        ],
        "color::Colors": [
            "impl Colors {\n    pub fn new(t: ThemeOption) -> Self {\n        let theme = match t {\n            ThemeOption::NoColor => None,\n            ThemeOption::Default => Some(Theme::default()),\n            ThemeOption::NoLscolors => Some(Theme::default()),\n            ThemeOption::Custom(ref file) => Some(Theme::from_path(file).unwrap_or_default()),\n        };\n        let lscolors = match t {\n            ThemeOption::Default => Some(LsColors::from_env().unwrap_or_default()),\n            ThemeOption::Custom(_) => Some(LsColors::from_env().unwrap_or_default()),\n            _ => None,\n        };\n\n        Self { theme, lscolors }\n    }\n\n    pub fn colorize(&self, input: String, elem: &Elem) -> ColoredString {\n        self.style(elem).apply(input)\n    }\n\n    pub fn colorize_using_path(&self, input: String, path: &Path, elem: &Elem) -> ColoredString {\n        let style_from_path = self.style_from_path(path);\n        match style_from_path {\n            Some(style_from_path) => style_from_path.apply(input),\n            None => self.colorize(input, elem),\n        }\n    }\n\n    pub fn default_style() -> ContentStyle {\n        ContentStyle::default()\n    }\n\n    fn style_from_path(&self, path: &Path) -> Option<ContentStyle> {\n        match &self.lscolors {\n            Some(lscolors) => lscolors.style_for_path(path).map(to_content_style),\n            None => None,\n        }\n    }\n\n    fn style(&self, elem: &Elem) -> ContentStyle {\n        match &self.lscolors {\n            Some(lscolors) => match self.get_indicator_from_elem(elem) {\n                Some(style) => {\n                    let style = lscolors.style_for_indicator(style);\n                    style.map(to_content_style).unwrap_or_default()\n                }\n                None => self.style_default(elem),\n            },\n            None => self.style_default(elem),\n        }\n    }\n\n    fn style_default(&self, elem: &Elem) -> ContentStyle {\n        if let Some(t) = &self.theme {\n            let style_fg = ContentStyle::default().with(elem.get_color(t));\n            if elem.has_suid() {\n                style_fg.on(Color::AnsiValue(124)) // Red3\n            } else {\n                style_fg\n            }\n        } else {\n            ContentStyle::default()\n        }\n    }\n\n    fn get_indicator_from_elem(&self, elem: &Elem) -> Option<Indicator> {\n        let indicator_string = match elem {\n            Elem::File { exec, uid } => match (exec, uid) {\n                (_, true) => None,\n                (true, false) => Some(\"ex\"),\n                (false, false) => Some(\"fi\"),\n            },\n            Elem::Dir { uid } => {\n                if *uid {\n                    None\n                } else {\n                    Some(\"di\")\n                }\n            }\n            Elem::SymLink => Some(\"ln\"),\n            Elem::Pipe => Some(\"pi\"),\n            Elem::Socket => Some(\"so\"),\n            Elem::BlockDevice => Some(\"bd\"),\n            Elem::CharDevice => Some(\"cd\"),\n            Elem::BrokenSymLink => Some(\"or\"),\n            Elem::MissingSymLinkTarget => Some(\"mi\"),\n            Elem::INode { valid } => match valid {\n                true => Some(\"so\"),\n                false => Some(\"no\"),\n            },\n            Elem::Links { valid } => match valid {\n                true => Some(\"so\"),\n                false => Some(\"no\"),\n            },\n            _ => None,\n        };\n\n        match indicator_string {\n            Some(ids) => Indicator::from(ids),\n            None => None,\n        }\n    }\n}"
        ],
        "color::Elem": [
            "Clone",
            "Debug",
            "Eq",
            "Hash",
            "PartialEq",
            "impl Elem {\n    pub fn has_suid(&self) -> bool {\n        matches!(self, Elem::Dir { uid: true } | Elem::File { uid: true, .. })\n    }\n\n    pub fn get_color(&self, theme: &theme::Theme) -> Color {\n        match self {\n            Elem::File {\n                exec: true,\n                uid: true,\n            } => theme.file_type.file.exec_uid,\n            Elem::File {\n                exec: false,\n                uid: true,\n            } => theme.file_type.file.uid_no_exec,\n            Elem::File {\n                exec: true,\n                uid: false,\n            } => theme.file_type.file.exec_no_uid,\n            Elem::File {\n                exec: false,\n                uid: false,\n            } => theme.file_type.file.no_exec_no_uid,\n            Elem::SymLink => theme.file_type.symlink.default,\n            Elem::BrokenSymLink => theme.file_type.symlink.broken,\n            Elem::MissingSymLinkTarget => theme.file_type.symlink.missing_target,\n            Elem::Dir { uid: true } => theme.file_type.dir.uid,\n            Elem::Dir { uid: false } => theme.file_type.dir.no_uid,\n            Elem::Pipe => theme.file_type.pipe,\n            Elem::BlockDevice => theme.file_type.block_device,\n            Elem::CharDevice => theme.file_type.char_device,\n            Elem::Socket => theme.file_type.socket,\n            Elem::Special => theme.file_type.special,\n\n            Elem::Read => theme.permission.read,\n            Elem::Write => theme.permission.write,\n            Elem::Exec => theme.permission.exec,\n            Elem::ExecSticky => theme.permission.exec_sticky,\n            Elem::NoAccess => theme.permission.no_access,\n            Elem::Octal => theme.permission.octal,\n            Elem::Acl => theme.permission.acl,\n            Elem::Context => theme.permission.context,\n\n            Elem::DayOld => theme.date.day_old,\n            Elem::HourOld => theme.date.hour_old,\n            Elem::Older => theme.date.older,\n\n            Elem::User => theme.user,\n            Elem::Group => theme.group,\n            Elem::NonFile => theme.size.none,\n            Elem::FileLarge => theme.size.large,\n            Elem::FileMedium => theme.size.medium,\n            Elem::FileSmall => theme.size.small,\n            Elem::INode { valid: false } => theme.inode.valid,\n            Elem::INode { valid: true } => theme.inode.invalid,\n            Elem::TreeEdge => theme.tree_edge,\n            Elem::Links { valid: false } => theme.links.invalid,\n            Elem::Links { valid: true } => theme.links.valid,\n        }\n    }\n}"
        ],
        "color::theme::Date": [
            "Debug",
            "Deserialize",
            "PartialEq",
            "impl Default for Date {\n    fn default() -> Self {\n        Date {\n            hour_old: Color::AnsiValue(40), // Green3\n            day_old: Color::AnsiValue(42),  // SpringGreen2\n            older: Color::AnsiValue(36),    // DarkCyan\n        }\n    }\n}"
        ],
        "color::theme::Dir": [
            "Debug",
            "Deserialize",
            "PartialEq",
            "impl Default for Dir {\n    fn default() -> Self {\n        Dir {\n            uid: Color::AnsiValue(33),    // DodgerBlue1\n            no_uid: Color::AnsiValue(33), // DodgerBlue1\n        }\n    }\n}"
        ],
        "color::theme::File": [
            "Debug",
            "Deserialize",
            "PartialEq",
            "impl Default for File {\n    fn default() -> Self {\n        File {\n            exec_uid: Color::AnsiValue(40),        // Green3\n            uid_no_exec: Color::AnsiValue(184),    // Yellow3\n            exec_no_uid: Color::AnsiValue(40),     // Green3\n            no_exec_no_uid: Color::AnsiValue(184), // Yellow3\n        }\n    }\n}"
        ],
        "color::theme::FileType": [
            "Debug",
            "Deserialize",
            "PartialEq",
            "impl Default for FileType {\n    fn default() -> Self {\n        FileType {\n            file: File::default(),\n            dir: Dir::default(),\n            symlink: Symlink::default(),\n            pipe: Color::AnsiValue(44),         // DarkTurquoise\n            block_device: Color::AnsiValue(44), // DarkTurquoise\n            char_device: Color::AnsiValue(172), // Orange3\n            socket: Color::AnsiValue(44),       // DarkTurquoise\n            special: Color::AnsiValue(44),      // DarkTurquoise\n        }\n    }\n}"
        ],
        "color::theme::INode": [
            "Debug",
            "Deserialize",
            "PartialEq",
            "impl Default for INode {\n    fn default() -> Self {\n        INode {\n            valid: Color::AnsiValue(13),    // Pink\n            invalid: Color::AnsiValue(245), // Grey\n        }\n    }\n}"
        ],
        "color::theme::Links": [
            "Debug",
            "Deserialize",
            "PartialEq",
            "impl Default for Links {\n    fn default() -> Self {\n        Links {\n            valid: Color::AnsiValue(13),    // Pink\n            invalid: Color::AnsiValue(245), // Grey\n        }\n    }\n}"
        ],
        "color::theme::Permission": [
            "Debug",
            "Deserialize",
            "PartialEq",
            "impl Default for Permission {\n    fn default() -> Self {\n        Permission {\n            read: Color::DarkGreen,\n            write: Color::DarkYellow,\n            exec: Color::DarkRed,\n            exec_sticky: Color::AnsiValue(5),\n            no_access: Color::AnsiValue(245), // Grey\n            octal: Color::AnsiValue(6),\n            acl: Color::DarkCyan,\n            context: Color::Cyan,\n        }\n    }\n}"
        ],
        "color::theme::Size": [
            "Debug",
            "Deserialize",
            "PartialEq",
            "impl Default for Size {\n    fn default() -> Self {\n        Size {\n            none: Color::AnsiValue(245),   // Grey\n            small: Color::AnsiValue(229),  // Wheat1\n            medium: Color::AnsiValue(216), // LightSalmon1\n            large: Color::AnsiValue(172),  // Orange3\n        }\n    }\n}"
        ],
        "color::theme::Symlink": [
            "Debug",
            "Deserialize",
            "PartialEq",
            "impl Default for Symlink {\n    fn default() -> Self {\n        Symlink {\n            default: Color::AnsiValue(44),         // DarkTurquoise\n            broken: Color::AnsiValue(124),         // Red3\n            missing_target: Color::AnsiValue(124), // Red3\n        }\n    }\n}"
        ],
        "color::theme::Theme": [
            "Debug",
            "Deserialize",
            "PartialEq",
            "impl Default for Theme {\n    fn default() -> Self {\n        // TODO(zwpaper): check terminal color and return light or dark\n        Self::default_dark()\n    }\n}",
            "impl Theme {\n    /// This read theme from file,\n    /// use the file path if it is absolute\n    /// prefix the config_file dir to it if it is not\n    pub fn from_path(file: &str) -> Option<Self> {\n        let real = if let Some(path) = config_file::Config::expand_home(file) {\n            path\n        } else {\n            print_error!(\"Not a valid theme file path: {}.\", &file);\n            return None;\n        };\n        let path = if Path::new(&real).is_absolute() {\n            real\n        } else {\n            config_file::Config::config_file_path()?\n                .join(\"themes\")\n                .join(real)\n        };\n        match fs::read(&path.with_extension(\"yaml\")) {\n            Ok(f) => match Self::with_yaml(&String::from_utf8_lossy(&f)) {\n                Ok(t) => Some(t),\n                Err(e) => {\n                    print_error!(\"Theme file {} format error: {}.\", &file, e);\n                    None\n                }\n            },\n            Err(_) => {\n                // try `yml` if `yaml` extension file not found\n                match fs::read(&path.with_extension(\"yml\")) {\n                    Ok(f) => match Self::with_yaml(&String::from_utf8_lossy(&f)) {\n                        Ok(t) => Some(t),\n                        Err(e) => {\n                            print_error!(\"Theme file {} format error: {}.\", &file, e);\n                            None\n                        }\n                    },\n                    Err(e) => {\n                        print_error!(\"Not a valid theme: {}, {}.\", path.to_string_lossy(), e);\n                        None\n                    }\n                }\n            }\n        }\n    }\n\n    /// This constructs a Theme struct with a passed [Yaml] str.\n    fn with_yaml(yaml: &str) -> Result<Self, serde_yaml::Error> {\n        serde_yaml::from_str::<Self>(yaml)\n    }\n\n    pub fn default_dark() -> Self {\n        Theme {\n            user: Color::AnsiValue(230),  // Cornsilk1\n            group: Color::AnsiValue(187), // LightYellow3\n            permission: Permission::default(),\n            file_type: FileType::default(),\n            date: Date::default(),\n            size: Size::default(),\n            inode: INode::default(),\n            links: Links::default(),\n            tree_edge: Color::AnsiValue(245), // Grey\n        }\n    }\n\n    #[cfg(test)]\n    pub fn default_yaml() -> &'static str {\n        r#\"---\nuser: 230\ngroup: 187\npermission:\n  read: dark_green\n  write: dark_yellow\n  exec: dark_red\n  exec-sticky: 5\n  no-access: 245\ndate:\n  hour-old: 40\n  day-old: 42\n  older: 36\nsize:\n  none: 245\n  small: 229\n  medium: 216\n  large: 172\ninode:\n  valid: 13\n  invalid: 245\nlinks:\n  valid: 13\n  invalid: 245\ntree-edge: 245\n\"#\n    }\n}"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "config_file::Color": [
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq"
        ],
        "config_file::Config": [
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq",
            "impl Config {\n    /// This constructs a Config struct with all None\n    pub fn with_none() -> Self {\n        Self {\n            classic: None,\n            blocks: None,\n            color: None,\n            date: None,\n            dereference: None,\n            display: None,\n            icons: None,\n            ignore_globs: None,\n            indicators: None,\n            layout: None,\n            recursion: None,\n            size: None,\n            permission: None,\n            sorting: None,\n            no_symlink: None,\n            total_size: None,\n            symlink_arrow: None,\n            hyperlink: None,\n        }\n    }\n\n    /// This constructs a Config struct with a passed file path [String].\n    pub fn from_file(file: String) -> Option<Self> {\n        match fs::read(&file) {\n            Ok(f) => match Self::from_yaml(&String::from_utf8_lossy(&f)) {\n                Ok(c) => Some(c),\n                Err(e) => {\n                    print_error!(\"Configuration file {} format error, {}.\", &file, e);\n                    None\n                }\n            },\n            Err(e) => {\n                match e.kind() {\n                    std::io::ErrorKind::NotFound => {}\n                    _ => print_error!(\"Can not open config file {}: {}.\", &file, e),\n                };\n                None\n            }\n        }\n    }\n\n    /// This constructs a Config struct with a passed [Yaml] str.\n    /// If error happened, return the [serde_yaml::Error].\n    fn from_yaml(yaml: &str) -> Result<Self, serde_yaml::Error> {\n        serde_yaml::from_str::<Self>(yaml)\n    }\n\n    /// This provides the path for a configuration file, according to the XDG_BASE_DIRS specification.\n    /// return None if error like PermissionDenied\n    #[cfg(not(windows))]\n    pub fn config_file_path() -> Option<PathBuf> {\n        use xdg::BaseDirectories;\n        match BaseDirectories::with_prefix(CONF_DIR) {\n            Ok(p) => {\n                return Some(p.get_config_home());\n            }\n            Err(e) => print_error!(\"Can not open config file: {}.\", e),\n        }\n        None\n    }\n\n    /// This provides the path for a configuration file, inside the %APPDATA% directory.\n    /// return None if error like PermissionDenied\n    #[cfg(windows)]\n    pub fn config_file_path() -> Option<PathBuf> {\n        if let Some(p) = dirs::config_dir() {\n            return Some(p.join(CONF_DIR));\n        }\n        None\n    }\n\n    /// This expand the `~` in path to HOME dir\n    /// returns the origin one if no `~` found;\n    /// returns None if error happened when getting home dir\n    ///\n    /// Implementing this to reuse the `dirs` dependency, avoid adding new one\n    pub fn expand_home<P: AsRef<Path>>(path: P) -> Option<PathBuf> {\n        let p = path.as_ref();\n        if !p.starts_with(\"~\") {\n            return Some(p.to_path_buf());\n        }\n        if p == Path::new(\"~\") {\n            return dirs::home_dir();\n        }\n        dirs::home_dir().map(|mut h| {\n            if h == Path::new(\"/\") {\n                // Corner case: `h` root directory;\n                // don't prepend extra `/`, just drop the tilde.\n                p.strip_prefix(\"~\").unwrap().to_path_buf()\n            } else {\n                h.push(p.strip_prefix(\"~/\").unwrap());\n                h\n            }\n        })\n    }\n}",
            "impl Default for Config {\n    fn default() -> Self {\n        if let Some(p) = Self::config_file_path() {\n            if let Some(c) = Self::from_file(\n                p.join([CONF_FILE_NAME, YAML_LONG_EXT].join(\".\"))\n                    .to_string_lossy()\n                    .to_string(),\n            ) {\n                return c;\n            }\n        }\n        Self::from_yaml(DEFAULT_CONFIG).unwrap()\n    }\n}"
        ],
        "config_file::Icons": [
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq"
        ],
        "config_file::Recursion": [
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq"
        ],
        "config_file::Sorting": [
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "core::Core": [
            "impl Core {\n    pub fn new(mut flags: Flags) -> Self {\n        // Check through libc if stdout is a tty. Unix specific so not on windows.\n        // Determine color output availability (and initialize color output (for Windows 10))\n        #[cfg(not(target_os = \"windows\"))]\n        let tty_available = unsafe { libc::isatty(io::stdout().as_raw_fd()) == 1 };\n\n        #[cfg(not(target_os = \"windows\"))]\n        let console_color_ok = true;\n\n        #[cfg(target_os = \"windows\")]\n        let tty_available = terminal_size().is_some(); // terminal_size allows us to know if the stdout is a tty or not.\n\n        #[cfg(target_os = \"windows\")]\n        let console_color_ok = crossterm::ansi_support::supports_ansi();\n\n        let mut inner_flags = flags.clone();\n\n        let color_theme = match (tty_available && console_color_ok, flags.color.when) {\n            (_, ColorOption::Never) | (false, ColorOption::Auto) => ThemeOption::NoColor,\n            _ => flags.color.theme.clone(),\n        };\n\n        let icon_theme = match (tty_available, flags.icons.when, flags.icons.theme) {\n            (_, IconOption::Never, _) | (false, IconOption::Auto, _) => icon::Theme::NoIcon,\n            (_, _, IconTheme::Fancy) => icon::Theme::Fancy,\n            (_, _, IconTheme::Unicode) => icon::Theme::Unicode,\n        };\n\n        // TODO: Rework this so that flags passed downstream does not\n        // have Auto option for any (icon, color, hyperlink).\n        if matches!(flags.hyperlink, HyperlinkOption::Auto) {\n            flags.hyperlink = if tty_available {\n                HyperlinkOption::Always\n            } else {\n                HyperlinkOption::Never\n            }\n        }\n\n        let icon_separator = flags.icons.separator.0.clone();\n\n        if !tty_available {\n            // The output is not a tty, this means the command is piped. (ex: lsd -l | less)\n            //\n            // Most of the programs does not handle correctly the ansi colors\n            // or require a raw output (like the `wc` command).\n            inner_flags.layout = Layout::OneLine;\n        };\n\n        let sorters = sort::assemble_sorters(&flags);\n\n        Self {\n            flags,\n            colors: Colors::new(color_theme),\n            icons: Icons::new(icon_theme, icon_separator),\n            sorters,\n        }\n    }\n\n    pub fn run(self, paths: Vec<PathBuf>) {\n        let mut meta_list = self.fetch(paths);\n\n        self.sort(&mut meta_list);\n        self.display(&meta_list)\n    }\n\n    fn fetch(&self, paths: Vec<PathBuf>) -> Vec<Meta> {\n        let mut meta_list = Vec::with_capacity(paths.len());\n        let depth = match self.flags.layout {\n            Layout::Tree { .. } => self.flags.recursion.depth,\n            _ if self.flags.recursion.enabled => self.flags.recursion.depth,\n            _ => 1,\n        };\n\n        for path in paths {\n            let mut meta = match Meta::from_path(&path, self.flags.dereference.0) {\n                Ok(meta) => meta,\n                Err(err) => {\n                    print_error!(\"{}: {}.\", path.display(), err);\n                    continue;\n                }\n            };\n\n            let recurse =\n                self.flags.layout == Layout::Tree || self.flags.display != Display::DirectoryOnly;\n            if recurse {\n                match meta.recurse_into(depth, &self.flags) {\n                    Ok(content) => {\n                        meta.content = content;\n                        meta_list.push(meta);\n                    }\n                    Err(err) => {\n                        print_error!(\"lsd: {}: {}\\n\", path.display(), err);\n                        continue;\n                    }\n                };\n            } else {\n                meta_list.push(meta);\n            };\n        }\n        // Only calculate the total size of a directory if it will be displayed\n        if self.flags.total_size.0 && self.flags.blocks.displays_size() {\n            for meta in &mut meta_list.iter_mut() {\n                meta.calculate_total_size();\n            }\n        }\n\n        meta_list\n    }\n\n    fn sort(&self, metas: &mut Vec<Meta>) {\n        metas.sort_unstable_by(|a, b| sort::by_meta(&self.sorters, a, b));\n\n        for meta in metas {\n            if let Some(ref mut content) = meta.content {\n                self.sort(content);\n            }\n        }\n    }\n\n    fn display(&self, metas: &[Meta]) {\n        let output = if self.flags.layout == Layout::Tree {\n            display::tree(metas, &self.flags, &self.colors, &self.icons)\n        } else {\n            display::grid(metas, &self.flags, &self.colors, &self.icons)\n        };\n\n        print_output!(\"{}\", output);\n    }\n}"
        ],
        "flags::Flags": [
            "Clone",
            "Debug",
            "Default",
            "impl Flags {\n    /// Set up the `Flags` from either [ArgMatches], a [Config] or its [Default] value.\n    ///\n    /// # Errors\n    ///\n    /// This can return an [Error], when either the building of the ignore globs or the parsing of\n    /// the recursion depth parameter fails.\n    pub fn configure_from(matches: &ArgMatches, config: &Config) -> Result<Self, Error> {\n        Ok(Self {\n            blocks: Blocks::configure_from(matches, config)?,\n            color: Color::configure_from(matches, config),\n            date: DateFlag::configure_from(matches, config),\n            dereference: Dereference::configure_from(matches, config),\n            display: Display::configure_from(matches, config),\n            layout: Layout::configure_from(matches, config),\n            size: SizeFlag::configure_from(matches, config),\n            permission: PermissionFlag::configure_from(matches, config),\n            display_indicators: Indicators::configure_from(matches, config),\n            icons: Icons::configure_from(matches, config),\n            ignore_globs: IgnoreGlobs::configure_from(matches, config)?,\n            no_symlink: NoSymlink::configure_from(matches, config),\n            recursion: Recursion::configure_from(matches, config)?,\n            sorting: Sorting::configure_from(matches, config),\n            total_size: TotalSize::configure_from(matches, config),\n            symlink_arrow: SymlinkArrow::configure_from(matches, config),\n            hyperlink: HyperlinkOption::configure_from(matches, config),\n        })\n    }\n}"
        ],
        "flags::blocks::Block": [
            "Clone",
            "Copy",
            "Debug",
            "Eq",
            "Hash",
            "Ord",
            "PartialEq",
            "PartialOrd",
            "impl TryFrom<&str> for Block {\n    type Error = String;\n\n    fn try_from(string: &str) -> Result<Self, Self::Error> {\n        match string {\n            \"permission\" => Ok(Self::Permission),\n            \"user\" => Ok(Self::User),\n            \"group\" => Ok(Self::Group),\n            \"context\" => Ok(Self::Context),\n            \"size\" => Ok(Self::Size),\n            \"size_value\" => Ok(Self::SizeValue),\n            \"date\" => Ok(Self::Date),\n            \"name\" => Ok(Self::Name),\n            \"inode\" => Ok(Self::INode),\n            \"links\" => Ok(Self::Links),\n            _ => Err(format!(\"Not a valid block name: {}\", &string)),\n        }\n    }\n}"
        ],
        "flags::blocks::Blocks": [
            "Clone",
            "Debug",
            "Eq",
            "PartialEq",
            "impl Blocks {\n    /// Returns a value from either [ArgMatches], a [Config] or a default value.\n    /// Unless the \"long\" argument is passed, this returns [Default::default]. Otherwise the first\n    /// value, that is not [None], is used. The order of precedence for the value used is:\n    /// - [from_arg_matches](Blocks::from_arg_matches)\n    /// - [from_config](Blocks::from_config)\n    /// - [long](Blocks::long)\n    ///\n    /// No matter if the \"long\" argument was passed, if the \"inode\" argument is passed and the\n    /// `Blocks` does not contain a [Block] of variant [INode](Block::INode) yet, one is prepended\n    /// to the returned value.\n    ///\n    /// # Errors\n    ///\n    /// This errors if any of the [ArgMatches] parameter arguments causes [Block]'s implementation\n    /// of [TryFrom::try_from] to return an [Err].\n    pub fn configure_from(matches: &ArgMatches, config: &Config) -> Result<Self, Error> {\n        let mut result: Result<Self, Error> = if matches.is_present(\"long\") {\n            Ok(Self::long())\n        } else {\n            Ok(Default::default())\n        };\n\n        if matches.is_present(\"long\") && !matches.is_present(\"ignore-config\") {\n            if let Some(value) = Self::from_config(config) {\n                result = Ok(value);\n            }\n        }\n\n        if let Some(value) = Self::from_arg_matches(matches) {\n            result = value;\n        }\n\n        if matches.is_present(\"context\") {\n            if let Ok(blocks) = result.as_mut() {\n                blocks.optional_insert_context();\n            }\n        }\n\n        if matches.is_present(\"inode\") {\n            if let Ok(blocks) = result.as_mut() {\n                blocks.optional_prepend_inode();\n            }\n        }\n\n        result\n    }\n\n    /// Get a potential `Blocks` struct from [ArgMatches].\n    ///\n    /// If the \"blocks\" argument is passed, then this returns a `Blocks` containing the parameter\n    /// values in a [Some]. Otherwise if the \"long\" argument is passed, this returns\n    /// [Blocks::long]. Finally if none of the previous happened, this returns [None].\n    ///\n    /// # Errors\n    ///\n    /// This errors if any of the parameter arguments causes [Block]'s implementation of\n    /// [TryFrom::try_from] to return an [Err].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Result<Self, Error>> {\n        if matches.occurrences_of(\"blocks\") > 0 {\n            if let Some(values) = matches.values_of(\"blocks\") {\n                let mut blocks: Vec<Block> = vec![];\n                for value in values {\n                    match Block::try_from(value) {\n                        Ok(block) => blocks.push(block),\n                        Err(message) => {\n                            return Some(Err(Error::with_description(\n                                &message,\n                                ErrorKind::ValueValidation,\n                            )))\n                        }\n                    }\n                }\n                Some(Ok(Self(blocks)))\n            } else {\n                None\n            }\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `Blocks` struct from a [Config].\n    ///\n    /// If the [Config] contains an array of blocks values,\n    /// its [String] values is returned as `Blocks` in a [Some].\n    /// Otherwise it returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        if let Some(c) = &config.blocks {\n            let mut blocks: Vec<Block> = vec![];\n            for b in c.iter() {\n                match Block::try_from(b.as_str()) {\n                    Ok(block) => blocks.push(block),\n                    Err(err) => print_error!(\"{}.\", err),\n                }\n            }\n            if blocks.is_empty() {\n                None\n            } else {\n                Some(Self(blocks))\n            }\n        } else {\n            None\n        }\n    }\n\n    /// This returns a Blocks struct for the long format.\n    ///\n    /// It contains the [Block]s [Permission](Block::Permission), [User](Block::User),\n    /// [Group](Block::Group), [Size](Block::Size), [Date](Block::Date) and [Name](Block::Name).\n    fn long() -> Self {\n        Self(vec![\n            Block::Permission,\n            Block::User,\n            Block::Group,\n            Block::Size,\n            Block::Date,\n            Block::Name,\n        ])\n    }\n\n    /// Checks whether `self` already contains a [Block] of variant [INode](Block::INode).\n    fn contains_inode(&self) -> bool {\n        self.0.contains(&Block::INode)\n    }\n\n    /// Prepends a [Block] of variant [INode](Block::INode) to `self`.\n    fn prepend_inode(&mut self) {\n        self.0.insert(0, Block::INode);\n    }\n\n    /// Prepends a [Block] of variant [INode](Block::INode), if `self` does not already contain a\n    /// Block of that variant.\n    fn optional_prepend_inode(&mut self) {\n        if !self.contains_inode() {\n            self.prepend_inode()\n        }\n    }\n\n    pub fn displays_size(&self) -> bool {\n        self.0.contains(&Block::Size)\n    }\n\n    /// Tnserts a [Block] of variant [INode](Block::Context), if `self` does not already contain a\n    /// [Block] of that variant. The positioning will be best-effort approximation of coreutils\n    /// ls position for a security context\n    fn optional_insert_context(&mut self) {\n        if self.0.contains(&Block::Context) {\n            return;\n        }\n        let mut pos = self.0.iter().position(|elem| *elem == Block::Group);\n        if pos.is_none() {\n            pos = self.0.iter().position(|elem| *elem == Block::User);\n        }\n        match pos {\n            Some(pos) => self.0.insert(pos + 1, Block::Context),\n            None => self.0.insert(0, Block::Context),\n        }\n    }\n}",
            "impl Default for Blocks {\n    fn default() -> Self {\n        Self(vec![Block::Name])\n    }\n}"
        ],
        "flags::color::Color": [
            "Clone",
            "Debug",
            "Default",
            "impl Color {\n    /// Get a `Color` struct from [ArgMatches], a [Config] or the [Default] values.\n    ///\n    /// The [ColorOption] is configured with their respective [Configurable] implementation.\n    pub fn configure_from(matches: &ArgMatches, config: &Config) -> Self {\n        let when = ColorOption::configure_from(matches, config);\n        let theme = ThemeOption::from_config(config);\n        Self { when, theme }\n    }\n}"
        ],
        "flags::color::ColorOption": [
            "Clone",
            "Copy",
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq",
            "impl ColorOption {\n    /// Get a Color value from a [String].\n    fn from_str(value: &str) -> Option<Self> {\n        match value {\n            \"always\" => Some(Self::Always),\n            \"auto\" => Some(Self::Auto),\n            \"never\" => Some(Self::Never),\n            _ => {\n                print_error!(\n                    \"Config color.when could only be one of auto, always and never, got {}.\",\n                    &value\n                );\n                None\n            }\n        }\n    }\n}",
            "impl Configurable<Self> for ColorOption {\n    /// Get a potential `ColorOption` variant from [ArgMatches].\n    ///\n    /// If the \"classic\" argument is passed, then this returns the [ColorOption::Never] variant in\n    /// a [Some]. Otherwise if the argument is passed, this returns the variant corresponding to\n    /// its parameter in a [Some]. Otherwise this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"classic\") {\n            Some(Self::Never)\n        } else if matches.occurrences_of(\"color\") > 0 {\n            if let Some(color) = matches.values_of(\"color\")?.last() {\n                Self::from_str(color)\n            } else {\n                panic!(\"Bad color args. This should not be reachable!\");\n            }\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `ColorOption` variant from a [Config].\n    ///\n    /// If the `Config::classic` is `true` then this returns the Some(ColorOption::Never),\n    /// Otherwise if the `Config::color::when` has value and is one of \"always\", \"auto\" or \"never\"\n    /// this returns its corresponding variant in a [Some]. Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        if let Some(true) = config.classic {\n            return Some(Self::Never);\n        }\n\n        if let Some(c) = &config.color {\n            c.when\n        } else {\n            None\n        }\n    }\n\n    fn from_environment() -> Option<Self> {\n        if env::var(\"NO_COLOR\").is_ok() {\n            Some(Self::Never)\n        } else {\n            None\n        }\n    }\n}",
            "impl Default for ColorOption {\n    fn default() -> Self {\n        Self::Auto\n    }\n}"
        ],
        "flags::color::ThemeOption": [
            "Clone",
            "Debug",
            "Eq",
            "PartialEq",
            "impl Default for ThemeOption {\n    fn default() -> Self {\n        ThemeOption::Default\n    }\n}",
            "impl ThemeOption {\n    fn from_config(config: &Config) -> ThemeOption {\n        if let Some(classic) = config.classic {\n            if classic {\n                return ThemeOption::NoColor;\n            }\n        }\n        if let Some(c) = &config.color {\n            if let Some(t) = &c.theme {\n                return t.clone();\n            }\n        }\n\n        ThemeOption::default()\n    }\n}",
            "impl<'de> de::Deserialize<'de> for ThemeOption {\n    fn deserialize<D>(deserializer: D) -> Result<ThemeOption, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        struct ThemeOptionVisitor;\n\n        impl<'de> Visitor<'de> for ThemeOptionVisitor {\n            type Value = ThemeOption;\n\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"`default` or <theme-file-path>\")\n            }\n\n            fn visit_str<E>(self, value: &str) -> Result<ThemeOption, E>\n            where\n                E: de::Error,\n            {\n                match value {\n                    \"default\" => Ok(ThemeOption::Default),\n                    str => Ok(ThemeOption::Custom(str.to_string())),\n                }\n            }\n        }\n\n        deserializer.deserialize_identifier(ThemeOptionVisitor)\n    }\n}"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field": [
            "Deserialize"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "flags::date::DateFlag": [
            "Clone",
            "Debug",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for DateFlag {\n    /// Get a potential `DateFlag` variant from [ArgMatches].\n    ///\n    /// If the \"classic\" argument is passed, then this returns the [DateFlag::Date] variant in a\n    /// [Some]. Otherwise if the argument is passed, this returns the variant corresponding to its\n    /// parameter in a [Some]. Otherwise this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"classic\") {\n            Some(Self::Date)\n        } else if matches.occurrences_of(\"date\") > 0 {\n            match matches.values_of(\"date\")?.last() {\n                Some(\"date\") => Some(Self::Date),\n                Some(\"relative\") => Some(Self::Relative),\n                Some(format) if format.starts_with('+') => {\n                    Some(Self::Formatted(format[1..].to_owned()))\n                }\n                _ => panic!(\"This should not be reachable!\"),\n            }\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `DateFlag` variant from a [Config].\n    ///\n    /// If the `Config::classic` is `true` then this returns the Some(DateFlag::Date),\n    /// Otherwise if the `Config::date` has value and is one of \"date\" or \"relative\",\n    /// this returns its corresponding variant in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        if let Some(true) = &config.classic {\n            return Some(Self::Date);\n        }\n\n        if let Some(date) = &config.date {\n            Self::from_str(date)\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `DateFlag` variant from the environment.\n    fn from_environment() -> Option<Self> {\n        if let Ok(value) = std::env::var(\"TIME_STYLE\") {\n            match value.as_str() {\n                \"full-iso\" => Some(Self::Formatted(\"%F %T.%f %z\".into())),\n                \"long-iso\" => Some(Self::Formatted(\"%F %R\".into())),\n                \"iso\" => Some(Self::Iso),\n                _ if value.starts_with('+') => Self::from_format_string(&value),\n                _ => {\n                    print_error!(\"Not a valid date value: {}.\", value);\n                    None\n                }\n            }\n        } else {\n            None\n        }\n    }\n}",
            "impl DateFlag {\n    /// Get a value from a date format string\n    fn from_format_string(value: &str) -> Option<Self> {\n        match app::validate_time_format(value) {\n            Ok(()) => Some(Self::Formatted(value[1..].to_string())),\n            _ => {\n                print_error!(\"Not a valid date format: {}.\", value);\n                None\n            }\n        }\n    }\n\n    /// Get a value from a str.\n    fn from_str(value: &str) -> Option<Self> {\n        match value {\n            \"date\" => Some(Self::Date),\n            \"relative\" => Some(Self::Relative),\n            _ if value.starts_with('+') => Self::from_format_string(value),\n            _ => {\n                print_error!(\"Not a valid date value: {}.\", value);\n                None\n            }\n        }\n    }\n}",
            "impl Default for DateFlag {\n    fn default() -> Self {\n        Self::Date\n    }\n}"
        ],
        "flags::dereference::Dereference": [
            "Clone",
            "Copy",
            "Debug",
            "Default",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for Dereference {\n    /// Get a potential `Dereference` value from [ArgMatches].\n    ///\n    /// If the \"dereference\" argument is passed, this returns a `Dereference` with value `true` in\n    /// a [Some]. Otherwise this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"dereference\") {\n            Some(Self(true))\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `Dereference` value from a [Config].\n    ///\n    /// If the `Config::dereference` has value, this returns its value\n    /// as the value of the `Dereference`, in a [Some], Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        config.dereference.as_ref().map(|deref| Self(*deref))\n    }\n}"
        ],
        "flags::display::Display": [
            "Clone",
            "Copy",
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for Display {\n    /// Get a potential `Display` variant from [ArgMatches].\n    ///\n    /// If any of the \"all\", \"almost-all\" or \"directory-only\" arguments is passed, this returns the\n    /// corresponding `Display` variant in a [Some]. If neither of them is passed, this returns\n    /// [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"directory-only\") {\n            Some(Self::DirectoryOnly)\n        } else if matches.is_present(\"almost-all\") {\n            Some(Self::AlmostAll)\n        } else if matches.is_present(\"all\") {\n            Some(Self::All)\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `Display` variant from a [Config].\n    ///\n    /// If the `Config::display` has value and is one of\n    /// \"all\", \"almost-all\", \"directory-only\" or `visible-only`,\n    /// this returns the corresponding `Display` variant in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        config.display\n    }\n}",
            "impl Default for Display {\n    fn default() -> Self {\n        Display::VisibleOnly\n    }\n}"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field": [
            "Deserialize"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "flags::hyperlink::HyperlinkOption": [
            "Clone",
            "Copy",
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for HyperlinkOption {\n    /// Get a potential `HyperlinkOption` variant from [ArgMatches].\n    ///\n    /// If the \"classic\" argument is passed, then this returns the [HyperlinkOption::Never] variant in\n    /// a [Some]. Otherwise if the argument is passed, this returns the variant corresponding to\n    /// its parameter in a [Some]. Otherwise this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"classic\") {\n            Some(Self::Never)\n        } else if matches.occurrences_of(\"hyperlink\") > 0 {\n            match matches.values_of(\"hyperlink\")?.last() {\n                Some(\"always\") => Some(Self::Always),\n                Some(\"auto\") => Some(Self::Auto),\n                Some(\"never\") => Some(Self::Never),\n                _ => panic!(\"This should not be reachable!\"),\n            }\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `HyperlinkOption` variant from a [Config].\n    ///\n    /// If the `Configs::classic` has value and is \"true\" then this returns Some(HyperlinkOption::Never).\n    /// Otherwise if the `Config::hyperlink::when` has value and is one of \"always\", \"auto\" or \"never\",\n    /// this returns its corresponding variant in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        if let Some(true) = &config.classic {\n            return Some(Self::Never);\n        }\n\n        config.hyperlink\n    }\n}",
            "impl Default for HyperlinkOption {\n    fn default() -> Self {\n        Self::Never\n    }\n}"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field": [
            "Deserialize"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "flags::icons::IconOption": [
            "Clone",
            "Copy",
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for IconOption {\n    /// Get a potential `IconOption` variant from [ArgMatches].\n    ///\n    /// If the \"classic\" argument is passed, then this returns the [IconOption::Never] variant in\n    /// a [Some]. Otherwise if the argument is passed, this returns the variant corresponding to\n    /// its parameter in a [Some]. Otherwise this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"classic\") {\n            Some(Self::Never)\n        } else if matches.occurrences_of(\"icon\") > 0 {\n            match matches.values_of(\"icon\")?.last() {\n                Some(\"always\") => Some(Self::Always),\n                Some(\"auto\") => Some(Self::Auto),\n                Some(\"never\") => Some(Self::Never),\n                _ => panic!(\"This should not be reachable!\"),\n            }\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `IconOption` variant from a [Config].\n    ///\n    /// If the `Configs::classic` has value and is \"true\" then this returns Some(IconOption::Never).\n    /// Otherwise if the `Config::icon::when` has value and is one of \"always\", \"auto\" or \"never\",\n    /// this returns its corresponding variant in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        if let Some(true) = &config.classic {\n            return Some(Self::Never);\n        }\n\n        if let Some(icon) = &config.icons {\n            icon.when\n        } else {\n            None\n        }\n    }\n}",
            "impl Default for IconOption {\n    fn default() -> Self {\n        Self::Auto\n    }\n}"
        ],
        "flags::icons::IconSeparator": [
            "Clone",
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for IconSeparator {\n    /// Get a potential `IconSeparator` variant from [ArgMatches].\n    ///\n    /// If the argument is passed, this returns the variant corresponding to its parameter in a\n    /// [Some]. Otherwise this returns [None].\n    fn from_arg_matches(_matches: &ArgMatches) -> Option<Self> {\n        None\n    }\n\n    /// Get a potential `IconSeparator` variant from a [Config].\n    ///\n    /// This returns its corresponding variant in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        if let Some(icon) = &config.icons {\n            if let Some(separator) = icon.separator.clone() {\n                return Some(IconSeparator(separator));\n            }\n        }\n        None\n    }\n}",
            "impl Default for IconSeparator {\n    fn default() -> Self {\n        IconSeparator(\" \".to_string())\n    }\n}"
        ],
        "flags::icons::IconTheme": [
            "Clone",
            "Copy",
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for IconTheme {\n    /// Get a potential `IconTheme` variant from [ArgMatches].\n    ///\n    /// If the argument is passed, this returns the variant corresponding to its parameter in a\n    /// [Some]. Otherwise this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.occurrences_of(\"icon-theme\") > 0 {\n            match matches.values_of(\"icon-theme\")?.last() {\n                Some(\"fancy\") => Some(Self::Fancy),\n                Some(\"unicode\") => Some(Self::Unicode),\n                _ => panic!(\"This should not be reachable!\"),\n            }\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `IconTheme` variant from a [Config].\n    ///\n    /// If the `Config::icons::theme` has value and is one of \"fancy\" or \"unicode\",\n    /// this returns its corresponding variant in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        if let Some(icon) = &config.icons {\n            if let Some(theme) = icon.theme {\n                return Some(theme);\n            }\n        }\n        None\n    }\n}",
            "impl Default for IconTheme {\n    fn default() -> Self {\n        Self::Fancy\n    }\n}"
        ],
        "flags::icons::Icons": [
            "Clone",
            "Debug",
            "Default",
            "Eq",
            "PartialEq",
            "impl Icons {\n    /// Get an `Icons` struct from [ArgMatches], a [Config] or the [Default] values.\n    ///\n    /// The [IconOption] and [IconTheme] are configured with their respective [Configurable]\n    /// implementation.\n    pub fn configure_from(matches: &ArgMatches, config: &Config) -> Self {\n        let when = IconOption::configure_from(matches, config);\n        let theme = IconTheme::configure_from(matches, config);\n        let separator = IconSeparator::configure_from(matches, config);\n        Self {\n            when,\n            theme,\n            separator,\n        }\n    }\n}"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field": [
            "Deserialize"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field": [
            "Deserialize"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "flags::ignore_globs::IgnoreGlobs": [
            "Clone",
            "Debug",
            "impl Default for IgnoreGlobs {\n    fn default() -> Self {\n        Self(GlobSet::empty())\n    }\n}",
            "impl IgnoreGlobs {\n    /// Returns a value from either [ArgMatches], a [Config] or a [Default] value. The first value\n    /// that is not [None] is used. The order of precedence for the value used is:\n    /// - [from_arg_matches](IgnoreGlobs::from_arg_matches)\n    /// - [from_config](IgnoreGlobs::from_config)\n    /// - [Default::default]\n    ///\n    /// # Errors\n    ///\n    /// If either of the [Glob::new] or [GlobSetBuilder.build] methods return an [Err].\n    pub fn configure_from(matches: &ArgMatches, config: &Config) -> Result<Self, Error> {\n        let mut result: Result<Self, Error> = Ok(Default::default());\n\n        if !matches.is_present(\"ignore-config\") {\n            if let Some(value) = Self::from_config(config) {\n                match value {\n                    Ok(glob_set) => result = Ok(Self(glob_set)),\n                    Err(err) => result = Err(err),\n                }\n            }\n        }\n\n        if let Some(value) = Self::from_arg_matches(matches) {\n            match value {\n                Ok(glob_set) => result = Ok(Self(glob_set)),\n                Err(err) => result = Err(err),\n            }\n        }\n\n        result\n    }\n\n    /// Get a potential [GlobSet] from [ArgMatches].\n    ///\n    /// If the \"ignore-glob\" argument has been passed, this returns a [Result] in a [Some] with\n    /// either the built [GlobSet] or an [Error], if any error was encountered while creating the\n    /// [GlobSet]. If the argument has not been passed, this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Result<GlobSet, Error>> {\n        if matches.occurrences_of(\"ignore-glob\") > 0 {\n            if let Some(values) = matches.values_of(\"ignore-glob\") {\n                let mut glob_set_builder = GlobSetBuilder::new();\n                for value in values {\n                    match Self::create_glob(value) {\n                        Ok(glob) => {\n                            glob_set_builder.add(glob);\n                        }\n                        Err(err) => return Some(Err(err)),\n                    }\n                }\n                Some(Self::create_glob_set(&glob_set_builder))\n            } else {\n                None\n            }\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential [GlobSet] from a [Config].\n    ///\n    /// If the `Config::ignore-globs` contains an Array of Strings,\n    /// each of its values is used to build the [GlobSet]. If the building\n    /// succeeds, the [GlobSet] is returned in the [Result] in a [Some]. If any error is\n    /// encountered while building, an [Error] is returned in the Result instead. If the Config does\n    /// not contain such a key, this returns [None].\n    fn from_config(config: &Config) -> Option<Result<GlobSet, Error>> {\n        if let Some(globs) = &config.ignore_globs {\n            let mut glob_set_builder = GlobSetBuilder::new();\n            for glob in globs.iter() {\n                match Self::create_glob(glob) {\n                    Ok(glob) => {\n                        glob_set_builder.add(glob);\n                    }\n                    Err(err) => return Some(Err(err)),\n                }\n            }\n            Some(Self::create_glob_set(&glob_set_builder))\n        } else {\n            None\n        }\n    }\n\n    /// Create a [Glob] from a provided pattern.\n    ///\n    /// This method is mainly a helper to wrap the handling of potential errors.\n    fn create_glob(pattern: &str) -> Result<Glob, Error> {\n        match Glob::new(pattern) {\n            Ok(glob) => Ok(glob),\n            Err(err) => Err(Error::with_description(\n                &err.to_string(),\n                ErrorKind::ValueValidation,\n            )),\n        }\n    }\n\n    /// Create a [GlobSet] from a provided [GlobSetBuilder].\n    ///\n    /// This method is mainly a helper to wrap the handling of potential errors.\n    fn create_glob_set(builder: &GlobSetBuilder) -> Result<GlobSet, Error> {\n        match builder.build() {\n            Ok(glob_set) => Ok(glob_set),\n            Err(err) => Err(Error::with_description(\n                &err.to_string(),\n                ErrorKind::ValueValidation,\n            )),\n        }\n    }\n}"
        ],
        "flags::indicators::Indicators": [
            "Clone",
            "Copy",
            "Debug",
            "Default",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for Indicators {\n    /// Get a potential `Indicators` value from [ArgMatches].\n    ///\n    /// If the \"indicators\" argument is passed, this returns an `Indicators` with value `true` in a\n    /// [Some]. Otherwise this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"indicators\") {\n            Some(Self(true))\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `Indicators` value from a [Config].\n    ///\n    /// If the `Config::indicators` has value,\n    /// this returns its value as the value of the `Indicators`, in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        config.indicators.as_ref().map(|ind| Self(*ind))\n    }\n}"
        ],
        "flags::layout::Layout": [
            "Clone",
            "Copy",
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq",
            "impl Configurable<Layout> for Layout {\n    /// Get a potential `Layout` variant from [ArgMatches].\n    ///\n    /// If any of the \"tree\", \"long\" or \"oneline\" arguments is passed, this returns the\n    /// corresponding `Layout` variant in a [Some]. Otherwise if the number of passed \"blocks\"\n    /// arguments is greater than 1, this also returns the [OneLine](Layout::OneLine) variant.\n    /// Finally if neither of them is passed, this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"tree\") {\n            Some(Self::Tree)\n        } else if matches.is_present(\"long\")\n            || matches.is_present(\"oneline\")\n            || matches.is_present(\"inode\")\n            || matches.is_present(\"context\")\n            || matches!(matches.values_of(\"blocks\"), Some(values) if values.len() > 1)\n        // TODO: handle this differently\n        {\n            Some(Self::OneLine)\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential Layout variant from a [Config].\n    ///\n    /// If the `Config::layout` has value and is one of \"tree\", \"oneline\" or \"grid\",\n    /// this returns the corresponding `Layout` variant in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        config.layout\n    }\n}",
            "impl Default for Layout {\n    fn default() -> Self {\n        Self::Grid\n    }\n}"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field": [
            "Deserialize"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "flags::permission::PermissionFlag": [
            "Clone",
            "Copy",
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for PermissionFlag {\n    /// Get a potential `PermissionFlag` variant from [ArgMatches].\n    ///\n    /// If any of the \"rwx\" or \"octal\" arguments is passed, the corresponding\n    /// `PermissionFlag` variant is returned in a [Some]. If neither of them is passed,\n    /// this returns [None].\n    /// Sets permissions to rwx if classic flag is enabled.\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"classic\") {\n            return Some(Self::Rwx);\n        } else if matches.occurrences_of(\"permission\") > 0 {\n            if let Some(permissions) = matches.values_of(\"permission\")?.last() {\n                return Self::from_str(permissions);\n            }\n        }\n        None\n    }\n\n    /// Get a potential `PermissionFlag` variant from a [Config].\n    ///\n    /// If the `Config::permissions` has value and is one of \"rwx\" or \"octal\",\n    /// this returns the corresponding `PermissionFlag` variant in a [Some].\n    /// Otherwise this returns [None].\n    /// Sets permissions to rwx if classic flag is enabled.\n    fn from_config(config: &Config) -> Option<Self> {\n        if let Some(true) = config.classic {\n            Some(Self::Rwx)\n        } else {\n            config.permission\n        }\n    }\n}",
            "impl Default for PermissionFlag {\n    fn default() -> Self {\n        Self::Rwx\n    }\n}",
            "impl PermissionFlag {\n    fn from_str(value: &str) -> Option<Self> {\n        match value {\n            \"rwx\" => Some(Self::Rwx),\n            \"octal\" => Some(Self::Octal),\n            _ => {\n                panic!(\n                    \"Permissions can only be one of rwx or octal, but got {}.\",\n                    value\n                );\n            }\n        }\n    }\n}"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field": [
            "Deserialize"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "flags::recursion::Recursion": [
            "Clone",
            "Copy",
            "Debug",
            "Eq",
            "PartialEq",
            "impl Default for Recursion {\n    fn default() -> Self {\n        Self {\n            depth: usize::max_value(),\n            enabled: false,\n        }\n    }\n}",
            "impl Recursion {\n    /// Get the Recursion from either [ArgMatches], a [Config] or the [Default] value.\n    ///\n    /// The \"enabled\" value is determined by [enabled_from](Recursion::enabled_from) and the depth\n    /// value is determined by [depth_from](Recursion::depth_from).\n    ///\n    /// # Errors\n    ///\n    /// If [depth_from](Recursion::depth_from) returns an [Error], this returns it.\n    pub fn configure_from(matches: &ArgMatches, config: &Config) -> Result<Self, Error> {\n        let enabled = Self::enabled_from(matches, config);\n        let depth = Self::depth_from(matches, config)?;\n        Ok(Self { enabled, depth })\n    }\n\n    /// Get the \"enabled\" boolean from [ArgMatches], a [Config] or the [Default] value. The first\n    /// value that is not [None] is used. The order of precedence for the value used is:\n    /// - [enabled_from_arg_matches](Recursion::enabled_from_arg_matches)\n    /// - [Config.recursion.enabled]\n    /// - [Default::default]\n    fn enabled_from(matches: &ArgMatches, config: &Config) -> bool {\n        if let Some(value) = Self::enabled_from_arg_matches(matches) {\n            return value;\n        }\n        if let Some(recursion) = &config.recursion {\n            if let Some(enabled) = recursion.enabled {\n                return enabled;\n            }\n        }\n\n        Default::default()\n    }\n\n    /// Get a potential \"enabled\" boolean from [ArgMatches].\n    ///\n    /// If the \"recursive\" argument is passed, this returns `true` in a [Some]. Otherwise this\n    /// returns [None].\n    fn enabled_from_arg_matches(matches: &ArgMatches) -> Option<bool> {\n        if matches.is_present(\"recursive\") {\n            Some(true)\n        } else {\n            None\n        }\n    }\n\n    /// Get the \"depth\" integer from [ArgMatches], a [Config] or the [Default] value. The first\n    /// value that is not [None] is used. The order of precedence for the value used is:\n    /// - [depth_from_arg_matches](Recursion::depth_from_arg_matches)\n    /// - [Config.recursion.depth]\n    /// - [Default::default]\n    ///\n    /// # Note\n    ///\n    /// If both configuration file and Args is error, this will return a Max-Uint value.\n    ///\n    /// # Errors\n    ///\n    /// If [depth_from_arg_matches](Recursion::depth_from_arg_matches) returns an [Error], this\n    /// returns it.\n    fn depth_from(matches: &ArgMatches, config: &Config) -> Result<usize, Error> {\n        if let Some(value) = Self::depth_from_arg_matches(matches) {\n            return value;\n        }\n\n        if let Some(recursion) = &config.recursion {\n            if let Some(depth) = recursion.depth {\n                return Ok(depth);\n            }\n        }\n\n        Ok(usize::max_value())\n    }\n\n    /// Get a potential \"depth\" value from [ArgMatches].\n    ///\n    /// If the \"depth\" argument is passed, its parameter is evaluated. If it can be parsed into a\n    /// [usize], the [Result] is returned in the [Some]. If it can not be parsed an [Error] is\n    /// returned in the [Some]. If the argument has not been passed, a [None] is returned.\n    ///\n    /// # Errors\n    ///\n    /// If the parameter to the \"depth\" argument can not be parsed, this returns an [Error] in a\n    /// [Some].\n    fn depth_from_arg_matches(matches: &ArgMatches) -> Option<Result<usize, Error>> {\n        let depth = match matches.values_of(\"depth\") {\n            Some(d) => d.last(),\n            None => None,\n        };\n        if let Some(str) = depth {\n            match str.parse::<usize>() {\n                Ok(value) => return Some(Ok(value)),\n                Err(_) => {\n                    return Some(Err(Error::with_description(\n                        \"The argument '--depth' requires a valid positive number.\",\n                        ErrorKind::ValueValidation,\n                    )))\n                }\n            }\n        }\n        None\n    }\n}"
        ],
        "flags::size::SizeFlag": [
            "Clone",
            "Copy",
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for SizeFlag {\n    /// Get a potential `SizeFlag` variant from [ArgMatches].\n    ///\n    /// If any of the \"default\", \"short\" or \"bytes\" arguments is passed, the corresponding\n    /// `SizeFlag` variant is returned in a [Some]. If neither of them is passed, this returns\n    /// [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"classic\") {\n            return Some(Self::Bytes);\n        } else if matches.occurrences_of(\"size\") > 0 {\n            if let Some(size) = matches.values_of(\"size\")?.last() {\n                return Self::from_str(size);\n            }\n        }\n        None\n    }\n\n    /// Get a potential `SizeFlag` variant from a [Config].\n    ///\n    /// If the `Config::size` has value and is one of \"default\", \"short\" or \"bytes\",\n    /// this returns the corresponding `SizeFlag` variant in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        if let Some(true) = config.classic {\n            Some(Self::Bytes)\n        } else {\n            config.size\n        }\n    }\n}",
            "impl Default for SizeFlag {\n    fn default() -> Self {\n        Self::Default\n    }\n}",
            "impl SizeFlag {\n    fn from_str(value: &str) -> Option<Self> {\n        match value {\n            \"default\" => Some(Self::Default),\n            \"short\" => Some(Self::Short),\n            \"bytes\" => Some(Self::Bytes),\n            _ => {\n                panic!(\n                    \"Size can only be one of default, short or bytes, but got {}.\",\n                    value\n                );\n            }\n        }\n    }\n}"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field": [
            "Deserialize"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "flags::sorting::DirGrouping": [
            "Clone",
            "Copy",
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for DirGrouping {\n    /// Get a potential `DirGrouping` variant from [ArgMatches].\n    ///\n    /// If the \"classic\" argument is passed, then this returns the [DirGrouping::None] variant in a\n    /// [Some]. Otherwise if the argument is passed, this returns the variant corresponding to its\n    /// parameter in a [Some]. Otherwise this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"classic\") {\n            return Some(Self::None);\n        }\n\n        if matches.is_present(\"group-directories-first\") {\n            return Some(Self::First);\n        }\n\n        if matches.occurrences_of(\"group-dirs\") > 0 {\n            if let Some(group_dirs) = matches.values_of(\"group-dirs\")?.last() {\n                return Self::from_str(group_dirs);\n            }\n        }\n        None\n    }\n\n    /// Get a potential `DirGrouping` variant from a [Config].\n    ///\n    /// If the `Config::classic` has value and is `true`,\n    /// then this returns the the [DirGrouping::None] variant in a [Some].\n    /// Otherwise if `Config::sorting::dir-grouping` has value and\n    /// is one of \"first\", \"last\" or \"none\", this returns its corresponding variant in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        if let Some(true) = config.classic {\n            return Some(Self::None);\n        }\n        if let Some(sort) = &config.sorting {\n            return sort.dir_grouping;\n        }\n        None\n    }\n}",
            "impl Default for DirGrouping {\n    fn default() -> Self {\n        Self::None\n    }\n}",
            "impl DirGrouping {\n    fn from_str(value: &str) -> Option<Self> {\n        match value {\n            \"first\" => Some(Self::First),\n            \"last\" => Some(Self::Last),\n            \"none\" => Some(Self::None),\n            _ => panic!(\n                \"Group Dir can only be one of first, last or none, but got {}.\",\n                value\n            ),\n        }\n    }\n}"
        ],
        "flags::sorting::SortColumn": [
            "Clone",
            "Copy",
            "Debug",
            "Deserialize",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for SortColumn {\n    /// Get a potential `SortColumn` variant from [ArgMatches].\n    ///\n    /// If either the \"timesort\" or \"sizesort\" arguments are passed, this returns the corresponding\n    /// `SortColumn` variant in a [Some]. Otherwise this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        let sort = match matches.values_of(\"sort\") {\n            Some(s) => s.last(),\n            None => None,\n        };\n        if matches.is_present(\"timesort\") || sort == Some(\"time\") {\n            Some(Self::Time)\n        } else if matches.is_present(\"sizesort\") || sort == Some(\"size\") {\n            Some(Self::Size)\n        } else if matches.is_present(\"extensionsort\") || sort == Some(\"extension\") {\n            Some(Self::Extension)\n        } else if matches.is_present(\"versionsort\") || sort == Some(\"version\") {\n            Some(Self::Version)\n        } else if matches.is_present(\"no-sort\") || sort == Some(\"none\") {\n            Some(Self::None)\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `SortColumn` variant from a [Config].\n    ///\n    /// If the `Config::sorting::column` has value and is one of \"time\", \"size\" or \"name\",\n    /// this returns the corresponding variant in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        if let Some(sort) = &config.sorting {\n            sort.column\n        } else {\n            None\n        }\n    }\n}",
            "impl Default for SortColumn {\n    fn default() -> Self {\n        Self::Name\n    }\n}"
        ],
        "flags::sorting::SortOrder": [
            "Clone",
            "Copy",
            "Debug",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for SortOrder {\n    /// Get a potential `SortOrder` variant from [ArgMatches].\n    ///\n    /// If the \"reverse\" argument is passed, this returns [SortOrder::Reverse] in a [Some].\n    /// Otherwise this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"reverse\") {\n            Some(Self::Reverse)\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `SortOrder` variant from a [Config].\n    ///\n    /// If the `Config::sorting::reverse` has value,\n    /// this returns a mapped variant in a [Some].\n    /// Otherwise [None] is returned.\n    /// A `true` maps to [SortOrder::Reverse] while `false` maps to [SortOrder::Default].\n    fn from_config(config: &Config) -> Option<Self> {\n        if let Some(sort) = &config.sorting {\n            if let Some(reverse) = sort.reverse {\n                if reverse {\n                    Some(Self::Reverse)\n                } else {\n                    Some(Self::Default)\n                }\n            } else {\n                None\n            }\n        } else {\n            None\n        }\n    }\n}",
            "impl Default for SortOrder {\n    fn default() -> Self {\n        Self::Default\n    }\n}"
        ],
        "flags::sorting::Sorting": [
            "Clone",
            "Copy",
            "Debug",
            "Default",
            "Eq",
            "PartialEq",
            "impl Sorting {\n    /// Get a `Sorting` struct from [ArgMatches], a [Config] or the [Default] values.\n    ///\n    /// The [SortColumn], [SortOrder] and [DirGrouping] are configured with their respective\n    /// [Configurable] implementation.\n    pub fn configure_from(matches: &ArgMatches, config: &Config) -> Self {\n        let column = SortColumn::configure_from(matches, config);\n        let order = SortOrder::configure_from(matches, config);\n        let dir_grouping = DirGrouping::configure_from(matches, config);\n        Self {\n            column,\n            order,\n            dir_grouping,\n        }\n    }\n}"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field": [
            "Deserialize"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field": [
            "Deserialize"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor": [
            "Deserialize"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor": [
            "Deserialize"
        ],
        "flags::symlink_arrow::SymlinkArrow": [
            "Clone",
            "Debug",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for SymlinkArrow {\n    /// `SymlinkArrow` can not be configured by [ArgMatches]\n    ///\n    /// Return `None`\n    fn from_arg_matches(_: &ArgMatches) -> Option<Self> {\n        None\n    }\n    /// Get a potential `SymlinkArrow` value from a [Config].\n    ///\n    /// If the `Config::symlink-arrow` has value,\n    /// returns its value as the value of the `SymlinkArrow`, in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        config\n            .symlink_arrow\n            .as_ref()\n            .map(|arrow| SymlinkArrow(arrow.to_string()))\n    }\n}",
            "impl Default for SymlinkArrow {\n    fn default() -> Self {\n        Self(String::from(\"\\u{21d2}\")) // ⇒\n    }\n}",
            "impl fmt::Display for SymlinkArrow {\n    // This trait requires `fmt` with this exact signature.\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"{}\", self.0)\n    }\n}"
        ],
        "flags::symlinks::NoSymlink": [
            "Clone",
            "Copy",
            "Debug",
            "Default",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for NoSymlink {\n    /// Get a potential `NoSymlink` value from [ArgMatches].\n    ///\n    /// If the \"no-symlink\" argument is passed, this returns a `NoSymlink` with value `true` in a\n    /// [Some]. Otherwise this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"no-symlink\") {\n            Some(Self(true))\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `NoSymlink` value from a [Config].\n    ///\n    /// If the `Config::no-symlink` has value,\n    /// this returns it as the value of the `NoSymlink`, in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        config.no_symlink.map(Self)\n    }\n}"
        ],
        "flags::total_size::TotalSize": [
            "Clone",
            "Copy",
            "Debug",
            "Default",
            "Eq",
            "PartialEq",
            "impl Configurable<Self> for TotalSize {\n    /// Get a potential `TotalSize` value from [ArgMatches].\n    ///\n    /// If the \"total-size\" argument is passed, this returns a `TotalSize` with value `true` in a\n    /// [Some]. Otherwise this returns [None].\n    fn from_arg_matches(matches: &ArgMatches) -> Option<Self> {\n        if matches.is_present(\"total-size\") {\n            Some(Self(true))\n        } else {\n            None\n        }\n    }\n\n    /// Get a potential `TotalSize` value from a [Config].\n    ///\n    /// If the `Config::total-size` has value,\n    /// this returns it as the value of the `TotalSize`, in a [Some].\n    /// Otherwise this returns [None].\n    fn from_config(config: &Config) -> Option<Self> {\n        config.total_size.map(Self)\n    }\n}"
        ],
        "icon::Icons": [
            "impl Icons {\n    pub fn new(theme: Theme, icon_separator: String) -> Self {\n        let display_icons = theme == Theme::Fancy || theme == Theme::Unicode;\n        let (icons_by_name, icons_by_extension, default_file_icon, default_folder_icon) =\n            if theme == Theme::Fancy {\n                (\n                    Self::get_default_icons_by_name(),\n                    Self::get_default_icons_by_extension(),\n                    \"\\u{f016}\", // \n                    \"\\u{f115}\", // \n                )\n            } else {\n                (\n                    HashMap::new(),\n                    HashMap::new(),\n                    \"\\u{1f5cb}\", // 🗋\n                    \"\\u{1f5c1}\", // 🗁\n                )\n            };\n\n        Self {\n            display_icons,\n            icons_by_name,\n            icons_by_extension,\n            default_file_icon,\n            default_folder_icon,\n            icon_separator,\n        }\n    }\n\n    pub fn get(&self, name: &Name) -> String {\n        if !self.display_icons {\n            return String::new();\n        }\n\n        // Check file types\n        let file_type: FileType = name.file_type();\n\n        let icon = if let FileType::Directory { .. } = file_type {\n            self.default_folder_icon\n        } else if let FileType::SymLink { is_dir: true } = file_type {\n            \"\\u{f482}\" // \"\"\n        } else if let FileType::SymLink { is_dir: false } = file_type {\n            \"\\u{f481}\" // \"\"\n        } else if let FileType::Socket = file_type {\n            \"\\u{f6a7}\" // \"\"\n        } else if let FileType::Pipe = file_type {\n            \"\\u{f731}\" // \"\"\n        } else if let FileType::CharDevice = file_type {\n            \"\\u{e601}\" // \"\"\n        } else if let FileType::BlockDevice = file_type {\n            \"\\u{fc29}\" // \"ﰩ\"\n        } else if let FileType::Special = file_type {\n            \"\\u{f2dc}\" // \"\"\n        } else if let Some(icon) = self\n            .icons_by_name\n            .get(name.file_name().to_lowercase().as_str())\n        {\n            // Use the known names.\n            icon\n        } else if let Some(icon) = name.extension().and_then(|extension| {\n            self.icons_by_extension\n                .get(extension.to_lowercase().as_str())\n        }) {\n            // Use the known extensions.\n            icon\n        } else {\n            // Use the default icons.\n            self.default_file_icon\n        };\n\n        format!(\"{}{}\", icon, self.icon_separator)\n    }\n\n    fn get_default_icons_by_name() -> HashMap<&'static str, &'static str> {\n        let mut m = HashMap::new();\n\n        // Note: filenames must be lower-case\n\n        m.insert(\".trash\", \"\\u{f1f8}\"); // \"\"\n        m.insert(\".atom\", \"\\u{e764}\"); // \"\"\n        m.insert(\".bashprofile\", \"\\u{e615}\"); // \"\"\n        m.insert(\".bashrc\", \"\\u{f489}\"); // \"\"\n        m.insert(\".clang-format\", \"\\u{e615}\"); // \"\"\n        m.insert(\".git\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\".gitattributes\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\".gitconfig\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\".github\", \"\\u{f408}\"); // \"\"\n        m.insert(\".gitignore\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\".gitmodules\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\".rvm\", \"\\u{e21e}\"); // \"\"\n        m.insert(\".vimrc\", \"\\u{e62b}\"); // \"\"\n        m.insert(\".vscode\", \"\\u{e70c}\"); // \"\"\n        m.insert(\".zshrc\", \"\\u{f489}\"); // \"\"\n        m.insert(\"bin\", \"\\u{e5fc}\"); // \"\"\n        m.insert(\"config\", \"\\u{e5fc}\"); // \"\"\n        m.insert(\"docker-compose.yml\", \"\\u{f308}\"); // \"\"\n        m.insert(\"dockerfile\", \"\\u{f308}\"); // \"\"\n        m.insert(\"ds_store\", \"\\u{f179}\"); // \"\"\n        m.insert(\"gitignore_global\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\"gradle\", \"\\u{e70e}\"); // \"\"\n        m.insert(\"gruntfile.coffee\", \"\\u{e611}\"); // \"\"\n        m.insert(\"gruntfile.js\", \"\\u{e611}\"); // \"\"\n        m.insert(\"gruntfile.ls\", \"\\u{e611}\"); // \"\"\n        m.insert(\"gulpfile.coffee\", \"\\u{e610}\"); // \"\"\n        m.insert(\"gulpfile.js\", \"\\u{e610}\"); // \"\"\n        m.insert(\"gulpfile.ls\", \"\\u{e610}\"); // \"\"\n        m.insert(\"hidden\", \"\\u{f023}\"); // \"\"\n        m.insert(\"include\", \"\\u{e5fc}\"); // \"\"\n        m.insert(\"lib\", \"\\u{f121}\"); // \"\"\n        m.insert(\"localized\", \"\\u{f179}\"); // \"\"\n        m.insert(\"node_modules\", \"\\u{e718}\"); // \"\"\n        m.insert(\"npmignore\", \"\\u{e71e}\"); // \"\"\n        m.insert(\"rubydoc\", \"\\u{e73b}\"); // \"\"\n\n        m\n    }\n\n    fn get_default_icons_by_extension() -> HashMap<&'static str, &'static str> {\n        let mut m = HashMap::new();\n\n        // Note: extensions must be lower-case\n\n        m.insert(\"7z\", \"\\u{f410}\"); // \"\"\n        m.insert(\"ai\", \"\\u{e7b4}\"); // \"\"\n        m.insert(\"apk\", \"\\u{e70e}\"); // \"\"\n        m.insert(\"avi\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"avro\", \"\\u{e60b}\"); // \"\"\n        m.insert(\"awk\", \"\\u{f489}\"); // \"\"\n        m.insert(\"bash\", \"\\u{f489}\"); // \"\"\n        m.insert(\"bash_history\", \"\\u{f489}\"); // \"\"\n        m.insert(\"bash_profile\", \"\\u{f489}\"); // \"\"\n        m.insert(\"bashrc\", \"\\u{f489}\"); // \"\"\n        m.insert(\"bat\", \"\\u{f17a}\"); // \"\"\n        m.insert(\"bio\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"bmp\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"bz2\", \"\\u{f410}\"); // \"\"\n        m.insert(\"c\", \"\\u{e61e}\"); // \"\"\n        m.insert(\"c++\", \"\\u{e61d}\"); // \"\"\n        m.insert(\"cc\", \"\\u{e61d}\"); // \"\"\n        m.insert(\"cfg\", \"\\u{e615}\"); // \"\"\n        m.insert(\"clj\", \"\\u{e768}\"); // \"\"\n        m.insert(\"cljs\", \"\\u{e76a}\"); // \"\"\n        m.insert(\"cls\", \"\\u{e600}\"); // \"\"\n        m.insert(\"coffee\", \"\\u{f0f4}\"); // \"\"\n        m.insert(\"conf\", \"\\u{e615}\"); // \"\"\n        m.insert(\"cp\", \"\\u{e61d}\"); // \"\"\n        m.insert(\"cpp\", \"\\u{e61d}\"); // \"\"\n        m.insert(\"cs\", \"\\u{f81a}\"); // \"\"\n        m.insert(\"cshtml\", \"\\u{f1fa}\"); // \"\"\n        m.insert(\"csproj\", \"\\u{f81a}\"); // \"\"\n        m.insert(\"csx\", \"\\u{f81a}\"); // \"\"\n        m.insert(\"csh\", \"\\u{f489}\"); // \"\"\n        m.insert(\"css\", \"\\u{e749}\"); // \"\"\n        m.insert(\"csv\", \"\\u{f1c3}\"); // \"\"\n        m.insert(\"cxx\", \"\\u{e61d}\"); // \"\"\n        m.insert(\"d\", \"\\u{e7af}\"); // \"\"\n        m.insert(\"dart\", \"\\u{e798}\"); // \"\"\n        m.insert(\"db\", \"\\u{f1c0}\"); // \"\"\n        m.insert(\"diff\", \"\\u{f440}\"); // \"\"\n        m.insert(\"doc\", \"\\u{f1c2}\"); // \"\"\n        m.insert(\"dockerfile\", \"\\u{f308}\"); // \"\"\n        m.insert(\"docx\", \"\\u{f1c2}\"); // \"\"\n        m.insert(\"ds_store\", \"\\u{f179}\"); // \"\"\n        m.insert(\"dump\", \"\\u{f1c0}\"); // \"\"\n        m.insert(\"ebook\", \"\\u{e28b}\"); // \"\"\n        m.insert(\"editorconfig\", \"\\u{e615}\"); // \"\"\n        m.insert(\"ejs\", \"\\u{e618}\"); // \"\"\n        m.insert(\"elm\", \"\\u{e62c}\"); // \"\"\n        m.insert(\"env\", \"\\u{f462}\"); // \"\"\n        m.insert(\"eot\", \"\\u{f031}\"); // \"\"\n        m.insert(\"epub\", \"\\u{e28a}\"); // \"\"\n        m.insert(\"erb\", \"\\u{e73b}\"); // \"\"\n        m.insert(\"erl\", \"\\u{e7b1}\"); // \"\"\n        m.insert(\"exe\", \"\\u{f17a}\"); // \"\"\n        m.insert(\"ex\", \"\\u{e62d}\"); // \"\"\n        m.insert(\"exs\", \"\\u{e62d}\"); // \"\"\n        m.insert(\"fish\", \"\\u{f489}\"); // \"\"\n        m.insert(\"flac\", \"\\u{f001}\"); // \"\"\n        m.insert(\"flv\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"font\", \"\\u{f031}\"); // \"\"\n        m.insert(\"fpl\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"fs\", \"\\u{e7a7}\"); // \"\"\n        m.insert(\"fsx\", \"\\u{e7a7}\"); // \"\"\n        m.insert(\"fsi\", \"\\u{e7a7}\"); // \"\"\n        m.insert(\"gdoc\", \"\\u{f1c2}\"); // \"\"\n        m.insert(\"gemfile\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"gemspec\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"gform\", \"\\u{f298}\"); // \"\"\n        m.insert(\"gif\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"git\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\"go\", \"\\u{e626}\"); // \"\"\n        m.insert(\"gradle\", \"\\u{e70e}\"); // \"\"\n        m.insert(\"gsheet\", \"\\u{f1c3}\"); // \"\"\n        m.insert(\"gslides\", \"\\u{f1c4}\"); // \"\"\n        m.insert(\"guardfile\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"gz\", \"\\u{f410}\"); // \"\"\n        m.insert(\"h\", \"\\u{f0fd}\"); // \"\"\n        m.insert(\"hbs\", \"\\u{e60f}\"); // \"\"\n        m.insert(\"heic\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"heif\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"heix\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"hpp\", \"\\u{f0fd}\"); // \"\"\n        m.insert(\"hs\", \"\\u{e777}\"); // \"\"\n        m.insert(\"htm\", \"\\u{f13b}\"); // \"\"\n        m.insert(\"html\", \"\\u{f13b}\"); // \"\"\n        m.insert(\"hxx\", \"\\u{f0fd}\"); // \"\"\n        m.insert(\"ico\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"image\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"iml\", \"\\u{e7b5}\"); // \"\"\n        m.insert(\"ini\", \"\\u{e615}\"); // \"\"\n        m.insert(\"ipynb\", \"\\u{e606}\"); // \"\"\n        m.insert(\"jar\", \"\\u{e204}\"); // \"\"\n        m.insert(\"java\", \"\\u{e204}\"); // \"\"\n        m.insert(\"jpeg\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"jpg\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"js\", \"\\u{e74e}\"); // \"\"\n        m.insert(\"json\", \"\\u{e60b}\"); // \"\"\n        m.insert(\"jsx\", \"\\u{e7ba}\"); // \"\"\n        m.insert(\"jl\", \"\\u{e624}\"); // \"\"\n        m.insert(\"ksh\", \"\\u{f489}\"); // \"\"\n        m.insert(\"less\", \"\\u{e758}\"); // \"\"\n        m.insert(\"lhs\", \"\\u{e777}\"); // \"\"\n        m.insert(\"license\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"localized\", \"\\u{f179}\"); // \"\"\n        m.insert(\"lock\", \"\\u{f023}\"); // \"\"\n        m.insert(\"log\", \"\\u{f18d}\"); // \"\"\n        m.insert(\"lua\", \"\\u{e620}\"); // \"\"\n        m.insert(\"lz\", \"\\u{f410}\"); // \"\"\n        m.insert(\"m3u\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"m3u8\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"m4a\", \"\\u{f001}\"); // \"\"\n        m.insert(\"magnet\", \"\\u{f076}\"); // \"\"\n        m.insert(\"markdown\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"md\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"mjs\", \"\\u{e74e}\"); // \"\"\n        m.insert(\"mkd\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"mkv\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"mobi\", \"\\u{e28b}\"); // \"\"\n        m.insert(\"mov\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"mp3\", \"\\u{f001}\"); // \"\"\n        m.insert(\"mp4\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"mustache\", \"\\u{e60f}\"); // \"\"\n        m.insert(\"nix\", \"\\u{f313}\"); // \"\"\n        m.insert(\"npmignore\", \"\\u{e71e}\"); // \"\"\n        m.insert(\"opus\", \"\\u{f001}\"); // \"\"\n        m.insert(\"ogg\", \"\\u{f001}\"); // \"\"\n        m.insert(\"ogv\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"otf\", \"\\u{f031}\"); // \"\"\n        m.insert(\"pdf\", \"\\u{f1c1}\"); // \"\"\n        m.insert(\"pem\", \"\\u{f805}\"); // \"\"\n        m.insert(\"php\", \"\\u{e73d}\"); // \"\"\n        m.insert(\"pl\", \"\\u{e769}\"); // \"\"\n        m.insert(\"pls\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"pm\", \"\\u{e769}\"); // \"\"\n        m.insert(\"png\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"ppt\", \"\\u{f1c4}\"); // \"\"\n        m.insert(\"pptx\", \"\\u{f1c4}\"); // \"\"\n        m.insert(\"procfile\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"properties\", \"\\u{e60b}\"); // \"\"\n        m.insert(\"ps1\", \"\\u{f489}\"); // \"\"\n        m.insert(\"psd\", \"\\u{e7b8}\"); // \"\"\n        m.insert(\"pxm\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"py\", \"\\u{e606}\"); // \"\"\n        m.insert(\"pyc\", \"\\u{e606}\"); // \"\"\n        m.insert(\"r\", \"\\u{f25d}\"); // \"\"\n        m.insert(\"rakefile\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"rar\", \"\\u{f410}\"); // \"\"\n        m.insert(\"razor\", \"\\u{f1fa}\"); // \"\"\n        m.insert(\"rb\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"rdata\", \"\\u{f25d}\"); // \"\"\n        m.insert(\"rdb\", \"\\u{e76d}\"); // \"\"\n        m.insert(\"rdoc\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"rds\", \"\\u{f25d}\"); // \"\"\n        m.insert(\"readme\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"rlib\", \"\\u{e7a8}\"); // \"\"\n        m.insert(\"rmd\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"rs\", \"\\u{e7a8}\"); // \"\"\n        m.insert(\"rspec\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"rspec_parallel\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"rspec_status\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"rss\", \"\\u{f09e}\"); // \"\"\n        m.insert(\"ru\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"rubydoc\", \"\\u{e73b}\"); // \"\"\n        m.insert(\"sass\", \"\\u{e603}\"); // \"\"\n        m.insert(\"scala\", \"\\u{e737}\"); // \"\"\n        m.insert(\"scpt\", \"\\u{f302}\"); // \"\"\n        m.insert(\"scss\", \"\\u{e749}\"); // \"\"\n        m.insert(\"sh\", \"\\u{f489}\"); // \"\"\n        m.insert(\"shell\", \"\\u{f489}\"); // \"\"\n        m.insert(\"slim\", \"\\u{e73b}\"); // \"\"\n        m.insert(\"sln\", \"\\u{e70c}\"); // \"\"\n        m.insert(\"sql\", \"\\u{f1c0}\"); // \"\"\n        m.insert(\"sqlite3\", \"\\u{e7c4}\"); // \"\"\n        m.insert(\"styl\", \"\\u{e600}\"); // \"\"\n        m.insert(\"stylus\", \"\\u{e600}\"); // \"\"\n        m.insert(\"svg\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"swift\", \"\\u{e755}\"); // \"\"\n        m.insert(\"t\", \"\\u{e769}\"); // \"\"\n        m.insert(\"tar\", \"\\u{f410}\"); // \"\"\n        m.insert(\"tex\", \"\\u{e600}\"); // \"\"\n        m.insert(\"tiff\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"toml\", \"\\u{e60b}\"); // \"\"\n        m.insert(\"torrent\", \"\\u{f98c}\"); // \"歷\"\n        m.insert(\"ts\", \"\\u{e628}\"); // \"\"\n        m.insert(\"tsx\", \"\\u{e7ba}\"); // \"\"\n        m.insert(\"ttc\", \"\\u{f031}\"); // \"\"\n        m.insert(\"ttf\", \"\\u{f031}\"); // \"\"\n        m.insert(\"twig\", \"\\u{e61c}\"); // \"\"\n        m.insert(\"txt\", \"\\u{f15c}\"); // \"\"\n        m.insert(\"video\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"vim\", \"\\u{e62b}\"); // \"\"\n        m.insert(\"vlc\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"vue\", \"\\u{fd42}\"); // \"﵂\"\n        m.insert(\"wav\", \"\\u{f001}\"); // \"\"\n        m.insert(\"webm\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"webp\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"windows\", \"\\u{f17a}\"); // \"\"\n        m.insert(\"wma\", \"\\u{f001}\"); // \"\"\n        m.insert(\"wmv\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"wpl\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"woff\", \"\\u{f031}\"); // \"\"\n        m.insert(\"woff2\", \"\\u{f031}\"); // \"\"\n        m.insert(\"xls\", \"\\u{f1c3}\"); // \"\"\n        m.insert(\"xlsx\", \"\\u{f1c3}\"); // \"\"\n        m.insert(\"xml\", \"\\u{e619}\"); // \"\"\n        m.insert(\"xul\", \"\\u{e619}\"); // \"\"\n        m.insert(\"xz\", \"\\u{f410}\"); // \"\"\n        m.insert(\"yaml\", \"\\u{e60b}\"); // \"\"\n        m.insert(\"yml\", \"\\u{e60b}\"); // \"\"\n        m.insert(\"zip\", \"\\u{f410}\"); // \"\"\n        m.insert(\"zsh\", \"\\u{f489}\"); // \"\"\n        m.insert(\"zsh-theme\", \"\\u{f489}\"); // \"\"\n        m.insert(\"zshrc\", \"\\u{f489}\"); // \"\"\n\n        m\n    }\n}"
        ],
        "icon::Theme": [
            "Clone",
            "Copy",
            "Debug",
            "Eq",
            "PartialEq"
        ],
        "meta::Meta": [
            "Clone",
            "Debug",
            "impl Meta {\n    pub fn recurse_into(\n        &self,\n        depth: usize,\n        flags: &Flags,\n    ) -> Result<Option<Vec<Meta>>, std::io::Error> {\n        if depth == 0 {\n            return Ok(None);\n        }\n\n        if flags.display == Display::DirectoryOnly && flags.layout != Layout::Tree {\n            return Ok(None);\n        }\n\n        match self.file_type {\n            FileType::Directory { .. } => (),\n            FileType::SymLink { is_dir: true } => {\n                if flags.layout == Layout::OneLine {\n                    return Ok(None);\n                }\n            }\n            _ => return Ok(None),\n        }\n\n        let entries = match self.path.read_dir() {\n            Ok(entries) => entries,\n            Err(err) => {\n                print_error!(\"{}: {}.\", self.path.display(), err);\n                return Ok(None);\n            }\n        };\n\n        let mut content: Vec<Meta> = Vec::new();\n\n        if Display::All == flags.display && flags.layout != Layout::Tree {\n            let mut current_meta = self.clone();\n            current_meta.name.name = \".\".to_owned();\n\n            let mut parent_meta =\n                Self::from_path(&self.path.join(Component::ParentDir), flags.dereference.0)?;\n            parent_meta.name.name = \"..\".to_owned();\n\n            content.push(current_meta);\n            content.push(parent_meta);\n        }\n\n        for entry in entries {\n            let entry = entry?;\n            let path = entry.path();\n\n            let name = path\n                .file_name()\n                .ok_or_else(|| Error::new(ErrorKind::InvalidInput, \"invalid file name\"))?;\n\n            if flags.ignore_globs.0.is_match(&name) {\n                continue;\n            }\n\n            if let Display::VisibleOnly = flags.display {\n                if name.to_string_lossy().starts_with('.') {\n                    continue;\n                }\n            }\n\n            let mut entry_meta = match Self::from_path(&path, flags.dereference.0) {\n                Ok(res) => res,\n                Err(err) => {\n                    print_error!(\"{}: {}.\", path.display(), err);\n                    continue;\n                }\n            };\n\n            // skip files for --tree -d\n            if flags.layout == Layout::Tree {\n                if let Display::DirectoryOnly = flags.display {\n                    if !entry.file_type()?.is_dir() {\n                        continue;\n                    }\n                }\n            }\n\n            let dereference =\n                !matches!(entry_meta.file_type, FileType::SymLink { .. }) || flags.dereference.0;\n            if dereference {\n                match entry_meta.recurse_into(depth - 1, flags) {\n                    Ok(content) => entry_meta.content = content,\n                    Err(err) => {\n                        print_error!(\"{}: {}.\", path.display(), err);\n                        continue;\n                    }\n                };\n            }\n\n            content.push(entry_meta);\n        }\n\n        Ok(Some(content))\n    }\n\n    pub fn calculate_total_size(&mut self) {\n        if let FileType::Directory { .. } = self.file_type {\n            if let Some(metas) = &mut self.content {\n                let mut size_accumulated = self.size.get_bytes();\n                for x in &mut metas.iter_mut() {\n                    x.calculate_total_size();\n                    size_accumulated += x.size.get_bytes();\n                }\n                self.size = Size::new(size_accumulated);\n            } else {\n                // possibility that 'depth' limited the recursion in 'recurse_into'\n                self.size = Size::new(Meta::calculate_total_file_size(&self.path));\n            }\n        }\n    }\n\n    fn calculate_total_file_size(path: &Path) -> u64 {\n        let metadata = path.symlink_metadata();\n        let metadata = match metadata {\n            Ok(meta) => meta,\n            Err(err) => {\n                print_error!(\"{}: {}.\", path.display(), err);\n                return 0;\n            }\n        };\n        let file_type = metadata.file_type();\n        if file_type.is_file() {\n            metadata.len()\n        } else if file_type.is_dir() {\n            let mut size = metadata.len();\n\n            let entries = match path.read_dir() {\n                Ok(entries) => entries,\n                Err(err) => {\n                    print_error!(\"{}: {}.\", path.display(), err);\n                    return size;\n                }\n            };\n            for entry in entries {\n                let path = match entry {\n                    Ok(entry) => entry.path(),\n                    Err(err) => {\n                        print_error!(\"{}: {}.\", path.display(), err);\n                        continue;\n                    }\n                };\n                size += Meta::calculate_total_file_size(&path);\n            }\n            size\n        } else {\n            0\n        }\n    }\n\n    pub fn from_path(path: &Path, dereference: bool) -> Result<Self, std::io::Error> {\n        let mut metadata = path.symlink_metadata()?;\n        let mut symlink_meta = None;\n        if metadata.file_type().is_symlink() {\n            match path.metadata() {\n                Ok(m) => {\n                    if dereference {\n                        metadata = m;\n                    } else {\n                        symlink_meta = Some(m);\n                    }\n                }\n                Err(e) => {\n                    // This case, it is definitely a symlink or\n                    // path.symlink_metadata would have errored out\n                    if dereference {\n                        return Err(e);\n                    }\n                }\n            }\n        }\n\n        #[cfg(unix)]\n        let owner = Owner::from(&metadata);\n        #[cfg(unix)]\n        let permissions = Permissions::from(&metadata);\n\n        #[cfg(windows)]\n        let (owner, permissions) = windows_utils::get_file_data(path)?;\n\n        let access_control = AccessControl::for_path(path);\n        let file_type = FileType::new(&metadata, symlink_meta.as_ref(), &permissions);\n        let name = Name::new(path, file_type);\n        let inode = INode::from(&metadata);\n        let links = Links::from(&metadata);\n\n        Ok(Self {\n            inode,\n            links,\n            path: path.to_path_buf(),\n            symlink: SymLink::from(path),\n            size: Size::from(&metadata),\n            date: Date::from(&metadata),\n            indicator: Indicator::from(file_type),\n            owner,\n            permissions,\n            name,\n            file_type,\n            content: None,\n            access_control,\n        })\n    }\n}"
        ],
        "meta::access_control::AccessControl": [
            "Clone",
            "Debug",
            "impl AccessControl {\n    #[cfg(not(unix))]\n    pub fn for_path(_: &Path) -> Self {\n        Self::from_data(false, &[], &[])\n    }\n\n    #[cfg(unix)]\n    pub fn for_path(path: &Path) -> Self {\n        let has_acl = !xattr::get(path, Method::Acl.name())\n            .unwrap_or_default()\n            .unwrap_or_default()\n            .is_empty();\n        let selinux_context = xattr::get(path, Method::Selinux.name())\n            .unwrap_or_default()\n            .unwrap_or_default();\n        let smack_context = xattr::get(path, Method::Smack.name())\n            .unwrap_or_default()\n            .unwrap_or_default();\n\n        Self::from_data(has_acl, &selinux_context, &smack_context)\n    }\n\n    fn from_data(has_acl: bool, selinux_context: &[u8], smack_context: &[u8]) -> Self {\n        let selinux_context = String::from_utf8_lossy(selinux_context).to_string();\n        let smack_context = String::from_utf8_lossy(smack_context).to_string();\n        Self {\n            has_acl,\n            selinux_context,\n            smack_context,\n        }\n    }\n\n    pub fn render_method(&self, colors: &Colors) -> ColoredString {\n        if self.has_acl {\n            colors.colorize(String::from(\"+\"), &Elem::Acl)\n        } else if !self.selinux_context.is_empty() || !self.smack_context.is_empty() {\n            colors.colorize(String::from(\".\"), &Elem::Context)\n        } else {\n            colors.colorize(String::from(\"\"), &Elem::Acl)\n        }\n    }\n\n    pub fn render_context(&self, colors: &Colors) -> ColoredString {\n        let mut context = self.selinux_context.clone();\n        if !self.smack_context.is_empty() {\n            if !context.is_empty() {\n                context += \"+\";\n            }\n            context += &self.smack_context;\n        }\n        if context.is_empty() {\n            context += \"?\";\n        }\n        colors.colorize(context, &Elem::Context)\n    }\n}"
        ],
        "meta::access_control::Method": [
            "impl Method {\n    fn name(&self) -> &'static str {\n        match self {\n            Method::Acl => \"system.posix_acl_access\",\n            Method::Selinux => \"security.selinux\",\n            Method::Smack => \"security.SMACK64\",\n        }\n    }\n}"
        ],
        "meta::date::Date": [
            "Clone",
            "Debug",
            "Eq",
            "Ord",
            "PartialEq",
            "PartialOrd",
            "impl Date {\n    pub fn render(&self, colors: &Colors, flags: &Flags) -> ColoredString {\n        let now = Local::now();\n        let elem = if let Date::Date(val) = self {\n            if *val > now - Duration::hours(1) {\n                Elem::HourOld\n            } else if *val > now - Duration::days(1) {\n                Elem::DayOld\n            } else {\n                Elem::Older\n            }\n        } else {\n            Elem::Older\n        };\n        colors.colorize(self.date_string(flags), &elem)\n    }\n\n    pub fn date_string(&self, flags: &Flags) -> String {\n        if let Date::Date(val) = self {\n            match &flags.date {\n                DateFlag::Date => val.format(\"%c\").to_string(),\n                DateFlag::Relative => format!(\"{}\", HumanTime::from(*val - Local::now())),\n                DateFlag::Iso => {\n                    // 365.2425 * 24 * 60 * 60 = 31556952 seconds per year\n                    // 15778476 seconds are 6 months\n                    if *val > Local::now() - Duration::seconds(15_778_476) {\n                        val.format(\"%m-%d %R\").to_string()\n                    } else {\n                        val.format(\"%F\").to_string()\n                    }\n                }\n                DateFlag::Formatted(format) => val.format(format).to_string(),\n            }\n        } else {\n            String::from(\"-\")\n        }\n    }\n}",
            "impl<'a> From<&'a Metadata> for Date {\n    fn from(meta: &'a Metadata) -> Self {\n        meta.modified()\n            .expect(\"failed to retrieve modified date\")\n            .into()\n    }\n}",
            "impl<'a> From<SystemTime> for Date {\n    fn from(systime: SystemTime) -> Self {\n        // FIXME: This should really involve a result, but there's upstream issues in chrono. See https://github.com/chronotope/chrono/issues/110\n        let res = panic::catch_unwind(|| systime.into());\n\n        if let Ok(time) = res {\n            Date::Date(time)\n        } else {\n            Date::Invalid\n        }\n    }\n}"
        ],
        "meta::filetype::FileType": [
            "Clone",
            "Copy",
            "Debug",
            "Eq",
            "PartialEq",
            "impl FileType {\n    #[cfg(unix)]\n    pub fn new(\n        meta: &Metadata,\n        symlink_meta: Option<&Metadata>,\n        permissions: &Permissions,\n    ) -> Self {\n        use std::os::unix::fs::FileTypeExt;\n\n        let file_type = meta.file_type();\n\n        if file_type.is_file() {\n            FileType::File {\n                exec: permissions.is_executable(),\n                uid: permissions.setuid,\n            }\n        } else if file_type.is_dir() {\n            FileType::Directory {\n                uid: permissions.setuid,\n            }\n        } else if file_type.is_fifo() {\n            FileType::Pipe\n        } else if file_type.is_symlink() {\n            FileType::SymLink {\n                // if broken, defaults to false\n                is_dir: symlink_meta.map(|m| m.is_dir()).unwrap_or_default(),\n            }\n        } else if file_type.is_char_device() {\n            FileType::CharDevice\n        } else if file_type.is_block_device() {\n            FileType::BlockDevice\n        } else if file_type.is_socket() {\n            FileType::Socket\n        } else {\n            FileType::Special\n        }\n    }\n\n    #[cfg(windows)]\n    pub fn new(\n        meta: &Metadata,\n        symlink_meta: Option<&Metadata>,\n        permissions: &Permissions,\n    ) -> Self {\n        let file_type = meta.file_type();\n\n        if file_type.is_file() {\n            FileType::File {\n                exec: permissions.is_executable(),\n                uid: permissions.setuid,\n            }\n        } else if file_type.is_dir() {\n            FileType::Directory {\n                uid: permissions.setuid,\n            }\n        } else if file_type.is_symlink() {\n            FileType::SymLink {\n                // if broken, defaults to false\n                is_dir: symlink_meta.map(|m| m.is_dir()).unwrap_or_default(),\n            }\n        } else {\n            FileType::Special\n        }\n    }\n\n    pub fn is_dirlike(self) -> bool {\n        matches!(\n            self,\n            FileType::Directory { .. } | FileType::SymLink { is_dir: true }\n        )\n    }\n}",
            "impl FileType {\n    pub fn render(self, colors: &Colors) -> ColoredString {\n        match self {\n            FileType::File { exec, .. } => {\n                colors.colorize(String::from(\".\"), &Elem::File { exec, uid: false })\n            }\n            FileType::Directory { .. } => {\n                colors.colorize(String::from(\"d\"), &Elem::Dir { uid: false })\n            }\n            FileType::Pipe => colors.colorize(String::from(\"|\"), &Elem::Pipe),\n            FileType::SymLink { .. } => colors.colorize(String::from(\"l\"), &Elem::SymLink),\n            FileType::BlockDevice => colors.colorize(String::from(\"b\"), &Elem::BlockDevice),\n            FileType::CharDevice => colors.colorize(String::from(\"c\"), &Elem::CharDevice),\n            FileType::Socket => colors.colorize(String::from(\"s\"), &Elem::Socket),\n            FileType::Special => colors.colorize(String::from(\"?\"), &Elem::Special),\n        }\n    }\n}"
        ],
        "meta::indicator::Indicator": [
            "Clone",
            "Debug",
            "impl From<FileType> for Indicator {\n    fn from(file_type: FileType) -> Self {\n        let res = match file_type {\n            FileType::Directory { .. } => \"/\",\n            FileType::File { exec: true, .. } => \"*\",\n            FileType::Pipe => \"|\",\n            FileType::Socket => \"=\",\n            FileType::SymLink { .. } => \"@\",\n            _ => \"\",\n        };\n\n        Indicator(res)\n    }\n}",
            "impl Indicator {\n    pub fn render(&self, flags: &Flags) -> ColoredString {\n        if flags.display_indicators.0 {\n            ColoredString::new(Colors::default_style(), self.0.to_string())\n        } else {\n            ColoredString::new(Colors::default_style(), \"\".into())\n        }\n    }\n}"
        ],
        "meta::inode::INode": [
            "Clone",
            "Copy",
            "Debug",
            "Eq",
            "PartialEq",
            "impl INode {\n    pub fn render(&self, colors: &Colors) -> ColoredString {\n        match self.index {\n            Some(i) => colors.colorize(i.to_string(), &Elem::INode { valid: true }),\n            None => colors.colorize(String::from(\"-\"), &Elem::INode { valid: false }),\n        }\n    }\n}",
            "impl<'a> From<&'a Metadata> for INode {\n    #[cfg(unix)]\n    fn from(meta: &Metadata) -> Self {\n        use std::os::unix::fs::MetadataExt;\n\n        let index = meta.ino();\n\n        Self { index: Some(index) }\n    }\n\n    #[cfg(windows)]\n    fn from(_: &Metadata) -> Self {\n        Self { index: None }\n    }\n}"
        ],
        "meta::links::Links": [
            "Clone",
            "Copy",
            "Debug",
            "Eq",
            "PartialEq",
            "impl Links {\n    pub fn render(&self, colors: &Colors) -> ColoredString {\n        match self.nlink {\n            Some(i) => colors.colorize(i.to_string(), &Elem::Links { valid: true }),\n            None => colors.colorize(String::from(\"-\"), &Elem::Links { valid: false }),\n        }\n    }\n}",
            "impl<'a> From<&'a Metadata> for Links {\n    #[cfg(unix)]\n    fn from(meta: &Metadata) -> Self {\n        use std::os::unix::fs::MetadataExt;\n\n        let nlink = meta.nlink();\n\n        Self { nlink: Some(nlink) }\n    }\n\n    #[cfg(windows)]\n    fn from(_: &Metadata) -> Self {\n        Self { nlink: None }\n    }\n}"
        ],
        "meta::name::DisplayOption": [
            "Debug"
        ],
        "meta::name::Name": [
            "Clone",
            "Debug",
            "Eq",
            "impl Name {\n    pub fn new(path: &Path, file_type: FileType) -> Self {\n        let name = match path.file_name() {\n            Some(name) => name.to_string_lossy().to_string(),\n            None => path.to_string_lossy().to_string(),\n        };\n\n        let extension = path\n            .extension()\n            .map(|ext| ext.to_string_lossy().to_string());\n\n        Self {\n            name,\n            path: PathBuf::from(path),\n            extension,\n            file_type,\n        }\n    }\n\n    pub fn file_name(&self) -> &str {\n        self.path\n            .file_name()\n            .and_then(OsStr::to_str)\n            .unwrap_or(&self.name)\n    }\n\n    fn relative_path<T: AsRef<Path> + Clone>(&self, base_path: T) -> PathBuf {\n        let base_path = base_path.as_ref();\n\n        if self.path == base_path {\n            return PathBuf::from(AsRef::<Path>::as_ref(&Component::CurDir));\n        }\n\n        let shared_components: PathBuf = self\n            .path\n            .components()\n            .zip(base_path.components())\n            .take_while(|(target_component, base_component)| target_component == base_component)\n            .map(|tuple| tuple.0)\n            .collect();\n\n        base_path\n            .strip_prefix(&shared_components)\n            .unwrap()\n            .components()\n            .map(|_| Component::ParentDir)\n            .chain(\n                self.path\n                    .strip_prefix(&shared_components)\n                    .unwrap()\n                    .components(),\n            )\n            .collect()\n    }\n\n    pub fn escape(&self, string: &str) -> String {\n        if string\n            .chars()\n            .all(|c| c >= 0x20 as char && c != 0x7f as char)\n        {\n            string.to_string()\n        } else {\n            let mut chars = String::new();\n            for c in string.chars() {\n                // The `escape_default` method on `char` is *almost* what we want here, but\n                // it still escapes non-ASCII UTF-8 characters, which are still printable.\n                if c >= 0x20 as char && c != 0x7f as char {\n                    chars.push(c);\n                } else {\n                    chars += &c.escape_default().collect::<String>();\n                }\n            }\n            chars\n        }\n    }\n\n    fn hyperlink(&self, name: String, hyperlink: HyperlinkOption) -> String {\n        match hyperlink {\n            HyperlinkOption::Always => {\n                // HyperlinkOption::Auto gets converted to None or Always in core.rs based on tty_available\n                match std::fs::canonicalize(&self.path) {\n                    Ok(rp) => {\n                        match Url::from_file_path(&rp) {\n                            Ok(url) => {\n                                // Crossterm does not support hyperlinks as of now\n                                // https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\n                                format!(\"\\x1B]8;;{}\\x1B\\x5C{}\\x1B]8;;\\x1B\\x5C\", url, name)\n                            }\n                            Err(_) => {\n                                print_error!(\"{}: unable to form url.\", name);\n                                name\n                            }\n                        }\n                    }\n                    Err(err) => {\n                        print_error!(\"{}: {}.\", name, err);\n                        name\n                    }\n                }\n            }\n            _ => name,\n        }\n    }\n\n    pub fn render(\n        &self,\n        colors: &Colors,\n        icons: &Icons,\n        display_option: &DisplayOption,\n        hyperlink: HyperlinkOption,\n    ) -> ColoredString {\n        let content = match display_option {\n            DisplayOption::FileName => {\n                format!(\n                    \"{}{}\",\n                    icons.get(self),\n                    self.hyperlink(self.escape(self.file_name()), hyperlink)\n                )\n            }\n            DisplayOption::Relative { base_path } => format!(\n                \"{}{}\",\n                icons.get(self),\n                self.hyperlink(\n                    self.escape(&self.relative_path(base_path).to_string_lossy()),\n                    hyperlink\n                )\n            ),\n            DisplayOption::None => format!(\n                \"{}{}\",\n                icons.get(self),\n                self.hyperlink(self.escape(&self.path.to_string_lossy()), hyperlink)\n            ),\n        };\n\n        let elem = match self.file_type {\n            FileType::CharDevice => Elem::CharDevice,\n            FileType::Directory { uid } => Elem::Dir { uid },\n            FileType::SymLink { .. } => Elem::SymLink,\n            FileType::File { uid, exec } => Elem::File { uid, exec },\n            _ => Elem::File {\n                exec: false,\n                uid: false,\n            },\n        };\n\n        colors.colorize_using_path(content, &self.path, &elem)\n    }\n\n    pub fn extension(&self) -> Option<&str> {\n        self.extension.as_deref()\n    }\n\n    pub fn file_type(&self) -> FileType {\n        self.file_type\n    }\n}",
            "impl Ord for Name {\n    fn cmp(&self, other: &Self) -> Ordering {\n        self.name.to_lowercase().cmp(&other.name.to_lowercase())\n    }\n}",
            "impl PartialEq for Name {\n    fn eq(&self, other: &Self) -> bool {\n        self.name.eq_ignore_ascii_case(&other.name.to_lowercase())\n    }\n}",
            "impl PartialOrd for Name {\n    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n        self.name\n            .to_lowercase()\n            .partial_cmp(&other.name.to_lowercase())\n    }\n}"
        ],
        "meta::owner::Owner": [
            "Clone",
            "Debug",
            "impl Owner {\n    #[cfg_attr(unix, allow(dead_code))]\n    pub fn new(user: String, group: String) -> Self {\n        Self { user, group }\n    }\n}",
            "impl Owner {\n    pub fn render_user(&self, colors: &Colors) -> ColoredString {\n        colors.colorize(self.user.clone(), &Elem::User)\n    }\n\n    pub fn render_group(&self, colors: &Colors) -> ColoredString {\n        colors.colorize(self.group.clone(), &Elem::Group)\n    }\n}",
            "impl<'a> From<&'a Metadata> for Owner {\n    fn from(meta: &Metadata) -> Self {\n        use std::os::unix::fs::MetadataExt;\n        use users::{get_group_by_gid, get_user_by_uid};\n\n        let user = match get_user_by_uid(meta.uid()) {\n            Some(res) => res.name().to_string_lossy().to_string(),\n            None => meta.uid().to_string(),\n        };\n\n        let group = match get_group_by_gid(meta.gid()) {\n            Some(res) => res.name().to_string_lossy().to_string(),\n            None => meta.gid().to_string(),\n        };\n\n        Self { user, group }\n    }\n}"
        ],
        "meta::permissions::Permissions": [
            "Clone",
            "Copy",
            "Debug",
            "Eq",
            "PartialEq",
            "impl Permissions {\n    fn bits_to_octal(r: bool, w: bool, x: bool) -> u8 {\n        (r as u8) * 4 + (w as u8) * 2 + (x as u8)\n    }\n\n    pub fn render(&self, colors: &Colors, flags: &Flags) -> ColoredString {\n        let bit = |bit, chr: &'static str, elem: &Elem| {\n            if bit {\n                colors.colorize(String::from(chr), elem)\n            } else {\n                colors.colorize(String::from(\"-\"), &Elem::NoAccess)\n            }\n        };\n\n        let strings = match flags.permission {\n            PermissionFlag::Rwx => vec![\n                // User permissions\n                bit(self.user_read, \"r\", &Elem::Read),\n                bit(self.user_write, \"w\", &Elem::Write),\n                match (self.user_execute, self.setuid) {\n                    (false, false) => colors.colorize(String::from(\"-\"), &Elem::NoAccess),\n                    (true, false) => colors.colorize(String::from(\"x\"), &Elem::Exec),\n                    (false, true) => colors.colorize(String::from(\"S\"), &Elem::ExecSticky),\n                    (true, true) => colors.colorize(String::from(\"s\"), &Elem::ExecSticky),\n                },\n                // Group permissions\n                bit(self.group_read, \"r\", &Elem::Read),\n                bit(self.group_write, \"w\", &Elem::Write),\n                match (self.group_execute, self.setgid) {\n                    (false, false) => colors.colorize(String::from(\"-\"), &Elem::NoAccess),\n                    (true, false) => colors.colorize(String::from(\"x\"), &Elem::Exec),\n                    (false, true) => colors.colorize(String::from(\"S\"), &Elem::ExecSticky),\n                    (true, true) => colors.colorize(String::from(\"s\"), &Elem::ExecSticky),\n                },\n                // Other permissions\n                bit(self.other_read, \"r\", &Elem::Read),\n                bit(self.other_write, \"w\", &Elem::Write),\n                match (self.other_execute, self.sticky) {\n                    (false, false) => colors.colorize(String::from(\"-\"), &Elem::NoAccess),\n                    (true, false) => colors.colorize(String::from(\"x\"), &Elem::Exec),\n                    (false, true) => colors.colorize(String::from(\"T\"), &Elem::ExecSticky),\n                    (true, true) => colors.colorize(String::from(\"t\"), &Elem::ExecSticky),\n                },\n            ],\n            PermissionFlag::Octal => {\n                let octal_sticky = Self::bits_to_octal(self.setuid, self.setgid, self.sticky);\n                let octal_user =\n                    Self::bits_to_octal(self.user_read, self.user_write, self.user_execute);\n                let octal_group =\n                    Self::bits_to_octal(self.group_read, self.group_write, self.group_execute);\n                let octal_other =\n                    Self::bits_to_octal(self.other_read, self.other_write, self.other_execute);\n                vec![colors.colorize(\n                    format!(\n                        \"{}{}{}{}\",\n                        octal_sticky, octal_user, octal_group, octal_other\n                    ),\n                    &Elem::Octal,\n                )]\n            }\n        };\n\n        let res = strings\n            .iter()\n            .map(|s| s.to_string())\n            .collect::<Vec<String>>()\n            .join(\"\");\n        ColoredString::new(Colors::default_style(), res)\n    }\n\n    pub fn is_executable(&self) -> bool {\n        self.user_execute || self.group_execute || self.other_execute\n    }\n}",
            "impl<'a> From<&'a Metadata> for Permissions {\n    #[cfg(unix)]\n    fn from(meta: &Metadata) -> Self {\n        use std::os::unix::fs::PermissionsExt;\n\n        let bits = meta.permissions().mode();\n        let has_bit = |bit| bits & bit == bit;\n\n        Self {\n            user_read: has_bit(modes::USER_READ),\n            user_write: has_bit(modes::USER_WRITE),\n            user_execute: has_bit(modes::USER_EXECUTE),\n\n            group_read: has_bit(modes::GROUP_READ),\n            group_write: has_bit(modes::GROUP_WRITE),\n            group_execute: has_bit(modes::GROUP_EXECUTE),\n\n            other_read: has_bit(modes::OTHER_READ),\n            other_write: has_bit(modes::OTHER_WRITE),\n            other_execute: has_bit(modes::OTHER_EXECUTE),\n\n            sticky: has_bit(modes::STICKY),\n            setgid: has_bit(modes::SETGID),\n            setuid: has_bit(modes::SETUID),\n        }\n    }\n\n    #[cfg(windows)]\n    fn from(_: &Metadata) -> Self {\n        panic!(\"Cannot get permissions from metadata on Windows\")\n    }\n}"
        ],
        "meta::size::Size": [
            "Clone",
            "Debug",
            "Eq",
            "PartialEq",
            "impl Size {\n    pub fn new(bytes: u64) -> Self {\n        Self { bytes }\n    }\n\n    pub fn get_bytes(&self) -> u64 {\n        self.bytes\n    }\n\n    fn format_size(&self, number: f64) -> String {\n        format!(\"{0:.1$}\", number, if number < 10.0 { 1 } else { 0 })\n    }\n\n    pub fn get_unit(&self, flags: &Flags) -> Unit {\n        if self.bytes < 1024 || flags.size == SizeFlag::Bytes {\n            Unit::Byte\n        } else if self.bytes < 1024 * 1024 {\n            Unit::Kilo\n        } else if self.bytes < 1024 * 1024 * 1024 {\n            Unit::Mega\n        } else if self.bytes < 1024 * 1024 * 1024 * 1024 {\n            Unit::Giga\n        } else {\n            Unit::Tera\n        }\n    }\n\n    pub fn render(\n        &self,\n        colors: &Colors,\n        flags: &Flags,\n        val_alignment: Option<usize>,\n    ) -> ColoredString {\n        let val_content = self.render_value(colors, flags);\n        let unit_content = self.render_unit(colors, flags);\n\n        let left_pad = if let Some(align) = val_alignment {\n            \" \".repeat(align - val_content.content().len())\n        } else {\n            \"\".to_string()\n        };\n\n        let mut strings: Vec<ColoredString> = vec![\n            ColoredString::new(Colors::default_style(), left_pad),\n            val_content,\n        ];\n        if flags.size != SizeFlag::Short {\n            strings.push(ColoredString::new(Colors::default_style(), \" \".into()));\n        }\n        strings.push(unit_content);\n\n        let res = strings\n            .into_iter()\n            .map(|s| s.to_string())\n            .collect::<Vec<String>>()\n            .join(\"\");\n        ColoredString::new(Colors::default_style(), res)\n    }\n\n    fn paint(&self, colors: &Colors, flags: &Flags, content: String) -> ColoredString {\n        let unit = self.get_unit(flags);\n\n        if unit == Unit::None {\n            colors.colorize(content, &Elem::NonFile)\n        } else if unit == Unit::Byte || unit == Unit::Kilo {\n            colors.colorize(content, &Elem::FileSmall)\n        } else if unit == Unit::Mega {\n            colors.colorize(content, &Elem::FileMedium)\n        } else {\n            colors.colorize(content, &Elem::FileLarge)\n        }\n    }\n\n    pub fn render_value(&self, colors: &Colors, flags: &Flags) -> ColoredString {\n        let content = self.value_string(flags);\n\n        self.paint(colors, flags, content)\n    }\n\n    pub fn value_string(&self, flags: &Flags) -> String {\n        let unit = self.get_unit(flags);\n\n        match unit {\n            Unit::None => \"\".to_string(),\n            Unit::Byte => self.bytes.to_string(),\n            Unit::Kilo => self.format_size(((self.bytes as f64) / 1024.0 * 10.0).round() / 10.0),\n            Unit::Mega => {\n                self.format_size(((self.bytes as f64) / (1024.0 * 1024.0) * 10.0).round() / 10.0)\n            }\n            Unit::Giga => self.format_size(\n                ((self.bytes as f64) / (1024.0 * 1024.0 * 1024.0) * 10.0).round() / 10.0,\n            ),\n            Unit::Tera => self.format_size(\n                ((self.bytes as f64) / (1024.0 * 1024.0 * 1024.0 * 1024.0) * 10.0).round() / 10.0,\n            ),\n        }\n    }\n\n    pub fn render_unit(&self, colors: &Colors, flags: &Flags) -> ColoredString {\n        let content = self.unit_string(flags);\n\n        self.paint(colors, flags, content)\n    }\n\n    pub fn unit_string(&self, flags: &Flags) -> String {\n        let unit = self.get_unit(flags);\n\n        match flags.size {\n            SizeFlag::Default => match unit {\n                Unit::None => String::from(\"-\"),\n                Unit::Byte => String::from(\"B\"),\n                Unit::Kilo => String::from(\"KB\"),\n                Unit::Mega => String::from(\"MB\"),\n                Unit::Giga => String::from(\"GB\"),\n                Unit::Tera => String::from(\"TB\"),\n            },\n            SizeFlag::Short => match unit {\n                Unit::None => String::from(\"-\"),\n                Unit::Byte => String::from(\"B\"),\n                Unit::Kilo => String::from(\"K\"),\n                Unit::Mega => String::from(\"M\"),\n                Unit::Giga => String::from(\"G\"),\n                Unit::Tera => String::from(\"T\"),\n            },\n            SizeFlag::Bytes => String::from(\"\"),\n        }\n    }\n}",
            "impl<'a> From<&'a Metadata> for Size {\n    fn from(meta: &Metadata) -> Self {\n        let len = meta.len();\n        Self { bytes: len }\n    }\n}"
        ],
        "meta::size::Unit": [
            "Clone",
            "Debug",
            "Eq",
            "PartialEq"
        ],
        "meta::symlink::SymLink": [
            "Clone",
            "Debug",
            "impl SymLink {\n    pub fn symlink_string(&self) -> Option<String> {\n        self.target.as_ref().map(|target| target.to_string())\n    }\n\n    pub fn render(&self, colors: &Colors, flag: &Flags) -> ColoredString {\n        if let Some(target_string) = self.symlink_string() {\n            let elem = if self.valid {\n                &Elem::SymLink\n            } else {\n                &Elem::MissingSymLinkTarget\n            };\n\n            let strings: &[ColoredString] = &[\n                ColoredString::new(Colors::default_style(), format!(\" {} \", flag.symlink_arrow)), // ⇒ \\u{21d2}\n                colors.colorize(target_string, elem),\n            ];\n\n            let res = strings\n                .iter()\n                .map(|s| s.to_string())\n                .collect::<Vec<String>>()\n                .join(\"\");\n            ColoredString::new(Colors::default_style(), res)\n        } else {\n            ColoredString::new(Colors::default_style(), \"\".into())\n        }\n    }\n}",
            "impl<'a> From<&'a Path> for SymLink {\n    fn from(path: &'a Path) -> Self {\n        if let Ok(target) = read_link(path) {\n            if target.is_absolute() || path.parent() == None {\n                return Self {\n                    valid: target.exists(),\n                    target: Some(\n                        target\n                            .to_str()\n                            .expect(\"failed to convert symlink to str\")\n                            .to_string(),\n                    ),\n                };\n            }\n\n            return Self {\n                target: Some(\n                    target\n                        .to_str()\n                        .expect(\"failed to convert symlink to str\")\n                        .to_string(),\n                ),\n                valid: path.parent().unwrap().join(target).exists(),\n            };\n        }\n\n        Self {\n            target: None,\n            valid: false,\n        }\n    }\n}"
        ]
    },
    "single_path_import": {
        "flags::blocks::Block": "flags::Block",
        "flags::blocks::Blocks": "flags::Blocks",
        "flags::color::Color": "flags::Color",
        "flags::color::ColorOption": "flags::ColorOption",
        "flags::color::ThemeOption": "flags::ThemeOption",
        "flags::date::DateFlag": "flags::DateFlag",
        "flags::dereference::Dereference": "flags::Dereference",
        "flags::display::Display": "flags::Display",
        "flags::hyperlink::HyperlinkOption": "flags::HyperlinkOption",
        "flags::icons::IconOption": "flags::IconOption",
        "flags::icons::IconSeparator": "flags::IconSeparator",
        "flags::icons::IconTheme": "flags::IconTheme",
        "flags::icons::Icons": "flags::Icons",
        "flags::ignore_globs::IgnoreGlobs": "flags::IgnoreGlobs",
        "flags::indicators::Indicators": "flags::Indicators",
        "flags::layout::Layout": "flags::Layout",
        "flags::permission::PermissionFlag": "flags::PermissionFlag",
        "flags::recursion::Recursion": "flags::Recursion",
        "flags::size::SizeFlag": "flags::SizeFlag",
        "flags::sorting::DirGrouping": "flags::DirGrouping",
        "flags::sorting::SortColumn": "flags::SortColumn",
        "flags::sorting::SortOrder": "flags::SortOrder",
        "flags::sorting::Sorting": "flags::Sorting",
        "flags::symlink_arrow::SymlinkArrow": "flags::SymlinkArrow",
        "flags::symlinks::NoSymlink": "flags::NoSymlink",
        "flags::total_size::TotalSize": "flags::TotalSize",
        "icon::Icons": "meta::Icons",
        "meta::access_control::AccessControl": "meta::AccessControl",
        "meta::date::Date": "meta::Date",
        "meta::filetype::FileType": "meta::FileType",
        "meta::indicator::Indicator": "meta::Indicator",
        "meta::inode::INode": "meta::INode",
        "meta::links::Links": "meta::Links",
        "meta::name::Name": "meta::Name",
        "meta::owner::Owner": "meta::Owner",
        "meta::permissions::Permissions": "meta::Permissions",
        "meta::size::Size": "meta::Size",
        "meta::symlink::SymLink": "meta::SymLink",
        "ntest::timeout": "timeout"
    },
    "srcs": {
        "<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result{\n                formatter.write_str(\"`default` or <theme-file-path>\")\n            }",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "fn visit_str<E>(self, value: &str) -> Result<ThemeOption, E>\n            where\n                E: de::Error,{\n                match value {\n                    \"default\" => Ok(ThemeOption::Default),\n                    str => Ok(ThemeOption::Custom(str.to_string())),\n                }\n            }",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "<color::theme::Date as std::default::Default>::default": [
            "fn default() -> Self{\n        Date {\n            hour_old: Color::AnsiValue(40), // Green3\n            day_old: Color::AnsiValue(42),  // SpringGreen2\n            older: Color::AnsiValue(36),    // DarkCyan\n        }\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "<color::theme::Dir as std::default::Default>::default": [
            "fn default() -> Self{\n        Dir {\n            uid: Color::AnsiValue(33),    // DodgerBlue1\n            no_uid: Color::AnsiValue(33), // DodgerBlue1\n        }\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "<color::theme::File as std::default::Default>::default": [
            "fn default() -> Self{\n        File {\n            exec_uid: Color::AnsiValue(40),        // Green3\n            uid_no_exec: Color::AnsiValue(184),    // Yellow3\n            exec_no_uid: Color::AnsiValue(40),     // Green3\n            no_exec_no_uid: Color::AnsiValue(184), // Yellow3\n        }\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "<color::theme::FileType as std::default::Default>::default": [
            "fn default() -> Self{\n        FileType {\n            file: File::default(),\n            dir: Dir::default(),\n            symlink: Symlink::default(),\n            pipe: Color::AnsiValue(44),         // DarkTurquoise\n            block_device: Color::AnsiValue(44), // DarkTurquoise\n            char_device: Color::AnsiValue(172), // Orange3\n            socket: Color::AnsiValue(44),       // DarkTurquoise\n            special: Color::AnsiValue(44),      // DarkTurquoise\n        }\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "<color::theme::INode as std::default::Default>::default": [
            "fn default() -> Self{\n        INode {\n            valid: Color::AnsiValue(13),    // Pink\n            invalid: Color::AnsiValue(245), // Grey\n        }\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "<color::theme::Links as std::default::Default>::default": [
            "fn default() -> Self{\n        Links {\n            valid: Color::AnsiValue(13),    // Pink\n            invalid: Color::AnsiValue(245), // Grey\n        }\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "<color::theme::Permission as std::default::Default>::default": [
            "fn default() -> Self{\n        Permission {\n            read: Color::DarkGreen,\n            write: Color::DarkYellow,\n            exec: Color::DarkRed,\n            exec_sticky: Color::AnsiValue(5),\n            no_access: Color::AnsiValue(245), // Grey\n            octal: Color::AnsiValue(6),\n            acl: Color::DarkCyan,\n            context: Color::Cyan,\n        }\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "<color::theme::Size as std::default::Default>::default": [
            "fn default() -> Self{\n        Size {\n            none: Color::AnsiValue(245),   // Grey\n            small: Color::AnsiValue(229),  // Wheat1\n            medium: Color::AnsiValue(216), // LightSalmon1\n            large: Color::AnsiValue(172),  // Orange3\n        }\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "<color::theme::Symlink as std::default::Default>::default": [
            "fn default() -> Self{\n        Symlink {\n            default: Color::AnsiValue(44),         // DarkTurquoise\n            broken: Color::AnsiValue(124),         // Red3\n            missing_target: Color::AnsiValue(124), // Red3\n        }\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "<color::theme::Theme as std::default::Default>::default": [
            "fn default() -> Self{\n        // TODO(zwpaper): check terminal color and return light or dark\n        Self::default_dark()\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "<config_file::Config as std::default::Default>::default": [
            "fn default() -> Self{\n        if let Some(p) = Self::config_file_path() {\n            if let Some(c) = Self::from_file(\n                p.join([CONF_FILE_NAME, YAML_LONG_EXT].join(\".\"))\n                    .to_string_lossy()\n                    .to_string(),\n            ) {\n                return c;\n            }\n        }\n        Self::from_yaml(DEFAULT_CONFIG).unwrap()\n    }",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "<flags::blocks::Block as std::convert::TryFrom<&str>>::try_from": [
            "fn try_from(string: &str) -> Result<Self, Self::Error>{\n        match string {\n            \"permission\" => Ok(Self::Permission),\n            \"user\" => Ok(Self::User),\n            \"group\" => Ok(Self::Group),\n            \"context\" => Ok(Self::Context),\n            \"size\" => Ok(Self::Size),\n            \"size_value\" => Ok(Self::SizeValue),\n            \"date\" => Ok(Self::Date),\n            \"name\" => Ok(Self::Name),\n            \"inode\" => Ok(Self::INode),\n            \"links\" => Ok(Self::Links),\n            _ => Err(format!(\"Not a valid block name: {}\", &string)),\n        }\n    }",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "<flags::blocks::Blocks as std::default::Default>::default": [
            "fn default() -> Self{\n        Self(vec![Block::Name])\n    }",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_arg_matches": [
            "/// Get a potential `ColorOption` variant from [ArgMatches].\n///\n/// If the \"classic\" argument is passed, then this returns the [ColorOption::Never] variant in\n/// a [Some]. Otherwise if the argument is passed, this returns the variant corresponding to\n/// its parameter in a [Some]. Otherwise this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"classic\") {\n            Some(Self::Never)\n        } else if matches.occurrences_of(\"color\") > 0 {\n            if let Some(color) = matches.values_of(\"color\")?.last() {\n                Self::from_str(color)\n            } else {\n                panic!(\"Bad color args. This should not be reachable!\");\n            }\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_config": [
            "/// Get a potential `ColorOption` variant from a [Config].\n///\n/// If the `Config::classic` is `true` then this returns the Some(ColorOption::Never),\n/// Otherwise if the `Config::color::when` has value and is one of \"always\", \"auto\" or \"never\"\n/// this returns its corresponding variant in a [Some]. Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        if let Some(true) = config.classic {\n            return Some(Self::Never);\n        }\n\n        if let Some(c) = &config.color {\n            c.when\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_environment": [
            "fn from_environment() -> Option<Self>{\n        if env::var(\"NO_COLOR\").is_ok() {\n            Some(Self::Never)\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "<flags::color::ColorOption as std::default::Default>::default": [
            "fn default() -> Self{\n        Self::Auto\n    }",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "fn deserialize<D>(deserializer: D) -> Result<ThemeOption, D::Error>\n    where\n        D: Deserializer<'de>,{\n        struct ThemeOptionVisitor;\n\n        impl<'de> Visitor<'de> for ThemeOptionVisitor {\n            type Value = ThemeOption;\n\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"`default` or <theme-file-path>\")\n            }\n\n            fn visit_str<E>(self, value: &str) -> Result<ThemeOption, E>\n            where\n                E: de::Error,\n            {\n                match value {\n                    \"default\" => Ok(ThemeOption::Default),\n                    str => Ok(ThemeOption::Custom(str.to_string())),\n                }\n            }\n        }\n\n        deserializer.deserialize_identifier(ThemeOptionVisitor)\n    }",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor": [
            "struct ThemeOptionVisitor;",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "<flags::color::ThemeOption as std::default::Default>::default": [
            "fn default() -> Self{\n        ThemeOption::Default\n    }",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_arg_matches": [
            "/// Get a potential `DateFlag` variant from [ArgMatches].\n///\n/// If the \"classic\" argument is passed, then this returns the [DateFlag::Date] variant in a\n/// [Some]. Otherwise if the argument is passed, this returns the variant corresponding to its\n/// parameter in a [Some]. Otherwise this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"classic\") {\n            Some(Self::Date)\n        } else if matches.occurrences_of(\"date\") > 0 {\n            match matches.values_of(\"date\")?.last() {\n                Some(\"date\") => Some(Self::Date),\n                Some(\"relative\") => Some(Self::Relative),\n                Some(format) if format.starts_with('+') => {\n                    Some(Self::Formatted(format[1..].to_owned()))\n                }\n                _ => panic!(\"This should not be reachable!\"),\n            }\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/date.rs\"))"
        ],
        "<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_config": [
            "/// Get a potential `DateFlag` variant from a [Config].\n///\n/// If the `Config::classic` is `true` then this returns the Some(DateFlag::Date),\n/// Otherwise if the `Config::date` has value and is one of \"date\" or \"relative\",\n/// this returns its corresponding variant in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        if let Some(true) = &config.classic {\n            return Some(Self::Date);\n        }\n\n        if let Some(date) = &config.date {\n            Self::from_str(date)\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/date.rs\"))"
        ],
        "<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_environment": [
            "/// Get a potential `DateFlag` variant from the environment.\nfn from_environment() -> Option<Self>{\n        if let Ok(value) = std::env::var(\"TIME_STYLE\") {\n            match value.as_str() {\n                \"full-iso\" => Some(Self::Formatted(\"%F %T.%f %z\".into())),\n                \"long-iso\" => Some(Self::Formatted(\"%F %R\".into())),\n                \"iso\" => Some(Self::Iso),\n                _ if value.starts_with('+') => Self::from_format_string(&value),\n                _ => {\n                    print_error!(\"Not a valid date value: {}.\", value);\n                    None\n                }\n            }\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/date.rs\"))"
        ],
        "<flags::date::DateFlag as std::default::Default>::default": [
            "fn default() -> Self{\n        Self::Date\n    }",
            "Real(LocalPath(\"src/flags/date.rs\"))"
        ],
        "<flags::dereference::Dereference as flags::Configurable<flags::dereference::Dereference>>::from_arg_matches": [
            "/// Get a potential `Dereference` value from [ArgMatches].\n///\n/// If the \"dereference\" argument is passed, this returns a `Dereference` with value `true` in\n/// a [Some]. Otherwise this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"dereference\") {\n            Some(Self(true))\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/dereference.rs\"))"
        ],
        "<flags::dereference::Dereference as flags::Configurable<flags::dereference::Dereference>>::from_config": [
            "/// Get a potential `Dereference` value from a [Config].\n///\n/// If the `Config::dereference` has value, this returns its value\n/// as the value of the `Dereference`, in a [Some], Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        config.dereference.as_ref().map(|deref| Self(*deref))\n    }",
            "Real(LocalPath(\"src/flags/dereference.rs\"))"
        ],
        "<flags::display::Display as flags::Configurable<flags::display::Display>>::from_arg_matches": [
            "/// Get a potential `Display` variant from [ArgMatches].\n///\n/// If any of the \"all\", \"almost-all\" or \"directory-only\" arguments is passed, this returns the\n/// corresponding `Display` variant in a [Some]. If neither of them is passed, this returns\n/// [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"directory-only\") {\n            Some(Self::DirectoryOnly)\n        } else if matches.is_present(\"almost-all\") {\n            Some(Self::AlmostAll)\n        } else if matches.is_present(\"all\") {\n            Some(Self::All)\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/display.rs\"))"
        ],
        "<flags::display::Display as flags::Configurable<flags::display::Display>>::from_config": [
            "/// Get a potential `Display` variant from a [Config].\n///\n/// If the `Config::display` has value and is one of\n/// \"all\", \"almost-all\", \"directory-only\" or `visible-only`,\n/// this returns the corresponding `Display` variant in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        config.display\n    }",
            "Real(LocalPath(\"src/flags/display.rs\"))"
        ],
        "<flags::display::Display as std::default::Default>::default": [
            "fn default() -> Self{\n        Display::VisibleOnly\n    }",
            "Real(LocalPath(\"src/flags/display.rs\"))"
        ],
        "<flags::hyperlink::HyperlinkOption as flags::Configurable<flags::hyperlink::HyperlinkOption>>::from_arg_matches": [
            "/// Get a potential `HyperlinkOption` variant from [ArgMatches].\n///\n/// If the \"classic\" argument is passed, then this returns the [HyperlinkOption::Never] variant in\n/// a [Some]. Otherwise if the argument is passed, this returns the variant corresponding to\n/// its parameter in a [Some]. Otherwise this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"classic\") {\n            Some(Self::Never)\n        } else if matches.occurrences_of(\"hyperlink\") > 0 {\n            match matches.values_of(\"hyperlink\")?.last() {\n                Some(\"always\") => Some(Self::Always),\n                Some(\"auto\") => Some(Self::Auto),\n                Some(\"never\") => Some(Self::Never),\n                _ => panic!(\"This should not be reachable!\"),\n            }\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/hyperlink.rs\"))"
        ],
        "<flags::hyperlink::HyperlinkOption as flags::Configurable<flags::hyperlink::HyperlinkOption>>::from_config": [
            "/// Get a potential `HyperlinkOption` variant from a [Config].\n///\n/// If the `Configs::classic` has value and is \"true\" then this returns Some(HyperlinkOption::Never).\n/// Otherwise if the `Config::hyperlink::when` has value and is one of \"always\", \"auto\" or \"never\",\n/// this returns its corresponding variant in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        if let Some(true) = &config.classic {\n            return Some(Self::Never);\n        }\n\n        config.hyperlink\n    }",
            "Real(LocalPath(\"src/flags/hyperlink.rs\"))"
        ],
        "<flags::hyperlink::HyperlinkOption as std::default::Default>::default": [
            "fn default() -> Self{\n        Self::Never\n    }",
            "Real(LocalPath(\"src/flags/hyperlink.rs\"))"
        ],
        "<flags::icons::IconOption as flags::Configurable<flags::icons::IconOption>>::from_arg_matches": [
            "/// Get a potential `IconOption` variant from [ArgMatches].\n///\n/// If the \"classic\" argument is passed, then this returns the [IconOption::Never] variant in\n/// a [Some]. Otherwise if the argument is passed, this returns the variant corresponding to\n/// its parameter in a [Some]. Otherwise this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"classic\") {\n            Some(Self::Never)\n        } else if matches.occurrences_of(\"icon\") > 0 {\n            match matches.values_of(\"icon\")?.last() {\n                Some(\"always\") => Some(Self::Always),\n                Some(\"auto\") => Some(Self::Auto),\n                Some(\"never\") => Some(Self::Never),\n                _ => panic!(\"This should not be reachable!\"),\n            }\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "<flags::icons::IconOption as flags::Configurable<flags::icons::IconOption>>::from_config": [
            "/// Get a potential `IconOption` variant from a [Config].\n///\n/// If the `Configs::classic` has value and is \"true\" then this returns Some(IconOption::Never).\n/// Otherwise if the `Config::icon::when` has value and is one of \"always\", \"auto\" or \"never\",\n/// this returns its corresponding variant in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        if let Some(true) = &config.classic {\n            return Some(Self::Never);\n        }\n\n        if let Some(icon) = &config.icons {\n            icon.when\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "<flags::icons::IconOption as std::default::Default>::default": [
            "fn default() -> Self{\n        Self::Auto\n    }",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "<flags::icons::IconSeparator as flags::Configurable<flags::icons::IconSeparator>>::from_arg_matches": [
            "/// Get a potential `IconSeparator` variant from [ArgMatches].\n///\n/// If the argument is passed, this returns the variant corresponding to its parameter in a\n/// [Some]. Otherwise this returns [None].\nfn from_arg_matches(_matches: &ArgMatches) -> Option<Self>{\n        None\n    }",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "<flags::icons::IconSeparator as flags::Configurable<flags::icons::IconSeparator>>::from_config": [
            "/// Get a potential `IconSeparator` variant from a [Config].\n///\n/// This returns its corresponding variant in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        if let Some(icon) = &config.icons {\n            if let Some(separator) = icon.separator.clone() {\n                return Some(IconSeparator(separator));\n            }\n        }\n        None\n    }",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "<flags::icons::IconSeparator as std::default::Default>::default": [
            "fn default() -> Self{\n        IconSeparator(\" \".to_string())\n    }",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "<flags::icons::IconTheme as flags::Configurable<flags::icons::IconTheme>>::from_arg_matches": [
            "/// Get a potential `IconTheme` variant from [ArgMatches].\n///\n/// If the argument is passed, this returns the variant corresponding to its parameter in a\n/// [Some]. Otherwise this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.occurrences_of(\"icon-theme\") > 0 {\n            match matches.values_of(\"icon-theme\")?.last() {\n                Some(\"fancy\") => Some(Self::Fancy),\n                Some(\"unicode\") => Some(Self::Unicode),\n                _ => panic!(\"This should not be reachable!\"),\n            }\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "<flags::icons::IconTheme as flags::Configurable<flags::icons::IconTheme>>::from_config": [
            "/// Get a potential `IconTheme` variant from a [Config].\n///\n/// If the `Config::icons::theme` has value and is one of \"fancy\" or \"unicode\",\n/// this returns its corresponding variant in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        if let Some(icon) = &config.icons {\n            if let Some(theme) = icon.theme {\n                return Some(theme);\n            }\n        }\n        None\n    }",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "<flags::icons::IconTheme as std::default::Default>::default": [
            "fn default() -> Self{\n        Self::Fancy\n    }",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "<flags::ignore_globs::IgnoreGlobs as std::default::Default>::default": [
            "fn default() -> Self{\n        Self(GlobSet::empty())\n    }",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))"
        ],
        "<flags::indicators::Indicators as flags::Configurable<flags::indicators::Indicators>>::from_arg_matches": [
            "/// Get a potential `Indicators` value from [ArgMatches].\n///\n/// If the \"indicators\" argument is passed, this returns an `Indicators` with value `true` in a\n/// [Some]. Otherwise this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"indicators\") {\n            Some(Self(true))\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/indicators.rs\"))"
        ],
        "<flags::indicators::Indicators as flags::Configurable<flags::indicators::Indicators>>::from_config": [
            "/// Get a potential `Indicators` value from a [Config].\n///\n/// If the `Config::indicators` has value,\n/// this returns its value as the value of the `Indicators`, in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        config.indicators.as_ref().map(|ind| Self(*ind))\n    }",
            "Real(LocalPath(\"src/flags/indicators.rs\"))"
        ],
        "<flags::layout::Layout as flags::Configurable<flags::layout::Layout>>::from_arg_matches": [
            "/// Get a potential `Layout` variant from [ArgMatches].\n///\n/// If any of the \"tree\", \"long\" or \"oneline\" arguments is passed, this returns the\n/// corresponding `Layout` variant in a [Some]. Otherwise if the number of passed \"blocks\"\n/// arguments is greater than 1, this also returns the [OneLine](Layout::OneLine) variant.\n/// Finally if neither of them is passed, this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"tree\") {\n            Some(Self::Tree)\n        } else if matches.is_present(\"long\")\n            || matches.is_present(\"oneline\")\n            || matches.is_present(\"inode\")\n            || matches.is_present(\"context\")\n            || matches!(matches.values_of(\"blocks\"), Some(values) if values.len() > 1)\n        // TODO: handle this differently\n        {\n            Some(Self::OneLine)\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/layout.rs\"))"
        ],
        "<flags::layout::Layout as flags::Configurable<flags::layout::Layout>>::from_config": [
            "/// Get a potential Layout variant from a [Config].\n///\n/// If the `Config::layout` has value and is one of \"tree\", \"oneline\" or \"grid\",\n/// this returns the corresponding `Layout` variant in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        config.layout\n    }",
            "Real(LocalPath(\"src/flags/layout.rs\"))"
        ],
        "<flags::layout::Layout as std::default::Default>::default": [
            "fn default() -> Self{\n        Self::Grid\n    }",
            "Real(LocalPath(\"src/flags/layout.rs\"))"
        ],
        "<flags::permission::PermissionFlag as flags::Configurable<flags::permission::PermissionFlag>>::from_arg_matches": [
            "/// Get a potential `PermissionFlag` variant from [ArgMatches].\n///\n/// If any of the \"rwx\" or \"octal\" arguments is passed, the corresponding\n/// `PermissionFlag` variant is returned in a [Some]. If neither of them is passed,\n/// this returns [None].\n/// Sets permissions to rwx if classic flag is enabled.\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"classic\") {\n            return Some(Self::Rwx);\n        } else if matches.occurrences_of(\"permission\") > 0 {\n            if let Some(permissions) = matches.values_of(\"permission\")?.last() {\n                return Self::from_str(permissions);\n            }\n        }\n        None\n    }",
            "Real(LocalPath(\"src/flags/permission.rs\"))"
        ],
        "<flags::permission::PermissionFlag as flags::Configurable<flags::permission::PermissionFlag>>::from_config": [
            "/// Get a potential `PermissionFlag` variant from a [Config].\n///\n/// If the `Config::permissions` has value and is one of \"rwx\" or \"octal\",\n/// this returns the corresponding `PermissionFlag` variant in a [Some].\n/// Otherwise this returns [None].\n/// Sets permissions to rwx if classic flag is enabled.\nfn from_config(config: &Config) -> Option<Self>{\n        if let Some(true) = config.classic {\n            Some(Self::Rwx)\n        } else {\n            config.permission\n        }\n    }",
            "Real(LocalPath(\"src/flags/permission.rs\"))"
        ],
        "<flags::permission::PermissionFlag as std::default::Default>::default": [
            "fn default() -> Self{\n        Self::Rwx\n    }",
            "Real(LocalPath(\"src/flags/permission.rs\"))"
        ],
        "<flags::recursion::Recursion as std::default::Default>::default": [
            "fn default() -> Self{\n        Self {\n            depth: usize::max_value(),\n            enabled: false,\n        }\n    }",
            "Real(LocalPath(\"src/flags/recursion.rs\"))"
        ],
        "<flags::size::SizeFlag as flags::Configurable<flags::size::SizeFlag>>::from_arg_matches": [
            "/// Get a potential `SizeFlag` variant from [ArgMatches].\n///\n/// If any of the \"default\", \"short\" or \"bytes\" arguments is passed, the corresponding\n/// `SizeFlag` variant is returned in a [Some]. If neither of them is passed, this returns\n/// [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"classic\") {\n            return Some(Self::Bytes);\n        } else if matches.occurrences_of(\"size\") > 0 {\n            if let Some(size) = matches.values_of(\"size\")?.last() {\n                return Self::from_str(size);\n            }\n        }\n        None\n    }",
            "Real(LocalPath(\"src/flags/size.rs\"))"
        ],
        "<flags::size::SizeFlag as flags::Configurable<flags::size::SizeFlag>>::from_config": [
            "/// Get a potential `SizeFlag` variant from a [Config].\n///\n/// If the `Config::size` has value and is one of \"default\", \"short\" or \"bytes\",\n/// this returns the corresponding `SizeFlag` variant in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        if let Some(true) = config.classic {\n            Some(Self::Bytes)\n        } else {\n            config.size\n        }\n    }",
            "Real(LocalPath(\"src/flags/size.rs\"))"
        ],
        "<flags::size::SizeFlag as std::default::Default>::default": [
            "fn default() -> Self{\n        Self::Default\n    }",
            "Real(LocalPath(\"src/flags/size.rs\"))"
        ],
        "<flags::sorting::DirGrouping as flags::Configurable<flags::sorting::DirGrouping>>::from_arg_matches": [
            "/// Get a potential `DirGrouping` variant from [ArgMatches].\n///\n/// If the \"classic\" argument is passed, then this returns the [DirGrouping::None] variant in a\n/// [Some]. Otherwise if the argument is passed, this returns the variant corresponding to its\n/// parameter in a [Some]. Otherwise this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"classic\") {\n            return Some(Self::None);\n        }\n\n        if matches.is_present(\"group-directories-first\") {\n            return Some(Self::First);\n        }\n\n        if matches.occurrences_of(\"group-dirs\") > 0 {\n            if let Some(group_dirs) = matches.values_of(\"group-dirs\")?.last() {\n                return Self::from_str(group_dirs);\n            }\n        }\n        None\n    }",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "<flags::sorting::DirGrouping as flags::Configurable<flags::sorting::DirGrouping>>::from_config": [
            "/// Get a potential `DirGrouping` variant from a [Config].\n///\n/// If the `Config::classic` has value and is `true`,\n/// then this returns the the [DirGrouping::None] variant in a [Some].\n/// Otherwise if `Config::sorting::dir-grouping` has value and\n/// is one of \"first\", \"last\" or \"none\", this returns its corresponding variant in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        if let Some(true) = config.classic {\n            return Some(Self::None);\n        }\n        if let Some(sort) = &config.sorting {\n            return sort.dir_grouping;\n        }\n        None\n    }",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "<flags::sorting::DirGrouping as std::default::Default>::default": [
            "fn default() -> Self{\n        Self::None\n    }",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "<flags::sorting::SortColumn as flags::Configurable<flags::sorting::SortColumn>>::from_arg_matches": [
            "/// Get a potential `SortColumn` variant from [ArgMatches].\n///\n/// If either the \"timesort\" or \"sizesort\" arguments are passed, this returns the corresponding\n/// `SortColumn` variant in a [Some]. Otherwise this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        let sort = match matches.values_of(\"sort\") {\n            Some(s) => s.last(),\n            None => None,\n        };\n        if matches.is_present(\"timesort\") || sort == Some(\"time\") {\n            Some(Self::Time)\n        } else if matches.is_present(\"sizesort\") || sort == Some(\"size\") {\n            Some(Self::Size)\n        } else if matches.is_present(\"extensionsort\") || sort == Some(\"extension\") {\n            Some(Self::Extension)\n        } else if matches.is_present(\"versionsort\") || sort == Some(\"version\") {\n            Some(Self::Version)\n        } else if matches.is_present(\"no-sort\") || sort == Some(\"none\") {\n            Some(Self::None)\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "<flags::sorting::SortColumn as flags::Configurable<flags::sorting::SortColumn>>::from_config": [
            "/// Get a potential `SortColumn` variant from a [Config].\n///\n/// If the `Config::sorting::column` has value and is one of \"time\", \"size\" or \"name\",\n/// this returns the corresponding variant in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        if let Some(sort) = &config.sorting {\n            sort.column\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "<flags::sorting::SortColumn as std::default::Default>::default": [
            "fn default() -> Self{\n        Self::Name\n    }",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "<flags::sorting::SortOrder as flags::Configurable<flags::sorting::SortOrder>>::from_arg_matches": [
            "/// Get a potential `SortOrder` variant from [ArgMatches].\n///\n/// If the \"reverse\" argument is passed, this returns [SortOrder::Reverse] in a [Some].\n/// Otherwise this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"reverse\") {\n            Some(Self::Reverse)\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "<flags::sorting::SortOrder as flags::Configurable<flags::sorting::SortOrder>>::from_config": [
            "/// Get a potential `SortOrder` variant from a [Config].\n///\n/// If the `Config::sorting::reverse` has value,\n/// this returns a mapped variant in a [Some].\n/// Otherwise [None] is returned.\n/// A `true` maps to [SortOrder::Reverse] while `false` maps to [SortOrder::Default].\nfn from_config(config: &Config) -> Option<Self>{\n        if let Some(sort) = &config.sorting {\n            if let Some(reverse) = sort.reverse {\n                if reverse {\n                    Some(Self::Reverse)\n                } else {\n                    Some(Self::Default)\n                }\n            } else {\n                None\n            }\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "<flags::sorting::SortOrder as std::default::Default>::default": [
            "fn default() -> Self{\n        Self::Default\n    }",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "<flags::symlink_arrow::SymlinkArrow as flags::Configurable<flags::symlink_arrow::SymlinkArrow>>::from_arg_matches": [
            "/// `SymlinkArrow` can not be configured by [ArgMatches]\n///\n/// Return `None`\nfn from_arg_matches(_: &ArgMatches) -> Option<Self>{\n        None\n    }",
            "Real(LocalPath(\"src/flags/symlink_arrow.rs\"))"
        ],
        "<flags::symlink_arrow::SymlinkArrow as flags::Configurable<flags::symlink_arrow::SymlinkArrow>>::from_config": [
            "/// Get a potential `SymlinkArrow` value from a [Config].\n///\n/// If the `Config::symlink-arrow` has value,\n/// returns its value as the value of the `SymlinkArrow`, in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        config\n            .symlink_arrow\n            .as_ref()\n            .map(|arrow| SymlinkArrow(arrow.to_string()))\n    }",
            "Real(LocalPath(\"src/flags/symlink_arrow.rs\"))"
        ],
        "<flags::symlink_arrow::SymlinkArrow as std::default::Default>::default": [
            "fn default() -> Self{\n        Self(String::from(\"\\u{21d2}\")) // ⇒\n    }",
            "Real(LocalPath(\"src/flags/symlink_arrow.rs\"))"
        ],
        "<flags::symlink_arrow::SymlinkArrow as std::fmt::Display>::fmt": [
            "fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result{\n        write!(f, \"{}\", self.0)\n    }",
            "Real(LocalPath(\"src/flags/symlink_arrow.rs\"))"
        ],
        "<flags::symlinks::NoSymlink as flags::Configurable<flags::symlinks::NoSymlink>>::from_arg_matches": [
            "/// Get a potential `NoSymlink` value from [ArgMatches].\n///\n/// If the \"no-symlink\" argument is passed, this returns a `NoSymlink` with value `true` in a\n/// [Some]. Otherwise this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"no-symlink\") {\n            Some(Self(true))\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/symlinks.rs\"))"
        ],
        "<flags::symlinks::NoSymlink as flags::Configurable<flags::symlinks::NoSymlink>>::from_config": [
            "/// Get a potential `NoSymlink` value from a [Config].\n///\n/// If the `Config::no-symlink` has value,\n/// this returns it as the value of the `NoSymlink`, in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        config.no_symlink.map(Self)\n    }",
            "Real(LocalPath(\"src/flags/symlinks.rs\"))"
        ],
        "<flags::total_size::TotalSize as flags::Configurable<flags::total_size::TotalSize>>::from_arg_matches": [
            "/// Get a potential `TotalSize` value from [ArgMatches].\n///\n/// If the \"total-size\" argument is passed, this returns a `TotalSize` with value `true` in a\n/// [Some]. Otherwise this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Self>{\n        if matches.is_present(\"total-size\") {\n            Some(Self(true))\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/total_size.rs\"))"
        ],
        "<flags::total_size::TotalSize as flags::Configurable<flags::total_size::TotalSize>>::from_config": [
            "/// Get a potential `TotalSize` value from a [Config].\n///\n/// If the `Config::total-size` has value,\n/// this returns it as the value of the `TotalSize`, in a [Some].\n/// Otherwise this returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        config.total_size.map(Self)\n    }",
            "Real(LocalPath(\"src/flags/total_size.rs\"))"
        ],
        "<meta::date::Date as std::convert::From<&'a std::fs::Metadata>>::from": [
            "fn from(meta: &'a Metadata) -> Self{\n        meta.modified()\n            .expect(\"failed to retrieve modified date\")\n            .into()\n    }",
            "Real(LocalPath(\"src/meta/date.rs\"))"
        ],
        "<meta::date::Date as std::convert::From<std::time::SystemTime>>::from": [
            "fn from(systime: SystemTime) -> Self{\n        // FIXME: This should really involve a result, but there's upstream issues in chrono. See https://github.com/chronotope/chrono/issues/110\n        let res = panic::catch_unwind(|| systime.into());\n\n        if let Ok(time) = res {\n            Date::Date(time)\n        } else {\n            Date::Invalid\n        }\n    }",
            "Real(LocalPath(\"src/meta/date.rs\"))"
        ],
        "<meta::indicator::Indicator as std::convert::From<meta::filetype::FileType>>::from": [
            "fn from(file_type: FileType) -> Self{\n        let res = match file_type {\n            FileType::Directory { .. } => \"/\",\n            FileType::File { exec: true, .. } => \"*\",\n            FileType::Pipe => \"|\",\n            FileType::Socket => \"=\",\n            FileType::SymLink { .. } => \"@\",\n            _ => \"\",\n        };\n\n        Indicator(res)\n    }",
            "Real(LocalPath(\"src/meta/indicator.rs\"))"
        ],
        "<meta::inode::INode as std::convert::From<&'a std::fs::Metadata>>::from": [
            "#[cfg(unix)]\nfn from(meta: &Metadata) -> Self{\n        use std::os::unix::fs::MetadataExt;\n\n        let index = meta.ino();\n\n        Self { index: Some(index) }\n    }",
            "Real(LocalPath(\"src/meta/inode.rs\"))"
        ],
        "<meta::links::Links as std::convert::From<&'a std::fs::Metadata>>::from": [
            "#[cfg(unix)]\nfn from(meta: &Metadata) -> Self{\n        use std::os::unix::fs::MetadataExt;\n\n        let nlink = meta.nlink();\n\n        Self { nlink: Some(nlink) }\n    }",
            "Real(LocalPath(\"src/meta/links.rs\"))"
        ],
        "<meta::name::Name as std::cmp::Ord>::cmp": [
            "fn cmp(&self, other: &Self) -> Ordering{\n        self.name.to_lowercase().cmp(&other.name.to_lowercase())\n    }",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "<meta::name::Name as std::cmp::PartialEq>::eq": [
            "fn eq(&self, other: &Self) -> bool{\n        self.name.eq_ignore_ascii_case(&other.name.to_lowercase())\n    }",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "<meta::name::Name as std::cmp::PartialOrd>::partial_cmp": [
            "fn partial_cmp(&self, other: &Self) -> Option<Ordering>{\n        self.name\n            .to_lowercase()\n            .partial_cmp(&other.name.to_lowercase())\n    }",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "<meta::owner::Owner as std::convert::From<&'a std::fs::Metadata>>::from": [
            "fn from(meta: &Metadata) -> Self{\n        use std::os::unix::fs::MetadataExt;\n        use users::{get_group_by_gid, get_user_by_uid};\n\n        let user = match get_user_by_uid(meta.uid()) {\n            Some(res) => res.name().to_string_lossy().to_string(),\n            None => meta.uid().to_string(),\n        };\n\n        let group = match get_group_by_gid(meta.gid()) {\n            Some(res) => res.name().to_string_lossy().to_string(),\n            None => meta.gid().to_string(),\n        };\n\n        Self { user, group }\n    }",
            "Real(LocalPath(\"src/meta/owner.rs\"))"
        ],
        "<meta::permissions::Permissions as std::convert::From<&'a std::fs::Metadata>>::from": [
            "#[cfg(unix)]\nfn from(meta: &Metadata) -> Self{\n        use std::os::unix::fs::PermissionsExt;\n\n        let bits = meta.permissions().mode();\n        let has_bit = |bit| bits & bit == bit;\n\n        Self {\n            user_read: has_bit(modes::USER_READ),\n            user_write: has_bit(modes::USER_WRITE),\n            user_execute: has_bit(modes::USER_EXECUTE),\n\n            group_read: has_bit(modes::GROUP_READ),\n            group_write: has_bit(modes::GROUP_WRITE),\n            group_execute: has_bit(modes::GROUP_EXECUTE),\n\n            other_read: has_bit(modes::OTHER_READ),\n            other_write: has_bit(modes::OTHER_WRITE),\n            other_execute: has_bit(modes::OTHER_EXECUTE),\n\n            sticky: has_bit(modes::STICKY),\n            setgid: has_bit(modes::SETGID),\n            setuid: has_bit(modes::SETUID),\n        }\n    }",
            "Real(LocalPath(\"src/meta/permissions.rs\"))"
        ],
        "<meta::size::Size as std::convert::From<&'a std::fs::Metadata>>::from": [
            "fn from(meta: &Metadata) -> Self{\n        let len = meta.len();\n        Self { bytes: len }\n    }",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "<meta::symlink::SymLink as std::convert::From<&'a std::path::Path>>::from": [
            "fn from(path: &'a Path) -> Self{\n        if let Ok(target) = read_link(path) {\n            if target.is_absolute() || path.parent() == None {\n                return Self {\n                    valid: target.exists(),\n                    target: Some(\n                        target\n                            .to_str()\n                            .expect(\"failed to convert symlink to str\")\n                            .to_string(),\n                    ),\n                };\n            }\n\n            return Self {\n                target: Some(\n                    target\n                        .to_str()\n                        .expect(\"failed to convert symlink to str\")\n                        .to_string(),\n                ),\n                valid: path.parent().unwrap().join(target).exists(),\n            };\n        }\n\n        Self {\n            target: None,\n            valid: false,\n        }\n    }",
            "Real(LocalPath(\"src/meta/symlink.rs\"))"
        ],
        "app::build": [
            "pub fn build() -> App<'static, 'static>{\n    App::new(\"lsd\")\n        .version(crate_version!())\n        .about(crate_description!())\n        .arg(Arg::with_name(\"FILE\").multiple(true).default_value(\".\"))\n        .arg(\n            Arg::with_name(\"all\")\n                .short(\"a\")\n                .overrides_with(\"almost-all\")\n                .long(\"all\")\n                .multiple(true)\n                .help(\"Do not ignore entries starting with .\"),\n        )\n        .arg(\n            Arg::with_name(\"almost-all\")\n                .short(\"A\")\n                .overrides_with(\"all\")\n                .long(\"almost-all\")\n                .multiple(true)\n                .help(\"Do not list implied . and ..\"),\n        )\n        .arg(\n            Arg::with_name(\"color\")\n                .long(\"color\")\n                .possible_value(\"always\")\n                .possible_value(\"auto\")\n                .possible_value(\"never\")\n                .default_value(\"auto\")\n                .multiple(true)\n                .number_of_values(1)\n                .help(\"When to use terminal colours\"),\n        )\n        .arg(\n            Arg::with_name(\"icon\")\n                .long(\"icon\")\n                .possible_value(\"always\")\n                .possible_value(\"auto\")\n                .possible_value(\"never\")\n                .default_value(\"auto\")\n                .multiple(true)\n                .number_of_values(1)\n                .help(\"When to print the icons\"),\n        )\n        .arg(\n            Arg::with_name(\"icon-theme\")\n                .long(\"icon-theme\")\n                .possible_value(\"fancy\")\n                .possible_value(\"unicode\")\n                .default_value(\"fancy\")\n                .multiple(true)\n                .number_of_values(1)\n                .help(\"Whether to use fancy or unicode icons\"),\n        )\n        .arg(\n            Arg::with_name(\"indicators\")\n                .short(\"F\")\n                .long(\"classify\")\n                .multiple(true)\n                .help(\"Append indicator (one of */=>@|) at the end of the file names\"),\n        )\n        .arg(\n            Arg::with_name(\"long\")\n                .short(\"l\")\n                .long(\"long\")\n                .multiple(true)\n                .help(\"Display extended file metadata as a table\"),\n        )\n        .arg(\n            Arg::with_name(\"ignore-config\")\n                .long(\"ignore-config\")\n                .help(\"Ignore the configuration file\"),\n        )\n        .arg(\n            Arg::with_name(\"config-file\")\n                .long(\"config-file\")\n                .help(\"Provide a custom lsd configuration file\")\n                .value_name(\"config-file\")\n                .takes_value(true)\n        )\n        .arg(\n            Arg::with_name(\"oneline\")\n                .short(\"1\")\n                .long(\"oneline\")\n                .multiple(true)\n                .help(\"Display one entry per line\"),\n        )\n        .arg(\n            Arg::with_name(\"recursive\")\n                .short(\"R\")\n                .long(\"recursive\")\n                .multiple(true)\n                .conflicts_with(\"tree\")\n                .help(\"Recurse into directories\"),\n        )\n        .arg(\n            Arg::with_name(\"human_readable\")\n                .short(\"h\")\n                .long(\"human-readable\")\n                .multiple(true)\n                .help(\"For ls compatibility purposes ONLY, currently set by default\"),\n        )\n        .arg(\n            Arg::with_name(\"tree\")\n                .long(\"tree\")\n                .multiple(true)\n                .conflicts_with(\"recursive\")\n                .help(\"Recurse into directories and present the result as a tree\"),\n        )\n        .arg(\n            Arg::with_name(\"depth\")\n                .long(\"depth\")\n                .multiple(true)\n                .takes_value(true)\n                .value_name(\"num\")\n                .help(\"Stop recursing into directories after reaching specified depth\"),\n        )\n        .arg(\n            Arg::with_name(\"directory-only\")\n                .short(\"d\")\n                .long(\"directory-only\")\n                .conflicts_with(\"depth\")\n                .conflicts_with(\"recursive\")\n                .help(\"Display directories themselves, and not their contents (recursively when used with --tree)\"),\n        )\n        .arg(\n            Arg::with_name(\"permission\")\n                .long(\"permission\")\n                .default_value(\"rwx\")\n                .possible_value(\"rwx\")\n                .possible_value(\"octal\")\n                .multiple(true)\n                .number_of_values(1)\n                .help(\"How to display permissions\"),\n        )\n        .arg(\n            Arg::with_name(\"size\")\n                .long(\"size\")\n                .possible_value(\"default\")\n                .possible_value(\"short\")\n                .possible_value(\"bytes\")\n                .default_value(\"default\")\n                .multiple(true)\n                .number_of_values(1)\n                .help(\"How to display size\"),\n        )\n        .arg(\n            Arg::with_name(\"total-size\")\n                .long(\"total-size\")\n                .multiple(true)\n                .help(\"Display the total size of directories\"),\n        )\n        .arg(\n            Arg::with_name(\"date\")\n                .long(\"date\")\n                .validator(validate_date_argument)\n                .default_value(\"date\")\n                .multiple(true)\n                .number_of_values(1)\n                .help(\"How to display date [possible values: date, relative, +date-time-format]\"),\n        )\n        .arg(\n            Arg::with_name(\"timesort\")\n                .short(\"t\")\n                .long(\"timesort\")\n                .overrides_with(\"sizesort\")\n                .overrides_with(\"extensionsort\")\n                .overrides_with(\"versionsort\")\n                .overrides_with(\"sort\")\n                .overrides_with(\"no-sort\")\n                .multiple(true)\n                .help(\"Sort by time modified\"),\n        )\n        .arg(\n            Arg::with_name(\"sizesort\")\n                .short(\"S\")\n                .long(\"sizesort\")\n                .overrides_with(\"timesort\")\n                .overrides_with(\"extensionsort\")\n                .overrides_with(\"versionsort\")\n                .overrides_with(\"sort\")\n                .overrides_with(\"no-sort\")\n                .multiple(true)\n                .help(\"Sort by size\"),\n        )\n        .arg(\n            Arg::with_name(\"extensionsort\")\n                .short(\"X\")\n                .long(\"extensionsort\")\n                .overrides_with(\"sizesort\")\n                .overrides_with(\"timesort\")\n                .overrides_with(\"versionsort\")\n                .overrides_with(\"sort\")\n                .overrides_with(\"no-sort\")\n                .multiple(true)\n                .help(\"Sort by file extension\"),\n        )\n        .arg(\n            Arg::with_name(\"versionsort\")\n                .short(\"v\")\n                .long(\"versionsort\")\n                .multiple(true)\n                .overrides_with(\"timesort\")\n                .overrides_with(\"sizesort\")\n                .overrides_with(\"extensionsort\")\n                .overrides_with(\"sort\")\n                .overrides_with(\"no-sort\")\n                .help(\"Natural sort of (version) numbers within text\"),\n        )\n        .arg(\n            Arg::with_name(\"sort\")\n                .long(\"sort\")\n                .multiple(true)\n                .possible_values(&[\"size\", \"time\", \"version\", \"extension\", \"none\"])\n                .takes_value(true)\n                .value_name(\"WORD\")\n                .overrides_with(\"timesort\")\n                .overrides_with(\"sizesort\")\n                .overrides_with(\"extensionsort\")\n                .overrides_with(\"versionsort\")\n                .overrides_with(\"no-sort\")\n                .help(\"sort by WORD instead of name\")\n        )\n        .arg(\n            Arg::with_name(\"no-sort\")\n            .short(\"U\")\n            .long(\"no-sort\")\n            .multiple(true)\n            .overrides_with(\"timesort\")\n            .overrides_with(\"sizesort\")\n            .overrides_with(\"extensionsort\")\n            .overrides_with(\"sort\")\n            .overrides_with(\"versionsort\")\n            .help(\"Do not sort. List entries in directory order\")\n        )\n        .arg(\n            Arg::with_name(\"reverse\")\n                .short(\"r\")\n                .long(\"reverse\")\n                .multiple(true)\n                .help(\"Reverse the order of the sort\"),\n        )\n        .arg(\n            Arg::with_name(\"group-dirs\")\n                .long(\"group-dirs\")\n                .possible_value(\"none\")\n                .possible_value(\"first\")\n                .possible_value(\"last\")\n                .multiple(true)\n                .number_of_values(1)\n                .help(\"Sort the directories then the files\"),\n        )\n        .arg(\n            Arg::with_name(\"group-directories-first\")\n                .long(\"group-directories-first\")\n                .help(\"Groups the directories at the top before the files. Same as --group-dirs=first\")\n        )\n        .arg(\n            Arg::with_name(\"blocks\")\n                .long(\"blocks\")\n                .multiple(true)\n                .number_of_values(1)\n                .require_delimiter(true)\n                .possible_values(&[\n                    \"permission\",\n                    \"user\",\n                    \"group\",\n                    \"context\",\n                    \"size\",\n                    \"date\",\n                    \"name\",\n                    \"inode\",\n                    \"links\",\n                ])\n                .help(\"Specify the blocks that will be displayed and in what order\"),\n        )\n        .arg(\n            Arg::with_name(\"classic\")\n                .long(\"classic\")\n                .help(\"Enable classic mode (display output similar to ls)\"),\n        )\n        .arg(\n            Arg::with_name(\"no-symlink\")\n                .long(\"no-symlink\")\n                .multiple(true)\n                .help(\"Do not display symlink target\"),\n        )\n        .arg(\n            Arg::with_name(\"ignore-glob\")\n                .short(\"I\")\n                .long(\"ignore-glob\")\n                .multiple(true)\n                .number_of_values(1)\n                .value_name(\"pattern\")\n                .default_value(\"\")\n                .help(\"Do not display files/directories with names matching the glob pattern(s). More than one can be specified by repeating the argument\"),\n        )\n        .arg(\n            Arg::with_name(\"inode\")\n                .short(\"i\")\n                .long(\"inode\")\n                .multiple(true)\n                .help(\"Display the index number of each file\"),\n        )\n        .arg(\n            Arg::with_name(\"dereference\")\n                .short(\"L\")\n                .long(\"dereference\")\n                .multiple(true)\n                .help(\"When showing file information for a symbolic link, show information for the file the link references rather than for the link itself\"),\n        )\n        .arg(\n            Arg::with_name(\"context\")\n                .short(\"Z\")\n                .long(\"context\")\n                .required(false)\n                .takes_value(false)\n                .help(\"Print security context (label) of each file\"),\n        )\n        .arg(\n            Arg::with_name(\"hyperlink\")\n                .long(\"hyperlink\")\n                .possible_value(\"always\")\n                .possible_value(\"auto\")\n                .possible_value(\"never\")\n                .default_value(\"never\")\n                .multiple(true)\n                .number_of_values(1)\n                .help(\"Attach hyperlink to filenames\"),\n        )\n}",
            "Real(LocalPath(\"src/app.rs\"))"
        ],
        "app::validate_date_argument": [
            "fn validate_date_argument(arg: String) -> Result<(), String>{\n    if arg.starts_with('+') {\n        validate_time_format(&arg)\n    } else if &arg == \"date\" || &arg == \"relative\" {\n        Result::Ok(())\n    } else {\n        Result::Err(\"possible values: date, relative, +date-time-format\".to_owned())\n    }\n}",
            "Real(LocalPath(\"src/app.rs\"))"
        ],
        "app::validate_time_format": [
            "pub fn validate_time_format(formatter: &str) -> Result<(), String>{\n    let mut chars = formatter.chars();\n    loop {\n        match chars.next() {\n            Some('%') => match chars.next() {\n                Some('.') => match chars.next() {\n                    Some('f') => (),\n                    Some(n @ '3') | Some(n @ '6') | Some(n @ '9') => match chars.next() {\n                        Some('f') => (),\n                        Some(c) => return Err(format!(\"invalid format specifier: %.{}{}\", n, c)),\n                        None => return Err(\"missing format specifier\".to_owned()),\n                    },\n                    Some(c) => return Err(format!(\"invalid format specifier: %.{}\", c)),\n                    None => return Err(\"missing format specifier\".to_owned()),\n                },\n                Some(n @ ':') | Some(n @ '#') => match chars.next() {\n                    Some('z') => (),\n                    Some(c) => return Err(format!(\"invalid format specifier: %{}{}\", n, c)),\n                    None => return Err(\"missing format specifier\".to_owned()),\n                },\n                Some(n @ '-') | Some(n @ '_') | Some(n @ '0') => match chars.next() {\n                    Some('C') | Some('d') | Some('e') | Some('f') | Some('G') | Some('g')\n                    | Some('H') | Some('I') | Some('j') | Some('k') | Some('l') | Some('M')\n                    | Some('m') | Some('S') | Some('s') | Some('U') | Some('u') | Some('V')\n                    | Some('W') | Some('w') | Some('Y') | Some('y') => (),\n                    Some(c) => return Err(format!(\"invalid format specifier: %{}{}\", n, c)),\n                    None => return Err(\"missing format specifier\".to_owned()),\n                },\n                Some('A') | Some('a') | Some('B') | Some('b') | Some('C') | Some('c')\n                | Some('D') | Some('d') | Some('e') | Some('F') | Some('f') | Some('G')\n                | Some('g') | Some('H') | Some('h') | Some('I') | Some('j') | Some('k')\n                | Some('l') | Some('M') | Some('m') | Some('n') | Some('P') | Some('p')\n                | Some('R') | Some('r') | Some('S') | Some('s') | Some('T') | Some('t')\n                | Some('U') | Some('u') | Some('V') | Some('v') | Some('W') | Some('w')\n                | Some('X') | Some('x') | Some('Y') | Some('y') | Some('Z') | Some('z')\n                | Some('+') | Some('%') => (),\n                Some(n @ '3') | Some(n @ '6') | Some(n @ '9') => match chars.next() {\n                    Some('f') => (),\n                    Some(c) => return Err(format!(\"invalid format specifier: %{}{}\", n, c)),\n                    None => return Err(\"missing format specifier\".to_owned()),\n                },\n                Some(c) => return Err(format!(\"invalid format specifier: %{}\", c)),\n                None => return Err(\"missing format specifier\".to_owned()),\n            },\n            None => break,\n            _ => continue,\n        }\n    }\n    Ok(())\n}",
            "Real(LocalPath(\"src/app.rs\"))"
        ],
        "color::Colors": [
            "pub struct Colors {\n    theme: Option<Theme>,\n    lscolors: Option<LsColors>,\n}",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "color::Colors::colorize": [
            "pub fn colorize(&self, input: String, elem: &Elem) -> ColoredString{\n        self.style(elem).apply(input)\n    }",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "color::Colors::colorize_using_path": [
            "pub fn colorize_using_path(&self, input: String, path: &Path, elem: &Elem) -> ColoredString{\n        let style_from_path = self.style_from_path(path);\n        match style_from_path {\n            Some(style_from_path) => style_from_path.apply(input),\n            None => self.colorize(input, elem),\n        }\n    }",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "color::Colors::default_style": [
            "pub fn default_style() -> ContentStyle{\n        ContentStyle::default()\n    }",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "color::Colors::get_indicator_from_elem": [
            "fn get_indicator_from_elem(&self, elem: &Elem) -> Option<Indicator>{\n        let indicator_string = match elem {\n            Elem::File { exec, uid } => match (exec, uid) {\n                (_, true) => None,\n                (true, false) => Some(\"ex\"),\n                (false, false) => Some(\"fi\"),\n            },\n            Elem::Dir { uid } => {\n                if *uid {\n                    None\n                } else {\n                    Some(\"di\")\n                }\n            }\n            Elem::SymLink => Some(\"ln\"),\n            Elem::Pipe => Some(\"pi\"),\n            Elem::Socket => Some(\"so\"),\n            Elem::BlockDevice => Some(\"bd\"),\n            Elem::CharDevice => Some(\"cd\"),\n            Elem::BrokenSymLink => Some(\"or\"),\n            Elem::MissingSymLinkTarget => Some(\"mi\"),\n            Elem::INode { valid } => match valid {\n                true => Some(\"so\"),\n                false => Some(\"no\"),\n            },\n            Elem::Links { valid } => match valid {\n                true => Some(\"so\"),\n                false => Some(\"no\"),\n            },\n            _ => None,\n        };\n\n        match indicator_string {\n            Some(ids) => Indicator::from(ids),\n            None => None,\n        }\n    }",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "color::Colors::new": [
            "pub fn new(t: ThemeOption) -> Self{\n        let theme = match t {\n            ThemeOption::NoColor => None,\n            ThemeOption::Default => Some(Theme::default()),\n            ThemeOption::NoLscolors => Some(Theme::default()),\n            ThemeOption::Custom(ref file) => Some(Theme::from_path(file).unwrap_or_default()),\n        };\n        let lscolors = match t {\n            ThemeOption::Default => Some(LsColors::from_env().unwrap_or_default()),\n            ThemeOption::Custom(_) => Some(LsColors::from_env().unwrap_or_default()),\n            _ => None,\n        };\n\n        Self { theme, lscolors }\n    }",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "color::Colors::style": [
            "fn style(&self, elem: &Elem) -> ContentStyle{\n        match &self.lscolors {\n            Some(lscolors) => match self.get_indicator_from_elem(elem) {\n                Some(style) => {\n                    let style = lscolors.style_for_indicator(style);\n                    style.map(to_content_style).unwrap_or_default()\n                }\n                None => self.style_default(elem),\n            },\n            None => self.style_default(elem),\n        }\n    }",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "color::Colors::style_default": [
            "fn style_default(&self, elem: &Elem) -> ContentStyle{\n        if let Some(t) = &self.theme {\n            let style_fg = ContentStyle::default().with(elem.get_color(t));\n            if elem.has_suid() {\n                style_fg.on(Color::AnsiValue(124)) // Red3\n            } else {\n                style_fg\n            }\n        } else {\n            ContentStyle::default()\n        }\n    }",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "color::Colors::style_from_path": [
            "fn style_from_path(&self, path: &Path) -> Option<ContentStyle>{\n        match &self.lscolors {\n            Some(lscolors) => lscolors.style_for_path(path).map(to_content_style),\n            None => None,\n        }\n    }",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "color::Elem": [
            "#[allow(dead_code)]\npub enum Elem {\n    /// Node type\n    File {\n        exec: bool,\n        uid: bool,\n    },\n    SymLink,\n    BrokenSymLink,\n    MissingSymLinkTarget,\n    Dir {\n        uid: bool,\n    },\n    Pipe,\n    BlockDevice,\n    CharDevice,\n    Socket,\n    Special,\n\n    /// Permission\n    Read,\n    Write,\n    Exec,\n    ExecSticky,\n    NoAccess,\n    Octal,\n    Acl,\n    Context,\n\n    /// Last Time Modified\n    DayOld,\n    HourOld,\n    Older,\n\n    /// User / Group Name\n    User,\n    Group,\n\n    /// File Size\n    NonFile,\n    FileLarge,\n    FileMedium,\n    FileSmall,\n\n    /// INode\n    INode {\n        valid: bool,\n    },\n\n    Links {\n        valid: bool,\n    },\n\n    TreeEdge,\n}",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "color::Elem::get_color": [
            "pub fn get_color(&self, theme: &theme::Theme) -> Color{\n        match self {\n            Elem::File {\n                exec: true,\n                uid: true,\n            } => theme.file_type.file.exec_uid,\n            Elem::File {\n                exec: false,\n                uid: true,\n            } => theme.file_type.file.uid_no_exec,\n            Elem::File {\n                exec: true,\n                uid: false,\n            } => theme.file_type.file.exec_no_uid,\n            Elem::File {\n                exec: false,\n                uid: false,\n            } => theme.file_type.file.no_exec_no_uid,\n            Elem::SymLink => theme.file_type.symlink.default,\n            Elem::BrokenSymLink => theme.file_type.symlink.broken,\n            Elem::MissingSymLinkTarget => theme.file_type.symlink.missing_target,\n            Elem::Dir { uid: true } => theme.file_type.dir.uid,\n            Elem::Dir { uid: false } => theme.file_type.dir.no_uid,\n            Elem::Pipe => theme.file_type.pipe,\n            Elem::BlockDevice => theme.file_type.block_device,\n            Elem::CharDevice => theme.file_type.char_device,\n            Elem::Socket => theme.file_type.socket,\n            Elem::Special => theme.file_type.special,\n\n            Elem::Read => theme.permission.read,\n            Elem::Write => theme.permission.write,\n            Elem::Exec => theme.permission.exec,\n            Elem::ExecSticky => theme.permission.exec_sticky,\n            Elem::NoAccess => theme.permission.no_access,\n            Elem::Octal => theme.permission.octal,\n            Elem::Acl => theme.permission.acl,\n            Elem::Context => theme.permission.context,\n\n            Elem::DayOld => theme.date.day_old,\n            Elem::HourOld => theme.date.hour_old,\n            Elem::Older => theme.date.older,\n\n            Elem::User => theme.user,\n            Elem::Group => theme.group,\n            Elem::NonFile => theme.size.none,\n            Elem::FileLarge => theme.size.large,\n            Elem::FileMedium => theme.size.medium,\n            Elem::FileSmall => theme.size.small,\n            Elem::INode { valid: false } => theme.inode.valid,\n            Elem::INode { valid: true } => theme.inode.invalid,\n            Elem::TreeEdge => theme.tree_edge,\n            Elem::Links { valid: false } => theme.links.invalid,\n            Elem::Links { valid: true } => theme.links.valid,\n        }\n    }",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "color::Elem::has_suid": [
            "pub fn has_suid(&self) -> bool{\n        matches!(self, Elem::Dir { uid: true } | Elem::File { uid: true, .. })\n    }",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "color::theme::Date": [
            "#[serde(rename_all = \"kebab-case\")]\n#[serde(deny_unknown_fields)]\n#[serde(default)]\npub struct Date {\n    pub hour_old: Color,\n    pub day_old: Color,\n    pub older: Color,\n}",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::Dir": [
            "#[serde(rename_all = \"kebab-case\")]\n#[serde(deny_unknown_fields)]\n#[serde(default)]\npub struct Dir {\n    pub uid: Color,\n    pub no_uid: Color,\n}",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::File": [
            "#[serde(rename_all = \"kebab-case\")]\n#[serde(deny_unknown_fields)]\n#[serde(default)]\npub struct File {\n    pub exec_uid: Color,\n    pub uid_no_exec: Color,\n    pub exec_no_uid: Color,\n    pub no_exec_no_uid: Color,\n}",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::FileType": [
            "#[serde(rename_all = \"kebab-case\")]\n#[serde(deny_unknown_fields)]\n#[serde(default)]\npub struct FileType {\n    pub file: File,\n    pub dir: Dir,\n    pub pipe: Color,\n    pub symlink: Symlink,\n    pub block_device: Color,\n    pub char_device: Color,\n    pub socket: Color,\n    pub special: Color,\n}",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::INode": [
            "#[serde(rename_all = \"kebab-case\")]\n#[serde(deny_unknown_fields)]\n#[serde(default)]\npub struct INode {\n    pub valid: Color,\n    pub invalid: Color,\n}",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::Links": [
            "#[serde(rename_all = \"kebab-case\")]\n#[serde(deny_unknown_fields)]\n#[serde(default)]\npub struct Links {\n    pub valid: Color,\n    pub invalid: Color,\n}",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::Permission": [
            "#[serde(rename_all = \"kebab-case\")]\n#[serde(deny_unknown_fields)]\n#[serde(default)]\npub struct Permission {\n    pub read: Color,\n    pub write: Color,\n    pub exec: Color,\n    pub exec_sticky: Color,\n    pub no_access: Color,\n    pub octal: Color,\n    pub acl: Color,\n    pub context: Color,\n}",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::Size": [
            "#[serde(rename_all = \"kebab-case\")]\n#[serde(deny_unknown_fields)]\n#[serde(default)]\npub struct Size {\n    pub none: Color,\n    pub small: Color,\n    pub medium: Color,\n    pub large: Color,\n}",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::Symlink": [
            "#[serde(rename_all = \"kebab-case\")]\n#[serde(deny_unknown_fields)]\n#[serde(default)]\npub struct Symlink {\n    pub default: Color,\n    pub broken: Color,\n    pub missing_target: Color,\n}",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::Theme": [
            "/// A struct holding the theme configuration\n/// Color table: https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.avg\n#[serde(rename_all = \"kebab-case\")]\n#[serde(deny_unknown_fields)]\n#[serde(default)]\npub struct Theme {\n    pub user: Color,\n    pub group: Color,\n    pub permission: Permission,\n    pub date: Date,\n    pub size: Size,\n    pub inode: INode,\n    pub tree_edge: Color,\n    pub links: Links,\n\n    #[serde(skip)]\n    pub file_type: FileType,\n}",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::Theme::default_dark": [
            "pub fn default_dark() -> Self{\n        Theme {\n            user: Color::AnsiValue(230),  // Cornsilk1\n            group: Color::AnsiValue(187), // LightYellow3\n            permission: Permission::default(),\n            file_type: FileType::default(),\n            date: Date::default(),\n            size: Size::default(),\n            inode: INode::default(),\n            links: Links::default(),\n            tree_edge: Color::AnsiValue(245), // Grey\n        }\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::Theme::from_path": [
            "/// This read theme from file,\n/// use the file path if it is absolute\n/// prefix the config_file dir to it if it is not\npub fn from_path(file: &str) -> Option<Self>{\n        let real = if let Some(path) = config_file::Config::expand_home(file) {\n            path\n        } else {\n            print_error!(\"Not a valid theme file path: {}.\", &file);\n            return None;\n        };\n        let path = if Path::new(&real).is_absolute() {\n            real\n        } else {\n            config_file::Config::config_file_path()?\n                .join(\"themes\")\n                .join(real)\n        };\n        match fs::read(&path.with_extension(\"yaml\")) {\n            Ok(f) => match Self::with_yaml(&String::from_utf8_lossy(&f)) {\n                Ok(t) => Some(t),\n                Err(e) => {\n                    print_error!(\"Theme file {} format error: {}.\", &file, e);\n                    None\n                }\n            },\n            Err(_) => {\n                // try `yml` if `yaml` extension file not found\n                match fs::read(&path.with_extension(\"yml\")) {\n                    Ok(f) => match Self::with_yaml(&String::from_utf8_lossy(&f)) {\n                        Ok(t) => Some(t),\n                        Err(e) => {\n                            print_error!(\"Theme file {} format error: {}.\", &file, e);\n                            None\n                        }\n                    },\n                    Err(e) => {\n                        print_error!(\"Not a valid theme: {}, {}.\", path.to_string_lossy(), e);\n                        None\n                    }\n                }\n            }\n        }\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::Theme::with_yaml": [
            "/// This constructs a Theme struct with a passed [Yaml] str.\nfn with_yaml(yaml: &str) -> Result<Self, serde_yaml::Error>{\n        serde_yaml::from_str::<Self>(yaml)\n    }",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/color/theme.rs\"))"
        ],
        "color::to_content_style": [
            "fn to_content_style(ls: &lscolors::Style) -> ContentStyle{\n    let to_crossterm_color = |c: &lscolors::Color| match c {\n        lscolors::style::Color::RGB(r, g, b) => Color::Rgb {\n            r: *r,\n            g: *g,\n            b: *b,\n        },\n        lscolors::style::Color::Fixed(n) => Color::AnsiValue(*n),\n        lscolors::style::Color::Black => Color::Black,\n        lscolors::style::Color::Red => Color::DarkRed,\n        lscolors::style::Color::Green => Color::DarkGreen,\n        lscolors::style::Color::Yellow => Color::DarkYellow,\n        lscolors::style::Color::Blue => Color::DarkBlue,\n        lscolors::style::Color::Magenta => Color::DarkMagenta,\n        lscolors::style::Color::Cyan => Color::DarkCyan,\n        lscolors::style::Color::White => Color::Grey,\n        lscolors::style::Color::BrightBlack => Color::DarkGrey,\n        lscolors::style::Color::BrightRed => Color::Red,\n        lscolors::style::Color::BrightGreen => Color::Green,\n        lscolors::style::Color::BrightYellow => Color::Yellow,\n        lscolors::style::Color::BrightBlue => Color::Blue,\n        lscolors::style::Color::BrightMagenta => Color::Magenta,\n        lscolors::style::Color::BrightCyan => Color::Cyan,\n        lscolors::style::Color::BrightWhite => Color::White,\n    };\n    let mut style = ContentStyle {\n        foreground_color: ls.foreground.as_ref().map(to_crossterm_color),\n        background_color: ls.background.as_ref().map(to_crossterm_color),\n        ..ContentStyle::default()\n    };\n\n    if ls.font_style.bold {\n        style.attributes.set(Attribute::Bold);\n    }\n    if ls.font_style.dimmed {\n        style.attributes.set(Attribute::Dim);\n    }\n    if ls.font_style.italic {\n        style.attributes.set(Attribute::Italic);\n    }\n    if ls.font_style.underline {\n        style.attributes.set(Attribute::Underlined);\n    }\n    if ls.font_style.rapid_blink {\n        style.attributes.set(Attribute::RapidBlink);\n    }\n    if ls.font_style.slow_blink {\n        style.attributes.set(Attribute::SlowBlink);\n    }\n    if ls.font_style.reverse {\n        style.attributes.set(Attribute::Reverse);\n    }\n    if ls.font_style.hidden {\n        style.attributes.set(Attribute::Hidden);\n    }\n    if ls.font_style.strikethrough {\n        style.attributes.set(Attribute::CrossedOut);\n    }\n\n    style\n}",
            "Real(LocalPath(\"src/color.rs\"))"
        ],
        "config_file::Color": [
            "pub struct Color {\n    pub when: Option<ColorOption>,\n    pub theme: Option<ThemeOption>,\n}",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::Config": [
            "/// A struct to hold an optional configuration items, and provides methods\n/// around error handling in a config file.\n#[serde(rename_all = \"kebab-case\")]\n#[serde(deny_unknown_fields)]\npub struct Config {\n    pub classic: Option<bool>,\n    pub blocks: Option<Vec<String>>,\n    pub color: Option<Color>,\n    pub date: Option<String>,\n    pub dereference: Option<bool>,\n    pub display: Option<Display>,\n    pub icons: Option<Icons>,\n    pub ignore_globs: Option<Vec<String>>,\n    pub indicators: Option<bool>,\n    pub layout: Option<Layout>,\n    pub recursion: Option<Recursion>,\n    pub size: Option<SizeFlag>,\n    pub permission: Option<PermissionFlag>,\n    pub sorting: Option<Sorting>,\n    pub no_symlink: Option<bool>,\n    pub total_size: Option<bool>,\n    pub symlink_arrow: Option<String>,\n    pub hyperlink: Option<HyperlinkOption>,\n}",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::Config::config_file_path": [
            "/// This provides the path for a configuration file, according to the XDG_BASE_DIRS specification.\n/// return None if error like PermissionDenied\n#[cfg(not(windows))]\npub fn config_file_path() -> Option<PathBuf>{\n        use xdg::BaseDirectories;\n        match BaseDirectories::with_prefix(CONF_DIR) {\n            Ok(p) => {\n                return Some(p.get_config_home());\n            }\n            Err(e) => print_error!(\"Can not open config file: {}.\", e),\n        }\n        None\n    }",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::Config::expand_home": [
            "/// This expand the `~` in path to HOME dir\n/// returns the origin one if no `~` found;\n/// returns None if error happened when getting home dir\n///\n/// Implementing this to reuse the `dirs` dependency, avoid adding new one\npub fn expand_home<P: AsRef<Path>>(path: P) -> Option<PathBuf>{\n        let p = path.as_ref();\n        if !p.starts_with(\"~\") {\n            return Some(p.to_path_buf());\n        }\n        if p == Path::new(\"~\") {\n            return dirs::home_dir();\n        }\n        dirs::home_dir().map(|mut h| {\n            if h == Path::new(\"/\") {\n                // Corner case: `h` root directory;\n                // don't prepend extra `/`, just drop the tilde.\n                p.strip_prefix(\"~\").unwrap().to_path_buf()\n            } else {\n                h.push(p.strip_prefix(\"~/\").unwrap());\n                h\n            }\n        })\n    }",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::Config::from_file": [
            "/// This constructs a Config struct with a passed file path [String].\npub fn from_file(file: String) -> Option<Self>{\n        match fs::read(&file) {\n            Ok(f) => match Self::from_yaml(&String::from_utf8_lossy(&f)) {\n                Ok(c) => Some(c),\n                Err(e) => {\n                    print_error!(\"Configuration file {} format error, {}.\", &file, e);\n                    None\n                }\n            },\n            Err(e) => {\n                match e.kind() {\n                    std::io::ErrorKind::NotFound => {}\n                    _ => print_error!(\"Can not open config file {}: {}.\", &file, e),\n                };\n                None\n            }\n        }\n    }",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::Config::from_yaml": [
            "/// This constructs a Config struct with a passed [Yaml] str.\n/// If error happened, return the [serde_yaml::Error].\nfn from_yaml(yaml: &str) -> Result<Self, serde_yaml::Error>{\n        serde_yaml::from_str::<Self>(yaml)\n    }",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::Config::with_none": [
            "/// This constructs a Config struct with all None\npub fn with_none() -> Self{\n        Self {\n            classic: None,\n            blocks: None,\n            color: None,\n            date: None,\n            dereference: None,\n            display: None,\n            icons: None,\n            ignore_globs: None,\n            indicators: None,\n            layout: None,\n            recursion: None,\n            size: None,\n            permission: None,\n            sorting: None,\n            no_symlink: None,\n            total_size: None,\n            symlink_arrow: None,\n            hyperlink: None,\n        }\n    }",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::Icons": [
            "pub struct Icons {\n    pub when: Option<IconOption>,\n    pub theme: Option<IconTheme>,\n    pub separator: Option<String>,\n}",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::Recursion": [
            "pub struct Recursion {\n    pub enabled: Option<bool>,\n    pub depth: Option<usize>,\n}",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::Sorting": [
            "#[serde(rename_all = \"kebab-case\")]\npub struct Sorting {\n    pub column: Option<SortColumn>,\n    pub reverse: Option<bool>,\n    pub dir_grouping: Option<DirGrouping>,\n}",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/config_file.rs\"))"
        ],
        "core::Core": [
            "pub struct Core {\n    flags: Flags,\n    icons: Icons,\n    colors: Colors,\n    sorters: Vec<(SortOrder, sort::SortFn)>,\n}",
            "Real(LocalPath(\"src/core.rs\"))"
        ],
        "core::Core::display": [
            "fn display(&self, metas: &[Meta]){\n        let output = if self.flags.layout == Layout::Tree {\n            display::tree(metas, &self.flags, &self.colors, &self.icons)\n        } else {\n            display::grid(metas, &self.flags, &self.colors, &self.icons)\n        };\n\n        print_output!(\"{}\", output);\n    }",
            "Real(LocalPath(\"src/core.rs\"))"
        ],
        "core::Core::fetch": [
            "fn fetch(&self, paths: Vec<PathBuf>) -> Vec<Meta>{\n        let mut meta_list = Vec::with_capacity(paths.len());\n        let depth = match self.flags.layout {\n            Layout::Tree { .. } => self.flags.recursion.depth,\n            _ if self.flags.recursion.enabled => self.flags.recursion.depth,\n            _ => 1,\n        };\n\n        for path in paths {\n            let mut meta = match Meta::from_path(&path, self.flags.dereference.0) {\n                Ok(meta) => meta,\n                Err(err) => {\n                    print_error!(\"{}: {}.\", path.display(), err);\n                    continue;\n                }\n            };\n\n            let recurse =\n                self.flags.layout == Layout::Tree || self.flags.display != Display::DirectoryOnly;\n            if recurse {\n                match meta.recurse_into(depth, &self.flags) {\n                    Ok(content) => {\n                        meta.content = content;\n                        meta_list.push(meta);\n                    }\n                    Err(err) => {\n                        print_error!(\"lsd: {}: {}\\n\", path.display(), err);\n                        continue;\n                    }\n                };\n            } else {\n                meta_list.push(meta);\n            };\n        }\n        // Only calculate the total size of a directory if it will be displayed\n        if self.flags.total_size.0 && self.flags.blocks.displays_size() {\n            for meta in &mut meta_list.iter_mut() {\n                meta.calculate_total_size();\n            }\n        }\n\n        meta_list\n    }",
            "Real(LocalPath(\"src/core.rs\"))"
        ],
        "core::Core::new": [
            "pub fn new(mut flags: Flags) -> Self{\n        // Check through libc if stdout is a tty. Unix specific so not on windows.\n        // Determine color output availability (and initialize color output (for Windows 10))\n        #[cfg(not(target_os = \"windows\"))]\n        let tty_available = unsafe { libc::isatty(io::stdout().as_raw_fd()) == 1 };\n\n        #[cfg(not(target_os = \"windows\"))]\n        let console_color_ok = true;\n\n        #[cfg(target_os = \"windows\")]\n        let tty_available = terminal_size().is_some(); // terminal_size allows us to know if the stdout is a tty or not.\n\n        #[cfg(target_os = \"windows\")]\n        let console_color_ok = crossterm::ansi_support::supports_ansi();\n\n        let mut inner_flags = flags.clone();\n\n        let color_theme = match (tty_available && console_color_ok, flags.color.when) {\n            (_, ColorOption::Never) | (false, ColorOption::Auto) => ThemeOption::NoColor,\n            _ => flags.color.theme.clone(),\n        };\n\n        let icon_theme = match (tty_available, flags.icons.when, flags.icons.theme) {\n            (_, IconOption::Never, _) | (false, IconOption::Auto, _) => icon::Theme::NoIcon,\n            (_, _, IconTheme::Fancy) => icon::Theme::Fancy,\n            (_, _, IconTheme::Unicode) => icon::Theme::Unicode,\n        };\n\n        // TODO: Rework this so that flags passed downstream does not\n        // have Auto option for any (icon, color, hyperlink).\n        if matches!(flags.hyperlink, HyperlinkOption::Auto) {\n            flags.hyperlink = if tty_available {\n                HyperlinkOption::Always\n            } else {\n                HyperlinkOption::Never\n            }\n        }\n\n        let icon_separator = flags.icons.separator.0.clone();\n\n        if !tty_available {\n            // The output is not a tty, this means the command is piped. (ex: lsd -l | less)\n            //\n            // Most of the programs does not handle correctly the ansi colors\n            // or require a raw output (like the `wc` command).\n            inner_flags.layout = Layout::OneLine;\n        };\n\n        let sorters = sort::assemble_sorters(&flags);\n\n        Self {\n            flags,\n            colors: Colors::new(color_theme),\n            icons: Icons::new(icon_theme, icon_separator),\n            sorters,\n        }\n    }",
            "Real(LocalPath(\"src/core.rs\"))"
        ],
        "core::Core::run": [
            "pub fn run(self, paths: Vec<PathBuf>){\n        let mut meta_list = self.fetch(paths);\n\n        self.sort(&mut meta_list);\n        self.display(&meta_list)\n    }",
            "Real(LocalPath(\"src/core.rs\"))"
        ],
        "core::Core::sort": [
            "fn sort(&self, metas: &mut Vec<Meta>){\n        metas.sort_unstable_by(|a, b| sort::by_meta(&self.sorters, a, b));\n\n        for meta in metas {\n            if let Some(ref mut content) = meta.content {\n                self.sort(content);\n            }\n        }\n    }",
            "Real(LocalPath(\"src/core.rs\"))"
        ],
        "display::detect_size_lengths": [
            "fn detect_size_lengths(metas: &[Meta], flags: &Flags) -> usize{\n    let mut max_value_length: usize = 0;\n\n    for meta in metas {\n        let value_len = meta.size.value_string(flags).len();\n\n        if value_len > max_value_length {\n            max_value_length = value_len;\n        }\n\n        if Layout::Tree == flags.layout {\n            if let Some(subs) = &meta.content {\n                let sub_length = detect_size_lengths(subs, flags);\n                if sub_length > max_value_length {\n                    max_value_length = sub_length;\n                }\n            }\n        }\n    }\n\n    max_value_length\n}",
            "Real(LocalPath(\"src/display.rs\"))"
        ],
        "display::display_folder_path": [
            "fn display_folder_path(meta: &Meta) -> String{\n    let mut output = String::new();\n    output.push('\\n');\n    output += &meta.path.to_string_lossy();\n    output += \":\\n\";\n\n    output\n}",
            "Real(LocalPath(\"src/display.rs\"))"
        ],
        "display::get_output": [
            "fn get_output<'a>(\n    meta: &'a Meta,\n    colors: &'a Colors,\n    icons: &'a Icons,\n    flags: &'a Flags,\n    display_option: &DisplayOption,\n    padding_rules: &HashMap<Block, usize>,\n    tree: (usize, &'a str),\n) -> Vec<String>{\n    let mut strings: Vec<String> = Vec::new();\n    for (i, block) in flags.blocks.0.iter().enumerate() {\n        let mut block_vec = if Layout::Tree == flags.layout && tree.0 == i {\n            vec![colors.colorize(tree.1.to_string(), &Elem::TreeEdge)]\n        } else {\n            Vec::new()\n        };\n\n        match block {\n            Block::INode => block_vec.push(meta.inode.render(colors)),\n            Block::Links => block_vec.push(meta.links.render(colors)),\n            Block::Permission => {\n                block_vec.extend(vec![\n                    meta.file_type.render(colors),\n                    meta.permissions.render(colors, flags),\n                    meta.access_control.render_method(colors),\n                ]);\n            }\n            Block::User => block_vec.push(meta.owner.render_user(colors)),\n            Block::Group => block_vec.push(meta.owner.render_group(colors)),\n            Block::Context => block_vec.push(meta.access_control.render_context(colors)),\n            Block::Size => {\n                let pad = if Layout::Tree == flags.layout && 0 == tree.0 && 0 == i {\n                    None\n                } else {\n                    Some(padding_rules[&Block::SizeValue])\n                };\n                block_vec.push(meta.size.render(colors, flags, pad))\n            }\n            Block::SizeValue => block_vec.push(meta.size.render_value(colors, flags)),\n            Block::Date => block_vec.push(meta.date.render(colors, flags)),\n            Block::Name => {\n                block_vec.extend(vec![\n                    meta.name\n                        .render(colors, icons, display_option, flags.hyperlink),\n                    meta.indicator.render(flags),\n                ]);\n                if !(flags.no_symlink.0 || flags.dereference.0 || flags.layout == Layout::Grid) {\n                    block_vec.push(meta.symlink.render(colors, flags))\n                }\n            }\n        };\n        strings.push(\n            block_vec\n                .into_iter()\n                .map(|s| s.to_string())\n                .collect::<Vec<String>>()\n                .join(\"\"),\n        );\n    }\n    strings\n}",
            "Real(LocalPath(\"src/display.rs\"))"
        ],
        "display::get_padding_rules": [
            "fn get_padding_rules(metas: &[Meta], flags: &Flags) -> HashMap<Block, usize>{\n    let mut padding_rules: HashMap<Block, usize> = HashMap::new();\n\n    if flags.blocks.0.contains(&Block::Size) {\n        let size_val = detect_size_lengths(metas, flags);\n\n        padding_rules.insert(Block::SizeValue, size_val);\n    }\n\n    padding_rules\n}",
            "Real(LocalPath(\"src/display.rs\"))"
        ],
        "display::get_visible_width": [
            "fn get_visible_width(input: &str, hyperlink: bool) -> usize{\n    let mut nb_invisible_char = 0;\n\n    // If the input has color, do not compute the length contributed by the color to the actual length\n    for (idx, _) in input.match_indices(\"\\u{1b}[\") {\n        let (_, s) = input.split_at(idx);\n\n        let m_pos = s.find('m');\n        if let Some(len) = m_pos {\n            nb_invisible_char += len\n        }\n    }\n\n    if hyperlink {\n        for (idx, _) in input.match_indices(\"\\x1B]8;;\") {\n            let (_, s) = input.split_at(idx);\n\n            let m_pos = s.find(\"\\x1B\\x5C\");\n            if let Some(len) = m_pos {\n                nb_invisible_char += len\n            }\n        }\n    }\n\n    UnicodeWidthStr::width(input) - nb_invisible_char\n}",
            "Real(LocalPath(\"src/display.rs\"))"
        ],
        "display::grid": [
            "pub fn grid(metas: &[Meta], flags: &Flags, colors: &Colors, icons: &Icons) -> String{\n    let term_width = terminal_size().map(|(w, _)| w.0 as usize);\n\n    inner_display_grid(\n        &DisplayOption::None,\n        metas,\n        flags,\n        colors,\n        icons,\n        0,\n        term_width,\n    )\n}",
            "Real(LocalPath(\"src/display.rs\"))"
        ],
        "display::inner_display_grid": [
            "fn inner_display_grid(\n    display_option: &DisplayOption,\n    metas: &[Meta],\n    flags: &Flags,\n    colors: &Colors,\n    icons: &Icons,\n    depth: usize,\n    term_width: Option<usize>,\n) -> String{\n    let mut output = String::new();\n\n    let padding_rules = get_padding_rules(metas, flags);\n    let mut grid = match flags.layout {\n        Layout::OneLine => Grid::new(GridOptions {\n            filling: Filling::Spaces(1),\n            direction: Direction::LeftToRight,\n        }),\n        _ => Grid::new(GridOptions {\n            filling: Filling::Spaces(2),\n            direction: Direction::TopToBottom,\n        }),\n    };\n\n    // The first iteration (depth == 0) corresponds to the inputs given by the\n    // user. We defer displaying directories given by the user unless we've been\n    // asked to display the directory itself (rather than its contents).\n    let skip_dirs = (depth == 0) && (flags.display != Display::DirectoryOnly);\n\n    // print the files first.\n    for meta in metas {\n        // Maybe skip showing the directory meta now; show its contents later.\n        if skip_dirs\n            && (matches!(meta.file_type, FileType::Directory { .. })\n                || (matches!(meta.file_type, FileType::SymLink { is_dir: true })\n                    && flags.layout != Layout::OneLine))\n        {\n            continue;\n        }\n\n        let blocks = get_output(\n            meta,\n            colors,\n            icons,\n            flags,\n            display_option,\n            &padding_rules,\n            (0, \"\"),\n        );\n\n        for block in blocks {\n            let block_str = block.to_string();\n\n            grid.add(Cell {\n                width: get_visible_width(\n                    &block_str,\n                    matches!(flags.hyperlink, HyperlinkOption::Always),\n                ),\n                contents: block_str,\n            });\n        }\n    }\n\n    if flags.layout == Layout::Grid {\n        if let Some(tw) = term_width {\n            if let Some(gridded_output) = grid.fit_into_width(tw) {\n                output += &gridded_output.to_string();\n            } else {\n                //does not fit into grid, usually because (some) filename(s)\n                //are longer or almost as long as term_width\n                //print line by line instead!\n                output += &grid.fit_into_columns(1).to_string();\n            }\n        } else {\n            output += &grid.fit_into_columns(1).to_string();\n        }\n    } else {\n        output += &grid.fit_into_columns(flags.blocks.0.len()).to_string();\n    }\n\n    let should_display_folder_path = should_display_folder_path(depth, metas, flags);\n\n    // print the folder content\n    for meta in metas {\n        if meta.content.is_some() {\n            if should_display_folder_path {\n                output += &display_folder_path(meta);\n            }\n\n            let display_option = DisplayOption::Relative {\n                base_path: &meta.path,\n            };\n\n            output += &inner_display_grid(\n                &display_option,\n                meta.content.as_ref().unwrap(),\n                flags,\n                colors,\n                icons,\n                depth + 1,\n                term_width,\n            );\n        }\n    }\n\n    output\n}",
            "Real(LocalPath(\"src/display.rs\"))"
        ],
        "display::inner_display_tree": [
            "fn inner_display_tree(\n    metas: &[Meta],\n    flags: &Flags,\n    colors: &Colors,\n    icons: &Icons,\n    tree_depth_prefix: (usize, &str),\n    padding_rules: &HashMap<Block, usize>,\n    tree_index: usize,\n) -> Vec<Cell>{\n    let mut cells = Vec::new();\n    let last_idx = metas.len();\n\n    for (idx, meta) in metas.iter().enumerate() {\n        let current_prefix = if tree_depth_prefix.0 > 0 {\n            if idx + 1 != last_idx {\n                // is last folder elem\n                format!(\"{}{} \", tree_depth_prefix.1, EDGE)\n            } else {\n                format!(\"{}{} \", tree_depth_prefix.1, CORNER)\n            }\n        } else {\n            tree_depth_prefix.1.to_string()\n        };\n\n        for block in get_output(\n            meta,\n            colors,\n            icons,\n            flags,\n            &DisplayOption::FileName,\n            padding_rules,\n            (tree_index, &current_prefix),\n        ) {\n            let block_str = block.to_string();\n\n            cells.push(Cell {\n                width: get_visible_width(\n                    &block_str,\n                    matches!(flags.hyperlink, HyperlinkOption::Always),\n                ),\n                contents: block_str,\n            });\n        }\n\n        if meta.content.is_some() {\n            let new_prefix = if tree_depth_prefix.0 > 0 {\n                if idx + 1 != last_idx {\n                    // is last folder elem\n                    format!(\"{}{} \", tree_depth_prefix.1, LINE)\n                } else {\n                    format!(\"{}{} \", tree_depth_prefix.1, BLANK)\n                }\n            } else {\n                tree_depth_prefix.1.to_string()\n            };\n\n            cells.extend(inner_display_tree(\n                meta.content.as_ref().unwrap(),\n                flags,\n                colors,\n                icons,\n                (tree_depth_prefix.0 + 1, &new_prefix),\n                padding_rules,\n                tree_index,\n            ));\n        }\n    }\n\n    cells\n}",
            "Real(LocalPath(\"src/display.rs\"))"
        ],
        "display::should_display_folder_path": [
            "fn should_display_folder_path(depth: usize, metas: &[Meta], flags: &Flags) -> bool{\n    if depth > 0 {\n        true\n    } else {\n        let folder_number = metas\n            .iter()\n            .filter(|x| {\n                matches!(x.file_type, FileType::Directory { .. })\n                    || (matches!(x.file_type, FileType::SymLink { is_dir: true })\n                        && flags.layout != Layout::OneLine)\n            })\n            .count();\n\n        folder_number > 1 || folder_number < metas.len()\n    }\n}",
            "Real(LocalPath(\"src/display.rs\"))"
        ],
        "display::tree": [
            "pub fn tree(metas: &[Meta], flags: &Flags, colors: &Colors, icons: &Icons) -> String{\n    let mut grid = Grid::new(GridOptions {\n        filling: Filling::Spaces(1),\n        direction: Direction::LeftToRight,\n    });\n\n    let padding_rules = get_padding_rules(metas, flags);\n    let mut index = 0;\n    for (i, block) in flags.blocks.0.iter().enumerate() {\n        if let Block::Name = block {\n            index = i;\n            break;\n        }\n    }\n\n    for cell in inner_display_tree(metas, flags, colors, icons, (0, \"\"), &padding_rules, index) {\n        grid.add(cell);\n    }\n\n    grid.fit_into_columns(flags.blocks.0.len()).to_string()\n}",
            "Real(LocalPath(\"src/display.rs\"))"
        ],
        "flags::Configurable": [
            "/// A trait to allow a type to be configured by either command line parameters, a configuration\n/// file or a [Default] value.\npub trait Configurable<T>\nwhere\n    T: std::default::Default,\n{\n    /// Returns a value from either [ArgMatches], a [Config], a [Default] or the environment value.\n    /// The first value that is not [None] is used. The order of precedence for the value used is:\n    /// - [from_arg_matches](Configurable::from_arg_matches)\n    /// - [from_environment](Configurable::from_environment)\n    /// - [from_config](Configurable::from_config)\n    /// - [Default::default]\n    ///\n    /// # Note\n    ///\n    /// The configuration file's Yaml is read in any case, to be able to check for errors and print\n    /// out warnings.\n    fn configure_from(matches: &ArgMatches, config: &Config) -> T {\n        if let Some(value) = Self::from_arg_matches(matches) {\n            return value;\n        }\n\n        if let Some(value) = Self::from_environment() {\n            return value;\n        }\n\n        if let Some(value) = Self::from_config(config) {\n            return value;\n        }\n\n        Default::default()\n    }\n\n    /// The method to implement the value fetching from command line parameters.\n    fn from_arg_matches(matches: &ArgMatches) -> Option<T>;\n\n    /// The method to implement the value fetching from a configuration file. This should return\n    /// [None], if the [Config] does not have a [Yaml].\n    fn from_config(config: &Config) -> Option<T>;\n\n    /// The method to implement the value fetching from environment variables.\n    fn from_environment() -> Option<T> {\n        None\n    }\n}",
            "Real(LocalPath(\"src/flags.rs\"))"
        ],
        "flags::Configurable::configure_from": [
            "/// Returns a value from either [ArgMatches], a [Config], a [Default] or the environment value.\n/// The first value that is not [None] is used. The order of precedence for the value used is:\n/// - [from_arg_matches](Configurable::from_arg_matches)\n/// - [from_environment](Configurable::from_environment)\n/// - [from_config](Configurable::from_config)\n/// - [Default::default]\n///\n/// # Note\n///\n/// The configuration file's Yaml is read in any case, to be able to check for errors and print\n/// out warnings.\nfn configure_from(matches: &ArgMatches, config: &Config) -> T{\n        if let Some(value) = Self::from_arg_matches(matches) {\n            return value;\n        }\n\n        if let Some(value) = Self::from_environment() {\n            return value;\n        }\n\n        if let Some(value) = Self::from_config(config) {\n            return value;\n        }\n\n        Default::default()\n    }",
            "Real(LocalPath(\"src/flags.rs\"))"
        ],
        "flags::Configurable::from_environment": [
            "/// The method to implement the value fetching from environment variables.\nfn from_environment() -> Option<T>{\n        None\n    }",
            "Real(LocalPath(\"src/flags.rs\"))"
        ],
        "flags::Flags": [
            "/// A struct to hold all set configuration flags for the application.\npub struct Flags {\n    pub blocks: Blocks,\n    pub color: Color,\n    pub date: DateFlag,\n    pub dereference: Dereference,\n    pub display: Display,\n    pub display_indicators: Indicators,\n    pub icons: Icons,\n    pub ignore_globs: IgnoreGlobs,\n    pub layout: Layout,\n    pub no_symlink: NoSymlink,\n    pub recursion: Recursion,\n    pub size: SizeFlag,\n    pub permission: PermissionFlag,\n    pub sorting: Sorting,\n    pub total_size: TotalSize,\n    pub symlink_arrow: SymlinkArrow,\n    pub hyperlink: HyperlinkOption,\n}",
            "Real(LocalPath(\"src/flags.rs\"))"
        ],
        "flags::Flags::configure_from": [
            "/// Set up the `Flags` from either [ArgMatches], a [Config] or its [Default] value.\n///\n/// # Errors\n///\n/// This can return an [Error], when either the building of the ignore globs or the parsing of\n/// the recursion depth parameter fails.\npub fn configure_from(matches: &ArgMatches, config: &Config) -> Result<Self, Error>{\n        Ok(Self {\n            blocks: Blocks::configure_from(matches, config)?,\n            color: Color::configure_from(matches, config),\n            date: DateFlag::configure_from(matches, config),\n            dereference: Dereference::configure_from(matches, config),\n            display: Display::configure_from(matches, config),\n            layout: Layout::configure_from(matches, config),\n            size: SizeFlag::configure_from(matches, config),\n            permission: PermissionFlag::configure_from(matches, config),\n            display_indicators: Indicators::configure_from(matches, config),\n            icons: Icons::configure_from(matches, config),\n            ignore_globs: IgnoreGlobs::configure_from(matches, config)?,\n            no_symlink: NoSymlink::configure_from(matches, config),\n            recursion: Recursion::configure_from(matches, config)?,\n            sorting: Sorting::configure_from(matches, config),\n            total_size: TotalSize::configure_from(matches, config),\n            symlink_arrow: SymlinkArrow::configure_from(matches, config),\n            hyperlink: HyperlinkOption::configure_from(matches, config),\n        })\n    }",
            "Real(LocalPath(\"src/flags.rs\"))"
        ],
        "flags::blocks::Block": [
            "/// A block of data to show.\npub enum Block {\n    Permission,\n    User,\n    Group,\n    Context,\n    Size,\n    SizeValue,\n    Date,\n    Name,\n    INode,\n    Links,\n}",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "flags::blocks::Blocks": [
            "/// A struct to hold a [Vec] of [Block]s and to provide methods to create it.\npub struct Blocks(pub Vec<Block>);",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "flags::blocks::Blocks::configure_from": [
            "/// Returns a value from either [ArgMatches], a [Config] or a default value.\n/// Unless the \"long\" argument is passed, this returns [Default::default]. Otherwise the first\n/// value, that is not [None], is used. The order of precedence for the value used is:\n/// - [from_arg_matches](Blocks::from_arg_matches)\n/// - [from_config](Blocks::from_config)\n/// - [long](Blocks::long)\n///\n/// No matter if the \"long\" argument was passed, if the \"inode\" argument is passed and the\n/// `Blocks` does not contain a [Block] of variant [INode](Block::INode) yet, one is prepended\n/// to the returned value.\n///\n/// # Errors\n///\n/// This errors if any of the [ArgMatches] parameter arguments causes [Block]'s implementation\n/// of [TryFrom::try_from] to return an [Err].\npub fn configure_from(matches: &ArgMatches, config: &Config) -> Result<Self, Error>{\n        let mut result: Result<Self, Error> = if matches.is_present(\"long\") {\n            Ok(Self::long())\n        } else {\n            Ok(Default::default())\n        };\n\n        if matches.is_present(\"long\") && !matches.is_present(\"ignore-config\") {\n            if let Some(value) = Self::from_config(config) {\n                result = Ok(value);\n            }\n        }\n\n        if let Some(value) = Self::from_arg_matches(matches) {\n            result = value;\n        }\n\n        if matches.is_present(\"context\") {\n            if let Ok(blocks) = result.as_mut() {\n                blocks.optional_insert_context();\n            }\n        }\n\n        if matches.is_present(\"inode\") {\n            if let Ok(blocks) = result.as_mut() {\n                blocks.optional_prepend_inode();\n            }\n        }\n\n        result\n    }",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "flags::blocks::Blocks::contains_inode": [
            "/// Checks whether `self` already contains a [Block] of variant [INode](Block::INode).\nfn contains_inode(&self) -> bool{\n        self.0.contains(&Block::INode)\n    }",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "flags::blocks::Blocks::displays_size": [
            "pub fn displays_size(&self) -> bool{\n        self.0.contains(&Block::Size)\n    }",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "flags::blocks::Blocks::from_arg_matches": [
            "/// Get a potential `Blocks` struct from [ArgMatches].\n///\n/// If the \"blocks\" argument is passed, then this returns a `Blocks` containing the parameter\n/// values in a [Some]. Otherwise if the \"long\" argument is passed, this returns\n/// [Blocks::long]. Finally if none of the previous happened, this returns [None].\n///\n/// # Errors\n///\n/// This errors if any of the parameter arguments causes [Block]'s implementation of\n/// [TryFrom::try_from] to return an [Err].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Result<Self, Error>>{\n        if matches.occurrences_of(\"blocks\") > 0 {\n            if let Some(values) = matches.values_of(\"blocks\") {\n                let mut blocks: Vec<Block> = vec![];\n                for value in values {\n                    match Block::try_from(value) {\n                        Ok(block) => blocks.push(block),\n                        Err(message) => {\n                            return Some(Err(Error::with_description(\n                                &message,\n                                ErrorKind::ValueValidation,\n                            )))\n                        }\n                    }\n                }\n                Some(Ok(Self(blocks)))\n            } else {\n                None\n            }\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "flags::blocks::Blocks::from_config": [
            "/// Get a potential `Blocks` struct from a [Config].\n///\n/// If the [Config] contains an array of blocks values,\n/// its [String] values is returned as `Blocks` in a [Some].\n/// Otherwise it returns [None].\nfn from_config(config: &Config) -> Option<Self>{\n        if let Some(c) = &config.blocks {\n            let mut blocks: Vec<Block> = vec![];\n            for b in c.iter() {\n                match Block::try_from(b.as_str()) {\n                    Ok(block) => blocks.push(block),\n                    Err(err) => print_error!(\"{}.\", err),\n                }\n            }\n            if blocks.is_empty() {\n                None\n            } else {\n                Some(Self(blocks))\n            }\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "flags::blocks::Blocks::long": [
            "/// This returns a Blocks struct for the long format.\n///\n/// It contains the [Block]s [Permission](Block::Permission), [User](Block::User),\n/// [Group](Block::Group), [Size](Block::Size), [Date](Block::Date) and [Name](Block::Name).\nfn long() -> Self{\n        Self(vec![\n            Block::Permission,\n            Block::User,\n            Block::Group,\n            Block::Size,\n            Block::Date,\n            Block::Name,\n        ])\n    }",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "flags::blocks::Blocks::optional_insert_context": [
            "/// Tnserts a [Block] of variant [INode](Block::Context), if `self` does not already contain a\n/// [Block] of that variant. The positioning will be best-effort approximation of coreutils\n/// ls position for a security context\nfn optional_insert_context(&mut self){\n        if self.0.contains(&Block::Context) {\n            return;\n        }\n        let mut pos = self.0.iter().position(|elem| *elem == Block::Group);\n        if pos.is_none() {\n            pos = self.0.iter().position(|elem| *elem == Block::User);\n        }\n        match pos {\n            Some(pos) => self.0.insert(pos + 1, Block::Context),\n            None => self.0.insert(0, Block::Context),\n        }\n    }",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "flags::blocks::Blocks::optional_prepend_inode": [
            "/// Prepends a [Block] of variant [INode](Block::INode), if `self` does not already contain a\n/// Block of that variant.\nfn optional_prepend_inode(&mut self){\n        if !self.contains_inode() {\n            self.prepend_inode()\n        }\n    }",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "flags::blocks::Blocks::prepend_inode": [
            "/// Prepends a [Block] of variant [INode](Block::INode) to `self`.\nfn prepend_inode(&mut self){\n        self.0.insert(0, Block::INode);\n    }",
            "Real(LocalPath(\"src/flags/blocks.rs\"))"
        ],
        "flags::color::Color": [
            "/// A collection of flags on how to use colors.\npub struct Color {\n    /// When to use color.\n    pub when: ColorOption,\n    pub theme: ThemeOption,\n}",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "flags::color::Color::configure_from": [
            "/// Get a `Color` struct from [ArgMatches], a [Config] or the [Default] values.\n///\n/// The [ColorOption] is configured with their respective [Configurable] implementation.\npub fn configure_from(matches: &ArgMatches, config: &Config) -> Self{\n        let when = ColorOption::configure_from(matches, config);\n        let theme = ThemeOption::from_config(config);\n        Self { when, theme }\n    }",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "flags::color::ColorOption": [
            "/// The flag showing when to use colors in the output.\n#[serde(rename_all = \"kebab-case\")]\npub enum ColorOption {\n    Always,\n    Auto,\n    Never,\n}",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "flags::color::ColorOption::from_str": [
            "/// Get a Color value from a [String].\nfn from_str(value: &str) -> Option<Self>{\n        match value {\n            \"always\" => Some(Self::Always),\n            \"auto\" => Some(Self::Auto),\n            \"never\" => Some(Self::Never),\n            _ => {\n                print_error!(\n                    \"Config color.when could only be one of auto, always and never, got {}.\",\n                    &value\n                );\n                None\n            }\n        }\n    }",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "flags::color::ThemeOption": [
            "/// ThemeOption could be one of the following:\n/// Custom(*.yaml): use the YAML theme file as theme file\n/// if error happened, use the default theme\npub enum ThemeOption {\n    NoColor,\n    Default,\n    #[allow(dead_code)]\n    NoLscolors,\n    Custom(String),\n}",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "flags::color::ThemeOption::from_config": [
            "fn from_config(config: &Config) -> ThemeOption{\n        if let Some(classic) = config.classic {\n            if classic {\n                return ThemeOption::NoColor;\n            }\n        }\n        if let Some(c) = &config.color {\n            if let Some(t) = &c.theme {\n                return t.clone();\n            }\n        }\n\n        ThemeOption::default()\n    }",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/color.rs\"))"
        ],
        "flags::date::DateFlag": [
            "/// The flag showing which kind of time stamps to display.\npub enum DateFlag {\n    Date,\n    Relative,\n    Iso,\n    Formatted(String),\n}",
            "Real(LocalPath(\"src/flags/date.rs\"))"
        ],
        "flags::date::DateFlag::from_format_string": [
            "/// Get a value from a date format string\nfn from_format_string(value: &str) -> Option<Self>{\n        match app::validate_time_format(value) {\n            Ok(()) => Some(Self::Formatted(value[1..].to_string())),\n            _ => {\n                print_error!(\"Not a valid date format: {}.\", value);\n                None\n            }\n        }\n    }",
            "Real(LocalPath(\"src/flags/date.rs\"))"
        ],
        "flags::date::DateFlag::from_str": [
            "/// Get a value from a str.\nfn from_str(value: &str) -> Option<Self>{\n        match value {\n            \"date\" => Some(Self::Date),\n            \"relative\" => Some(Self::Relative),\n            _ if value.starts_with('+') => Self::from_format_string(value),\n            _ => {\n                print_error!(\"Not a valid date value: {}.\", value);\n                None\n            }\n        }\n    }",
            "Real(LocalPath(\"src/flags/date.rs\"))"
        ],
        "flags::dereference::Dereference": [
            "/// The flag showing whether to dereference symbolic links.\npub struct Dereference(pub bool);",
            "Real(LocalPath(\"src/flags/dereference.rs\"))"
        ],
        "flags::display::Display": [
            "/// The flag showing which file system nodes to display.\n#[serde(rename_all = \"kebab-case\")]\npub enum Display {\n    All,\n    AlmostAll,\n    DirectoryOnly,\n    VisibleOnly,\n}",
            "Real(LocalPath(\"src/flags/display.rs\"))"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/flags/display.rs\"))"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/display.rs\"))"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/display.rs\"))"
        ],
        "flags::hyperlink::HyperlinkOption": [
            "/// The flag showing when to use hyperlink in the output.\n#[serde(rename_all = \"kebab-case\")]\npub enum HyperlinkOption {\n    Always,\n    Auto,\n    Never,\n}",
            "Real(LocalPath(\"src/flags/hyperlink.rs\"))"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/flags/hyperlink.rs\"))"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/hyperlink.rs\"))"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/hyperlink.rs\"))"
        ],
        "flags::icons::IconOption": [
            "/// The flag showing when to use icons in the output.\n#[serde(rename_all = \"kebab-case\")]\npub enum IconOption {\n    Always,\n    Auto,\n    Never,\n}",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "flags::icons::IconSeparator": [
            "#[serde(rename_all = \"kebab-case\")]\npub struct IconSeparator(pub String);",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "flags::icons::IconTheme": [
            "/// The flag showing which icon theme to use.\n#[serde(rename_all = \"kebab-case\")]\npub enum IconTheme {\n    Unicode,\n    Fancy,\n}",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "flags::icons::Icons": [
            "/// A collection of flags on how to use icons.\npub struct Icons {\n    /// When to use icons.\n    pub when: IconOption,\n    /// Which icon theme to use.\n    pub theme: IconTheme,\n    /// String between icon and name.\n    pub separator: IconSeparator,\n}",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "flags::icons::Icons::configure_from": [
            "/// Get an `Icons` struct from [ArgMatches], a [Config] or the [Default] values.\n///\n/// The [IconOption] and [IconTheme] are configured with their respective [Configurable]\n/// implementation.\npub fn configure_from(matches: &ArgMatches, config: &Config) -> Self{\n        let when = IconOption::configure_from(matches, config);\n        let theme = IconTheme::configure_from(matches, config);\n        let separator = IconSeparator::configure_from(matches, config);\n        Self {\n            when,\n            theme,\n            separator,\n        }\n    }",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/icons.rs\"))"
        ],
        "flags::ignore_globs::IgnoreGlobs": [
            "/// The struct holding a [GlobSet] and methods to build it.\npub struct IgnoreGlobs(pub GlobSet);",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))"
        ],
        "flags::ignore_globs::IgnoreGlobs::configure_from": [
            "/// Returns a value from either [ArgMatches], a [Config] or a [Default] value. The first value\n/// that is not [None] is used. The order of precedence for the value used is:\n/// - [from_arg_matches](IgnoreGlobs::from_arg_matches)\n/// - [from_config](IgnoreGlobs::from_config)\n/// - [Default::default]\n///\n/// # Errors\n///\n/// If either of the [Glob::new] or [GlobSetBuilder.build] methods return an [Err].\npub fn configure_from(matches: &ArgMatches, config: &Config) -> Result<Self, Error>{\n        let mut result: Result<Self, Error> = Ok(Default::default());\n\n        if !matches.is_present(\"ignore-config\") {\n            if let Some(value) = Self::from_config(config) {\n                match value {\n                    Ok(glob_set) => result = Ok(Self(glob_set)),\n                    Err(err) => result = Err(err),\n                }\n            }\n        }\n\n        if let Some(value) = Self::from_arg_matches(matches) {\n            match value {\n                Ok(glob_set) => result = Ok(Self(glob_set)),\n                Err(err) => result = Err(err),\n            }\n        }\n\n        result\n    }",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))"
        ],
        "flags::ignore_globs::IgnoreGlobs::create_glob": [
            "/// Create a [Glob] from a provided pattern.\n///\n/// This method is mainly a helper to wrap the handling of potential errors.\nfn create_glob(pattern: &str) -> Result<Glob, Error>{\n        match Glob::new(pattern) {\n            Ok(glob) => Ok(glob),\n            Err(err) => Err(Error::with_description(\n                &err.to_string(),\n                ErrorKind::ValueValidation,\n            )),\n        }\n    }",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))"
        ],
        "flags::ignore_globs::IgnoreGlobs::create_glob_set": [
            "/// Create a [GlobSet] from a provided [GlobSetBuilder].\n///\n/// This method is mainly a helper to wrap the handling of potential errors.\nfn create_glob_set(builder: &GlobSetBuilder) -> Result<GlobSet, Error>{\n        match builder.build() {\n            Ok(glob_set) => Ok(glob_set),\n            Err(err) => Err(Error::with_description(\n                &err.to_string(),\n                ErrorKind::ValueValidation,\n            )),\n        }\n    }",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))"
        ],
        "flags::ignore_globs::IgnoreGlobs::from_arg_matches": [
            "/// Get a potential [GlobSet] from [ArgMatches].\n///\n/// If the \"ignore-glob\" argument has been passed, this returns a [Result] in a [Some] with\n/// either the built [GlobSet] or an [Error], if any error was encountered while creating the\n/// [GlobSet]. If the argument has not been passed, this returns [None].\nfn from_arg_matches(matches: &ArgMatches) -> Option<Result<GlobSet, Error>>{\n        if matches.occurrences_of(\"ignore-glob\") > 0 {\n            if let Some(values) = matches.values_of(\"ignore-glob\") {\n                let mut glob_set_builder = GlobSetBuilder::new();\n                for value in values {\n                    match Self::create_glob(value) {\n                        Ok(glob) => {\n                            glob_set_builder.add(glob);\n                        }\n                        Err(err) => return Some(Err(err)),\n                    }\n                }\n                Some(Self::create_glob_set(&glob_set_builder))\n            } else {\n                None\n            }\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))"
        ],
        "flags::ignore_globs::IgnoreGlobs::from_config": [
            "/// Get a potential [GlobSet] from a [Config].\n///\n/// If the `Config::ignore-globs` contains an Array of Strings,\n/// each of its values is used to build the [GlobSet]. If the building\n/// succeeds, the [GlobSet] is returned in the [Result] in a [Some]. If any error is\n/// encountered while building, an [Error] is returned in the Result instead. If the Config does\n/// not contain such a key, this returns [None].\nfn from_config(config: &Config) -> Option<Result<GlobSet, Error>>{\n        if let Some(globs) = &config.ignore_globs {\n            let mut glob_set_builder = GlobSetBuilder::new();\n            for glob in globs.iter() {\n                match Self::create_glob(glob) {\n                    Ok(glob) => {\n                        glob_set_builder.add(glob);\n                    }\n                    Err(err) => return Some(Err(err)),\n                }\n            }\n            Some(Self::create_glob_set(&glob_set_builder))\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))"
        ],
        "flags::indicators::Indicators": [
            "/// The flag showing whether to print file type indicators.\npub struct Indicators(pub bool);",
            "Real(LocalPath(\"src/flags/indicators.rs\"))"
        ],
        "flags::layout::Layout": [
            "/// The flag showing which output layout to print.\n#[serde(rename_all = \"lowercase\")]\npub enum Layout {\n    Grid,\n    Tree,\n    OneLine,\n}",
            "Real(LocalPath(\"src/flags/layout.rs\"))"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/flags/layout.rs\"))"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/layout.rs\"))"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/layout.rs\"))"
        ],
        "flags::permission::PermissionFlag": [
            "/// The flag showing which file permissions units to use.\n#[serde(rename_all = \"kebab-case\")]\npub enum PermissionFlag {\n    /// The variant to show file permissions in rwx format\n    Rwx,\n    /// The variant to show file permissions in octal format\n    Octal,\n}",
            "Real(LocalPath(\"src/flags/permission.rs\"))"
        ],
        "flags::permission::PermissionFlag::from_str": [
            "fn from_str(value: &str) -> Option<Self>{\n        match value {\n            \"rwx\" => Some(Self::Rwx),\n            \"octal\" => Some(Self::Octal),\n            _ => {\n                panic!(\n                    \"Permissions can only be one of rwx or octal, but got {}.\",\n                    value\n                );\n            }\n        }\n    }",
            "Real(LocalPath(\"src/flags/permission.rs\"))"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/flags/permission.rs\"))"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/permission.rs\"))"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/permission.rs\"))"
        ],
        "flags::recursion::Recursion": [
            "/// The options relating to recursion.\npub struct Recursion {\n    /// Whether the recursion into directories is enabled.\n    pub enabled: bool,\n    /// The depth for how far to recurse into directories.\n    pub depth: usize,\n}",
            "Real(LocalPath(\"src/flags/recursion.rs\"))"
        ],
        "flags::recursion::Recursion::configure_from": [
            "/// Get the Recursion from either [ArgMatches], a [Config] or the [Default] value.\n///\n/// The \"enabled\" value is determined by [enabled_from](Recursion::enabled_from) and the depth\n/// value is determined by [depth_from](Recursion::depth_from).\n///\n/// # Errors\n///\n/// If [depth_from](Recursion::depth_from) returns an [Error], this returns it.\npub fn configure_from(matches: &ArgMatches, config: &Config) -> Result<Self, Error>{\n        let enabled = Self::enabled_from(matches, config);\n        let depth = Self::depth_from(matches, config)?;\n        Ok(Self { enabled, depth })\n    }",
            "Real(LocalPath(\"src/flags/recursion.rs\"))"
        ],
        "flags::recursion::Recursion::depth_from": [
            "/// Get the \"depth\" integer from [ArgMatches], a [Config] or the [Default] value. The first\n/// value that is not [None] is used. The order of precedence for the value used is:\n/// - [depth_from_arg_matches](Recursion::depth_from_arg_matches)\n/// - [Config.recursion.depth]\n/// - [Default::default]\n///\n/// # Note\n///\n/// If both configuration file and Args is error, this will return a Max-Uint value.\n///\n/// # Errors\n///\n/// If [depth_from_arg_matches](Recursion::depth_from_arg_matches) returns an [Error], this\n/// returns it.\nfn depth_from(matches: &ArgMatches, config: &Config) -> Result<usize, Error>{\n        if let Some(value) = Self::depth_from_arg_matches(matches) {\n            return value;\n        }\n\n        if let Some(recursion) = &config.recursion {\n            if let Some(depth) = recursion.depth {\n                return Ok(depth);\n            }\n        }\n\n        Ok(usize::max_value())\n    }",
            "Real(LocalPath(\"src/flags/recursion.rs\"))"
        ],
        "flags::recursion::Recursion::depth_from_arg_matches": [
            "/// Get a potential \"depth\" value from [ArgMatches].\n///\n/// If the \"depth\" argument is passed, its parameter is evaluated. If it can be parsed into a\n/// [usize], the [Result] is returned in the [Some]. If it can not be parsed an [Error] is\n/// returned in the [Some]. If the argument has not been passed, a [None] is returned.\n///\n/// # Errors\n///\n/// If the parameter to the \"depth\" argument can not be parsed, this returns an [Error] in a\n/// [Some].\nfn depth_from_arg_matches(matches: &ArgMatches) -> Option<Result<usize, Error>>{\n        let depth = match matches.values_of(\"depth\") {\n            Some(d) => d.last(),\n            None => None,\n        };\n        if let Some(str) = depth {\n            match str.parse::<usize>() {\n                Ok(value) => return Some(Ok(value)),\n                Err(_) => {\n                    return Some(Err(Error::with_description(\n                        \"The argument '--depth' requires a valid positive number.\",\n                        ErrorKind::ValueValidation,\n                    )))\n                }\n            }\n        }\n        None\n    }",
            "Real(LocalPath(\"src/flags/recursion.rs\"))"
        ],
        "flags::recursion::Recursion::enabled_from": [
            "/// Get the \"enabled\" boolean from [ArgMatches], a [Config] or the [Default] value. The first\n/// value that is not [None] is used. The order of precedence for the value used is:\n/// - [enabled_from_arg_matches](Recursion::enabled_from_arg_matches)\n/// - [Config.recursion.enabled]\n/// - [Default::default]\nfn enabled_from(matches: &ArgMatches, config: &Config) -> bool{\n        if let Some(value) = Self::enabled_from_arg_matches(matches) {\n            return value;\n        }\n        if let Some(recursion) = &config.recursion {\n            if let Some(enabled) = recursion.enabled {\n                return enabled;\n            }\n        }\n\n        Default::default()\n    }",
            "Real(LocalPath(\"src/flags/recursion.rs\"))"
        ],
        "flags::recursion::Recursion::enabled_from_arg_matches": [
            "/// Get a potential \"enabled\" boolean from [ArgMatches].\n///\n/// If the \"recursive\" argument is passed, this returns `true` in a [Some]. Otherwise this\n/// returns [None].\nfn enabled_from_arg_matches(matches: &ArgMatches) -> Option<bool>{\n        if matches.is_present(\"recursive\") {\n            Some(true)\n        } else {\n            None\n        }\n    }",
            "Real(LocalPath(\"src/flags/recursion.rs\"))"
        ],
        "flags::size::SizeFlag": [
            "/// The flag showing which file size units to use.\n#[serde(rename_all = \"kebab-case\")]\npub enum SizeFlag {\n    /// The variant to show file size with SI unit prefix and a B for bytes.\n    Default,\n    /// The variant to show file size with only the SI unit prefix.\n    Short,\n    /// The variant to show file size in bytes.\n    Bytes,\n}",
            "Real(LocalPath(\"src/flags/size.rs\"))"
        ],
        "flags::size::SizeFlag::from_str": [
            "fn from_str(value: &str) -> Option<Self>{\n        match value {\n            \"default\" => Some(Self::Default),\n            \"short\" => Some(Self::Short),\n            \"bytes\" => Some(Self::Bytes),\n            _ => {\n                panic!(\n                    \"Size can only be one of default, short or bytes, but got {}.\",\n                    value\n                );\n            }\n        }\n    }",
            "Real(LocalPath(\"src/flags/size.rs\"))"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/flags/size.rs\"))"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/size.rs\"))"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/size.rs\"))"
        ],
        "flags::sorting::DirGrouping": [
            "/// The flag showing where to place directories.\n#[serde(rename_all = \"kebab-case\")]\npub enum DirGrouping {\n    None,\n    First,\n    Last,\n}",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "flags::sorting::DirGrouping::from_str": [
            "fn from_str(value: &str) -> Option<Self>{\n        match value {\n            \"first\" => Some(Self::First),\n            \"last\" => Some(Self::Last),\n            \"none\" => Some(Self::None),\n            _ => panic!(\n                \"Group Dir can only be one of first, last or none, but got {}.\",\n                value\n            ),\n        }\n    }",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "flags::sorting::SortColumn": [
            "/// The flag showing which column to use for sorting.\n#[serde(rename_all = \"kebab-case\")]\npub enum SortColumn {\n    None,\n    Extension,\n    Name,\n    Time,\n    Size,\n    Version,\n}",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "flags::sorting::SortOrder": [
            "/// The flag showing which sort order to use.\npub enum SortOrder {\n    Default,\n    Reverse,\n}",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "flags::sorting::Sorting": [
            "/// A collection of flags on how to sort the output.\npub struct Sorting {\n    pub column: SortColumn,\n    pub order: SortOrder,\n    pub dir_grouping: DirGrouping,\n}",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "flags::sorting::Sorting::configure_from": [
            "/// Get a `Sorting` struct from [ArgMatches], a [Config] or the [Default] values.\n///\n/// The [SortColumn], [SortOrder] and [DirGrouping] are configured with their respective\n/// [Configurable] implementation.\npub fn configure_from(matches: &ArgMatches, config: &Config) -> Self{\n        let column = SortColumn::configure_from(matches, config);\n        let order = SortOrder::configure_from(matches, config);\n        let dir_grouping = DirGrouping::configure_from(matches, config);\n        Self {\n            column,\n            order,\n            dir_grouping,\n        }\n    }",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field": [
            "Deserialize\nDeserialize",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor": [
            "Deserialize",
            "Real(LocalPath(\"src/flags/sorting.rs\"))"
        ],
        "flags::symlink_arrow::SymlinkArrow": [
            "/// The flag showing how to display symbolic arrow.\npub struct SymlinkArrow(String);",
            "Real(LocalPath(\"src/flags/symlink_arrow.rs\"))"
        ],
        "flags::symlinks::NoSymlink": [
            "/// The flag showing whether to follow symbolic links.\npub struct NoSymlink(pub bool);",
            "Real(LocalPath(\"src/flags/symlinks.rs\"))"
        ],
        "flags::total_size::TotalSize": [
            "/// The flag showing whether to show the total size for directories.\npub struct TotalSize(pub bool);",
            "Real(LocalPath(\"src/flags/total_size.rs\"))"
        ],
        "icon::Icons": [
            "pub struct Icons {\n    display_icons: bool,\n    icons_by_name: HashMap<&'static str, &'static str>,\n    icons_by_extension: HashMap<&'static str, &'static str>,\n    default_folder_icon: &'static str,\n    default_file_icon: &'static str,\n    icon_separator: String,\n}",
            "Real(LocalPath(\"src/icon.rs\"))"
        ],
        "icon::Icons::get": [
            "pub fn get(&self, name: &Name) -> String{\n        if !self.display_icons {\n            return String::new();\n        }\n\n        // Check file types\n        let file_type: FileType = name.file_type();\n\n        let icon = if let FileType::Directory { .. } = file_type {\n            self.default_folder_icon\n        } else if let FileType::SymLink { is_dir: true } = file_type {\n            \"\\u{f482}\" // \"\"\n        } else if let FileType::SymLink { is_dir: false } = file_type {\n            \"\\u{f481}\" // \"\"\n        } else if let FileType::Socket = file_type {\n            \"\\u{f6a7}\" // \"\"\n        } else if let FileType::Pipe = file_type {\n            \"\\u{f731}\" // \"\"\n        } else if let FileType::CharDevice = file_type {\n            \"\\u{e601}\" // \"\"\n        } else if let FileType::BlockDevice = file_type {\n            \"\\u{fc29}\" // \"ﰩ\"\n        } else if let FileType::Special = file_type {\n            \"\\u{f2dc}\" // \"\"\n        } else if let Some(icon) = self\n            .icons_by_name\n            .get(name.file_name().to_lowercase().as_str())\n        {\n            // Use the known names.\n            icon\n        } else if let Some(icon) = name.extension().and_then(|extension| {\n            self.icons_by_extension\n                .get(extension.to_lowercase().as_str())\n        }) {\n            // Use the known extensions.\n            icon\n        } else {\n            // Use the default icons.\n            self.default_file_icon\n        };\n\n        format!(\"{}{}\", icon, self.icon_separator)\n    }",
            "Real(LocalPath(\"src/icon.rs\"))"
        ],
        "icon::Icons::get_default_icons_by_extension": [
            "fn get_default_icons_by_extension() -> HashMap<&'static str, &'static str>{\n        let mut m = HashMap::new();\n\n        // Note: extensions must be lower-case\n\n        m.insert(\"7z\", \"\\u{f410}\"); // \"\"\n        m.insert(\"ai\", \"\\u{e7b4}\"); // \"\"\n        m.insert(\"apk\", \"\\u{e70e}\"); // \"\"\n        m.insert(\"avi\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"avro\", \"\\u{e60b}\"); // \"\"\n        m.insert(\"awk\", \"\\u{f489}\"); // \"\"\n        m.insert(\"bash\", \"\\u{f489}\"); // \"\"\n        m.insert(\"bash_history\", \"\\u{f489}\"); // \"\"\n        m.insert(\"bash_profile\", \"\\u{f489}\"); // \"\"\n        m.insert(\"bashrc\", \"\\u{f489}\"); // \"\"\n        m.insert(\"bat\", \"\\u{f17a}\"); // \"\"\n        m.insert(\"bio\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"bmp\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"bz2\", \"\\u{f410}\"); // \"\"\n        m.insert(\"c\", \"\\u{e61e}\"); // \"\"\n        m.insert(\"c++\", \"\\u{e61d}\"); // \"\"\n        m.insert(\"cc\", \"\\u{e61d}\"); // \"\"\n        m.insert(\"cfg\", \"\\u{e615}\"); // \"\"\n        m.insert(\"clj\", \"\\u{e768}\"); // \"\"\n        m.insert(\"cljs\", \"\\u{e76a}\"); // \"\"\n        m.insert(\"cls\", \"\\u{e600}\"); // \"\"\n        m.insert(\"coffee\", \"\\u{f0f4}\"); // \"\"\n        m.insert(\"conf\", \"\\u{e615}\"); // \"\"\n        m.insert(\"cp\", \"\\u{e61d}\"); // \"\"\n        m.insert(\"cpp\", \"\\u{e61d}\"); // \"\"\n        m.insert(\"cs\", \"\\u{f81a}\"); // \"\"\n        m.insert(\"cshtml\", \"\\u{f1fa}\"); // \"\"\n        m.insert(\"csproj\", \"\\u{f81a}\"); // \"\"\n        m.insert(\"csx\", \"\\u{f81a}\"); // \"\"\n        m.insert(\"csh\", \"\\u{f489}\"); // \"\"\n        m.insert(\"css\", \"\\u{e749}\"); // \"\"\n        m.insert(\"csv\", \"\\u{f1c3}\"); // \"\"\n        m.insert(\"cxx\", \"\\u{e61d}\"); // \"\"\n        m.insert(\"d\", \"\\u{e7af}\"); // \"\"\n        m.insert(\"dart\", \"\\u{e798}\"); // \"\"\n        m.insert(\"db\", \"\\u{f1c0}\"); // \"\"\n        m.insert(\"diff\", \"\\u{f440}\"); // \"\"\n        m.insert(\"doc\", \"\\u{f1c2}\"); // \"\"\n        m.insert(\"dockerfile\", \"\\u{f308}\"); // \"\"\n        m.insert(\"docx\", \"\\u{f1c2}\"); // \"\"\n        m.insert(\"ds_store\", \"\\u{f179}\"); // \"\"\n        m.insert(\"dump\", \"\\u{f1c0}\"); // \"\"\n        m.insert(\"ebook\", \"\\u{e28b}\"); // \"\"\n        m.insert(\"editorconfig\", \"\\u{e615}\"); // \"\"\n        m.insert(\"ejs\", \"\\u{e618}\"); // \"\"\n        m.insert(\"elm\", \"\\u{e62c}\"); // \"\"\n        m.insert(\"env\", \"\\u{f462}\"); // \"\"\n        m.insert(\"eot\", \"\\u{f031}\"); // \"\"\n        m.insert(\"epub\", \"\\u{e28a}\"); // \"\"\n        m.insert(\"erb\", \"\\u{e73b}\"); // \"\"\n        m.insert(\"erl\", \"\\u{e7b1}\"); // \"\"\n        m.insert(\"exe\", \"\\u{f17a}\"); // \"\"\n        m.insert(\"ex\", \"\\u{e62d}\"); // \"\"\n        m.insert(\"exs\", \"\\u{e62d}\"); // \"\"\n        m.insert(\"fish\", \"\\u{f489}\"); // \"\"\n        m.insert(\"flac\", \"\\u{f001}\"); // \"\"\n        m.insert(\"flv\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"font\", \"\\u{f031}\"); // \"\"\n        m.insert(\"fpl\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"fs\", \"\\u{e7a7}\"); // \"\"\n        m.insert(\"fsx\", \"\\u{e7a7}\"); // \"\"\n        m.insert(\"fsi\", \"\\u{e7a7}\"); // \"\"\n        m.insert(\"gdoc\", \"\\u{f1c2}\"); // \"\"\n        m.insert(\"gemfile\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"gemspec\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"gform\", \"\\u{f298}\"); // \"\"\n        m.insert(\"gif\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"git\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\"go\", \"\\u{e626}\"); // \"\"\n        m.insert(\"gradle\", \"\\u{e70e}\"); // \"\"\n        m.insert(\"gsheet\", \"\\u{f1c3}\"); // \"\"\n        m.insert(\"gslides\", \"\\u{f1c4}\"); // \"\"\n        m.insert(\"guardfile\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"gz\", \"\\u{f410}\"); // \"\"\n        m.insert(\"h\", \"\\u{f0fd}\"); // \"\"\n        m.insert(\"hbs\", \"\\u{e60f}\"); // \"\"\n        m.insert(\"heic\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"heif\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"heix\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"hpp\", \"\\u{f0fd}\"); // \"\"\n        m.insert(\"hs\", \"\\u{e777}\"); // \"\"\n        m.insert(\"htm\", \"\\u{f13b}\"); // \"\"\n        m.insert(\"html\", \"\\u{f13b}\"); // \"\"\n        m.insert(\"hxx\", \"\\u{f0fd}\"); // \"\"\n        m.insert(\"ico\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"image\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"iml\", \"\\u{e7b5}\"); // \"\"\n        m.insert(\"ini\", \"\\u{e615}\"); // \"\"\n        m.insert(\"ipynb\", \"\\u{e606}\"); // \"\"\n        m.insert(\"jar\", \"\\u{e204}\"); // \"\"\n        m.insert(\"java\", \"\\u{e204}\"); // \"\"\n        m.insert(\"jpeg\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"jpg\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"js\", \"\\u{e74e}\"); // \"\"\n        m.insert(\"json\", \"\\u{e60b}\"); // \"\"\n        m.insert(\"jsx\", \"\\u{e7ba}\"); // \"\"\n        m.insert(\"jl\", \"\\u{e624}\"); // \"\"\n        m.insert(\"ksh\", \"\\u{f489}\"); // \"\"\n        m.insert(\"less\", \"\\u{e758}\"); // \"\"\n        m.insert(\"lhs\", \"\\u{e777}\"); // \"\"\n        m.insert(\"license\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"localized\", \"\\u{f179}\"); // \"\"\n        m.insert(\"lock\", \"\\u{f023}\"); // \"\"\n        m.insert(\"log\", \"\\u{f18d}\"); // \"\"\n        m.insert(\"lua\", \"\\u{e620}\"); // \"\"\n        m.insert(\"lz\", \"\\u{f410}\"); // \"\"\n        m.insert(\"m3u\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"m3u8\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"m4a\", \"\\u{f001}\"); // \"\"\n        m.insert(\"magnet\", \"\\u{f076}\"); // \"\"\n        m.insert(\"markdown\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"md\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"mjs\", \"\\u{e74e}\"); // \"\"\n        m.insert(\"mkd\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"mkv\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"mobi\", \"\\u{e28b}\"); // \"\"\n        m.insert(\"mov\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"mp3\", \"\\u{f001}\"); // \"\"\n        m.insert(\"mp4\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"mustache\", \"\\u{e60f}\"); // \"\"\n        m.insert(\"nix\", \"\\u{f313}\"); // \"\"\n        m.insert(\"npmignore\", \"\\u{e71e}\"); // \"\"\n        m.insert(\"opus\", \"\\u{f001}\"); // \"\"\n        m.insert(\"ogg\", \"\\u{f001}\"); // \"\"\n        m.insert(\"ogv\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"otf\", \"\\u{f031}\"); // \"\"\n        m.insert(\"pdf\", \"\\u{f1c1}\"); // \"\"\n        m.insert(\"pem\", \"\\u{f805}\"); // \"\"\n        m.insert(\"php\", \"\\u{e73d}\"); // \"\"\n        m.insert(\"pl\", \"\\u{e769}\"); // \"\"\n        m.insert(\"pls\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"pm\", \"\\u{e769}\"); // \"\"\n        m.insert(\"png\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"ppt\", \"\\u{f1c4}\"); // \"\"\n        m.insert(\"pptx\", \"\\u{f1c4}\"); // \"\"\n        m.insert(\"procfile\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"properties\", \"\\u{e60b}\"); // \"\"\n        m.insert(\"ps1\", \"\\u{f489}\"); // \"\"\n        m.insert(\"psd\", \"\\u{e7b8}\"); // \"\"\n        m.insert(\"pxm\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"py\", \"\\u{e606}\"); // \"\"\n        m.insert(\"pyc\", \"\\u{e606}\"); // \"\"\n        m.insert(\"r\", \"\\u{f25d}\"); // \"\"\n        m.insert(\"rakefile\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"rar\", \"\\u{f410}\"); // \"\"\n        m.insert(\"razor\", \"\\u{f1fa}\"); // \"\"\n        m.insert(\"rb\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"rdata\", \"\\u{f25d}\"); // \"\"\n        m.insert(\"rdb\", \"\\u{e76d}\"); // \"\"\n        m.insert(\"rdoc\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"rds\", \"\\u{f25d}\"); // \"\"\n        m.insert(\"readme\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"rlib\", \"\\u{e7a8}\"); // \"\"\n        m.insert(\"rmd\", \"\\u{f48a}\"); // \"\"\n        m.insert(\"rs\", \"\\u{e7a8}\"); // \"\"\n        m.insert(\"rspec\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"rspec_parallel\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"rspec_status\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"rss\", \"\\u{f09e}\"); // \"\"\n        m.insert(\"ru\", \"\\u{e21e}\"); // \"\"\n        m.insert(\"rubydoc\", \"\\u{e73b}\"); // \"\"\n        m.insert(\"sass\", \"\\u{e603}\"); // \"\"\n        m.insert(\"scala\", \"\\u{e737}\"); // \"\"\n        m.insert(\"scpt\", \"\\u{f302}\"); // \"\"\n        m.insert(\"scss\", \"\\u{e749}\"); // \"\"\n        m.insert(\"sh\", \"\\u{f489}\"); // \"\"\n        m.insert(\"shell\", \"\\u{f489}\"); // \"\"\n        m.insert(\"slim\", \"\\u{e73b}\"); // \"\"\n        m.insert(\"sln\", \"\\u{e70c}\"); // \"\"\n        m.insert(\"sql\", \"\\u{f1c0}\"); // \"\"\n        m.insert(\"sqlite3\", \"\\u{e7c4}\"); // \"\"\n        m.insert(\"styl\", \"\\u{e600}\"); // \"\"\n        m.insert(\"stylus\", \"\\u{e600}\"); // \"\"\n        m.insert(\"svg\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"swift\", \"\\u{e755}\"); // \"\"\n        m.insert(\"t\", \"\\u{e769}\"); // \"\"\n        m.insert(\"tar\", \"\\u{f410}\"); // \"\"\n        m.insert(\"tex\", \"\\u{e600}\"); // \"\"\n        m.insert(\"tiff\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"toml\", \"\\u{e60b}\"); // \"\"\n        m.insert(\"torrent\", \"\\u{f98c}\"); // \"歷\"\n        m.insert(\"ts\", \"\\u{e628}\"); // \"\"\n        m.insert(\"tsx\", \"\\u{e7ba}\"); // \"\"\n        m.insert(\"ttc\", \"\\u{f031}\"); // \"\"\n        m.insert(\"ttf\", \"\\u{f031}\"); // \"\"\n        m.insert(\"twig\", \"\\u{e61c}\"); // \"\"\n        m.insert(\"txt\", \"\\u{f15c}\"); // \"\"\n        m.insert(\"video\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"vim\", \"\\u{e62b}\"); // \"\"\n        m.insert(\"vlc\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"vue\", \"\\u{fd42}\"); // \"﵂\"\n        m.insert(\"wav\", \"\\u{f001}\"); // \"\"\n        m.insert(\"webm\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"webp\", \"\\u{f1c5}\"); // \"\"\n        m.insert(\"windows\", \"\\u{f17a}\"); // \"\"\n        m.insert(\"wma\", \"\\u{f001}\"); // \"\"\n        m.insert(\"wmv\", \"\\u{f03d}\"); // \"\"\n        m.insert(\"wpl\", \"\\u{f910}\"); // \"蘿\"\n        m.insert(\"woff\", \"\\u{f031}\"); // \"\"\n        m.insert(\"woff2\", \"\\u{f031}\"); // \"\"\n        m.insert(\"xls\", \"\\u{f1c3}\"); // \"\"\n        m.insert(\"xlsx\", \"\\u{f1c3}\"); // \"\"\n        m.insert(\"xml\", \"\\u{e619}\"); // \"\"\n        m.insert(\"xul\", \"\\u{e619}\"); // \"\"\n        m.insert(\"xz\", \"\\u{f410}\"); // \"\"\n        m.insert(\"yaml\", \"\\u{e60b}\"); // \"\"\n        m.insert(\"yml\", \"\\u{e60b}\"); // \"\"\n        m.insert(\"zip\", \"\\u{f410}\"); // \"\"\n        m.insert(\"zsh\", \"\\u{f489}\"); // \"\"\n        m.insert(\"zsh-theme\", \"\\u{f489}\"); // \"\"\n        m.insert(\"zshrc\", \"\\u{f489}\"); // \"\"\n\n        m\n    }",
            "Real(LocalPath(\"src/icon.rs\"))"
        ],
        "icon::Icons::get_default_icons_by_name": [
            "fn get_default_icons_by_name() -> HashMap<&'static str, &'static str>{\n        let mut m = HashMap::new();\n\n        // Note: filenames must be lower-case\n\n        m.insert(\".trash\", \"\\u{f1f8}\"); // \"\"\n        m.insert(\".atom\", \"\\u{e764}\"); // \"\"\n        m.insert(\".bashprofile\", \"\\u{e615}\"); // \"\"\n        m.insert(\".bashrc\", \"\\u{f489}\"); // \"\"\n        m.insert(\".clang-format\", \"\\u{e615}\"); // \"\"\n        m.insert(\".git\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\".gitattributes\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\".gitconfig\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\".github\", \"\\u{f408}\"); // \"\"\n        m.insert(\".gitignore\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\".gitmodules\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\".rvm\", \"\\u{e21e}\"); // \"\"\n        m.insert(\".vimrc\", \"\\u{e62b}\"); // \"\"\n        m.insert(\".vscode\", \"\\u{e70c}\"); // \"\"\n        m.insert(\".zshrc\", \"\\u{f489}\"); // \"\"\n        m.insert(\"bin\", \"\\u{e5fc}\"); // \"\"\n        m.insert(\"config\", \"\\u{e5fc}\"); // \"\"\n        m.insert(\"docker-compose.yml\", \"\\u{f308}\"); // \"\"\n        m.insert(\"dockerfile\", \"\\u{f308}\"); // \"\"\n        m.insert(\"ds_store\", \"\\u{f179}\"); // \"\"\n        m.insert(\"gitignore_global\", \"\\u{f1d3}\"); // \"\"\n        m.insert(\"gradle\", \"\\u{e70e}\"); // \"\"\n        m.insert(\"gruntfile.coffee\", \"\\u{e611}\"); // \"\"\n        m.insert(\"gruntfile.js\", \"\\u{e611}\"); // \"\"\n        m.insert(\"gruntfile.ls\", \"\\u{e611}\"); // \"\"\n        m.insert(\"gulpfile.coffee\", \"\\u{e610}\"); // \"\"\n        m.insert(\"gulpfile.js\", \"\\u{e610}\"); // \"\"\n        m.insert(\"gulpfile.ls\", \"\\u{e610}\"); // \"\"\n        m.insert(\"hidden\", \"\\u{f023}\"); // \"\"\n        m.insert(\"include\", \"\\u{e5fc}\"); // \"\"\n        m.insert(\"lib\", \"\\u{f121}\"); // \"\"\n        m.insert(\"localized\", \"\\u{f179}\"); // \"\"\n        m.insert(\"node_modules\", \"\\u{e718}\"); // \"\"\n        m.insert(\"npmignore\", \"\\u{e71e}\"); // \"\"\n        m.insert(\"rubydoc\", \"\\u{e73b}\"); // \"\"\n\n        m\n    }",
            "Real(LocalPath(\"src/icon.rs\"))"
        ],
        "icon::Icons::new": [
            "pub fn new(theme: Theme, icon_separator: String) -> Self{\n        let display_icons = theme == Theme::Fancy || theme == Theme::Unicode;\n        let (icons_by_name, icons_by_extension, default_file_icon, default_folder_icon) =\n            if theme == Theme::Fancy {\n                (\n                    Self::get_default_icons_by_name(),\n                    Self::get_default_icons_by_extension(),\n                    \"\\u{f016}\", // \n                    \"\\u{f115}\", // \n                )\n            } else {\n                (\n                    HashMap::new(),\n                    HashMap::new(),\n                    \"\\u{1f5cb}\", // 🗋\n                    \"\\u{1f5c1}\", // 🗁\n                )\n            };\n\n        Self {\n            display_icons,\n            icons_by_name,\n            icons_by_extension,\n            default_file_icon,\n            default_folder_icon,\n            icon_separator,\n        }\n    }",
            "Real(LocalPath(\"src/icon.rs\"))"
        ],
        "icon::Theme": [
            "pub enum Theme {\n    NoIcon,\n    Fancy,\n    Unicode,\n}",
            "Real(LocalPath(\"src/icon.rs\"))"
        ],
        "main": [
            "fn main(){\n    let matches = app::build().get_matches_from(wild::args_os());\n\n    // input translate glob FILE without single quote into real names\n    // for example:\n    // * to all files matched\n    // '*' remain as '*'\n    let inputs = matches\n        .values_of(\"FILE\")\n        .expect(\"failed to retrieve cli value\")\n        .map(PathBuf::from)\n        .collect();\n\n    let config = if matches.is_present(\"ignore-config\") {\n        Config::with_none()\n    } else if matches.is_present(\"config-file\") {\n        let path = matches\n            .value_of(\"config-file\")\n            .expect(\"Invalid config file path\")\n            .into();\n\n        Config::from_file(path).expect(\"Provided file path is invalid\")\n    } else {\n        Config::default()\n    };\n    let flags = Flags::configure_from(&matches, &config).unwrap_or_else(|err| err.exit());\n    let core = Core::new(flags);\n\n    core.run(inputs);\n}",
            "Real(LocalPath(\"src/main.rs\"))"
        ],
        "meta::Meta": [
            "pub struct Meta {\n    pub name: Name,\n    pub path: PathBuf,\n    pub permissions: Permissions,\n    pub date: Date,\n    pub owner: Owner,\n    pub file_type: FileType,\n    pub size: Size,\n    pub symlink: SymLink,\n    pub indicator: Indicator,\n    pub inode: INode,\n    pub links: Links,\n    pub content: Option<Vec<Meta>>,\n    pub access_control: AccessControl,\n}",
            "Real(LocalPath(\"src/meta/mod.rs\"))"
        ],
        "meta::Meta::calculate_total_file_size": [
            "fn calculate_total_file_size(path: &Path) -> u64{\n        let metadata = path.symlink_metadata();\n        let metadata = match metadata {\n            Ok(meta) => meta,\n            Err(err) => {\n                print_error!(\"{}: {}.\", path.display(), err);\n                return 0;\n            }\n        };\n        let file_type = metadata.file_type();\n        if file_type.is_file() {\n            metadata.len()\n        } else if file_type.is_dir() {\n            let mut size = metadata.len();\n\n            let entries = match path.read_dir() {\n                Ok(entries) => entries,\n                Err(err) => {\n                    print_error!(\"{}: {}.\", path.display(), err);\n                    return size;\n                }\n            };\n            for entry in entries {\n                let path = match entry {\n                    Ok(entry) => entry.path(),\n                    Err(err) => {\n                        print_error!(\"{}: {}.\", path.display(), err);\n                        continue;\n                    }\n                };\n                size += Meta::calculate_total_file_size(&path);\n            }\n            size\n        } else {\n            0\n        }\n    }",
            "Real(LocalPath(\"src/meta/mod.rs\"))"
        ],
        "meta::Meta::calculate_total_size": [
            "pub fn calculate_total_size(&mut self){\n        if let FileType::Directory { .. } = self.file_type {\n            if let Some(metas) = &mut self.content {\n                let mut size_accumulated = self.size.get_bytes();\n                for x in &mut metas.iter_mut() {\n                    x.calculate_total_size();\n                    size_accumulated += x.size.get_bytes();\n                }\n                self.size = Size::new(size_accumulated);\n            } else {\n                // possibility that 'depth' limited the recursion in 'recurse_into'\n                self.size = Size::new(Meta::calculate_total_file_size(&self.path));\n            }\n        }\n    }",
            "Real(LocalPath(\"src/meta/mod.rs\"))"
        ],
        "meta::Meta::from_path": [
            "pub fn from_path(path: &Path, dereference: bool) -> Result<Self, std::io::Error>{\n        let mut metadata = path.symlink_metadata()?;\n        let mut symlink_meta = None;\n        if metadata.file_type().is_symlink() {\n            match path.metadata() {\n                Ok(m) => {\n                    if dereference {\n                        metadata = m;\n                    } else {\n                        symlink_meta = Some(m);\n                    }\n                }\n                Err(e) => {\n                    // This case, it is definitely a symlink or\n                    // path.symlink_metadata would have errored out\n                    if dereference {\n                        return Err(e);\n                    }\n                }\n            }\n        }\n\n        #[cfg(unix)]\n        let owner = Owner::from(&metadata);\n        #[cfg(unix)]\n        let permissions = Permissions::from(&metadata);\n\n        #[cfg(windows)]\n        let (owner, permissions) = windows_utils::get_file_data(path)?;\n\n        let access_control = AccessControl::for_path(path);\n        let file_type = FileType::new(&metadata, symlink_meta.as_ref(), &permissions);\n        let name = Name::new(path, file_type);\n        let inode = INode::from(&metadata);\n        let links = Links::from(&metadata);\n\n        Ok(Self {\n            inode,\n            links,\n            path: path.to_path_buf(),\n            symlink: SymLink::from(path),\n            size: Size::from(&metadata),\n            date: Date::from(&metadata),\n            indicator: Indicator::from(file_type),\n            owner,\n            permissions,\n            name,\n            file_type,\n            content: None,\n            access_control,\n        })\n    }",
            "Real(LocalPath(\"src/meta/mod.rs\"))"
        ],
        "meta::Meta::recurse_into": [
            "pub fn recurse_into(\n        &self,\n        depth: usize,\n        flags: &Flags,\n    ) -> Result<Option<Vec<Meta>>, std::io::Error>{\n        if depth == 0 {\n            return Ok(None);\n        }\n\n        if flags.display == Display::DirectoryOnly && flags.layout != Layout::Tree {\n            return Ok(None);\n        }\n\n        match self.file_type {\n            FileType::Directory { .. } => (),\n            FileType::SymLink { is_dir: true } => {\n                if flags.layout == Layout::OneLine {\n                    return Ok(None);\n                }\n            }\n            _ => return Ok(None),\n        }\n\n        let entries = match self.path.read_dir() {\n            Ok(entries) => entries,\n            Err(err) => {\n                print_error!(\"{}: {}.\", self.path.display(), err);\n                return Ok(None);\n            }\n        };\n\n        let mut content: Vec<Meta> = Vec::new();\n\n        if Display::All == flags.display && flags.layout != Layout::Tree {\n            let mut current_meta = self.clone();\n            current_meta.name.name = \".\".to_owned();\n\n            let mut parent_meta =\n                Self::from_path(&self.path.join(Component::ParentDir), flags.dereference.0)?;\n            parent_meta.name.name = \"..\".to_owned();\n\n            content.push(current_meta);\n            content.push(parent_meta);\n        }\n\n        for entry in entries {\n            let entry = entry?;\n            let path = entry.path();\n\n            let name = path\n                .file_name()\n                .ok_or_else(|| Error::new(ErrorKind::InvalidInput, \"invalid file name\"))?;\n\n            if flags.ignore_globs.0.is_match(&name) {\n                continue;\n            }\n\n            if let Display::VisibleOnly = flags.display {\n                if name.to_string_lossy().starts_with('.') {\n                    continue;\n                }\n            }\n\n            let mut entry_meta = match Self::from_path(&path, flags.dereference.0) {\n                Ok(res) => res,\n                Err(err) => {\n                    print_error!(\"{}: {}.\", path.display(), err);\n                    continue;\n                }\n            };\n\n            // skip files for --tree -d\n            if flags.layout == Layout::Tree {\n                if let Display::DirectoryOnly = flags.display {\n                    if !entry.file_type()?.is_dir() {\n                        continue;\n                    }\n                }\n            }\n\n            let dereference =\n                !matches!(entry_meta.file_type, FileType::SymLink { .. }) || flags.dereference.0;\n            if dereference {\n                match entry_meta.recurse_into(depth - 1, flags) {\n                    Ok(content) => entry_meta.content = content,\n                    Err(err) => {\n                        print_error!(\"{}: {}.\", path.display(), err);\n                        continue;\n                    }\n                };\n            }\n\n            content.push(entry_meta);\n        }\n\n        Ok(Some(content))\n    }",
            "Real(LocalPath(\"src/meta/mod.rs\"))"
        ],
        "meta::access_control::AccessControl": [
            "pub struct AccessControl {\n    has_acl: bool,\n    selinux_context: String,\n    smack_context: String,\n}",
            "Real(LocalPath(\"src/meta/access_control.rs\"))"
        ],
        "meta::access_control::AccessControl::for_path": [
            "#[cfg(unix)]\npub fn for_path(path: &Path) -> Self{\n        let has_acl = !xattr::get(path, Method::Acl.name())\n            .unwrap_or_default()\n            .unwrap_or_default()\n            .is_empty();\n        let selinux_context = xattr::get(path, Method::Selinux.name())\n            .unwrap_or_default()\n            .unwrap_or_default();\n        let smack_context = xattr::get(path, Method::Smack.name())\n            .unwrap_or_default()\n            .unwrap_or_default();\n\n        Self::from_data(has_acl, &selinux_context, &smack_context)\n    }",
            "Real(LocalPath(\"src/meta/access_control.rs\"))"
        ],
        "meta::access_control::AccessControl::from_data": [
            "fn from_data(has_acl: bool, selinux_context: &[u8], smack_context: &[u8]) -> Self{\n        let selinux_context = String::from_utf8_lossy(selinux_context).to_string();\n        let smack_context = String::from_utf8_lossy(smack_context).to_string();\n        Self {\n            has_acl,\n            selinux_context,\n            smack_context,\n        }\n    }",
            "Real(LocalPath(\"src/meta/access_control.rs\"))"
        ],
        "meta::access_control::AccessControl::render_context": [
            "pub fn render_context(&self, colors: &Colors) -> ColoredString{\n        let mut context = self.selinux_context.clone();\n        if !self.smack_context.is_empty() {\n            if !context.is_empty() {\n                context += \"+\";\n            }\n            context += &self.smack_context;\n        }\n        if context.is_empty() {\n            context += \"?\";\n        }\n        colors.colorize(context, &Elem::Context)\n    }",
            "Real(LocalPath(\"src/meta/access_control.rs\"))"
        ],
        "meta::access_control::AccessControl::render_method": [
            "pub fn render_method(&self, colors: &Colors) -> ColoredString{\n        if self.has_acl {\n            colors.colorize(String::from(\"+\"), &Elem::Acl)\n        } else if !self.selinux_context.is_empty() || !self.smack_context.is_empty() {\n            colors.colorize(String::from(\".\"), &Elem::Context)\n        } else {\n            colors.colorize(String::from(\"\"), &Elem::Acl)\n        }\n    }",
            "Real(LocalPath(\"src/meta/access_control.rs\"))"
        ],
        "meta::access_control::Method": [
            "#[cfg(unix)]\nenum Method {\n    Acl,\n    Selinux,\n    Smack,\n}",
            "Real(LocalPath(\"src/meta/access_control.rs\"))"
        ],
        "meta::access_control::Method::name": [
            "fn name(&self) -> &'static str{\n        match self {\n            Method::Acl => \"system.posix_acl_access\",\n            Method::Selinux => \"security.selinux\",\n            Method::Smack => \"security.SMACK64\",\n        }\n    }",
            "Real(LocalPath(\"src/meta/access_control.rs\"))"
        ],
        "meta::date::Date": [
            "pub enum Date {\n    Date(DateTime<Local>),\n    Invalid,\n}",
            "Real(LocalPath(\"src/meta/date.rs\"))"
        ],
        "meta::date::Date::date_string": [
            "pub fn date_string(&self, flags: &Flags) -> String{\n        if let Date::Date(val) = self {\n            match &flags.date {\n                DateFlag::Date => val.format(\"%c\").to_string(),\n                DateFlag::Relative => format!(\"{}\", HumanTime::from(*val - Local::now())),\n                DateFlag::Iso => {\n                    // 365.2425 * 24 * 60 * 60 = 31556952 seconds per year\n                    // 15778476 seconds are 6 months\n                    if *val > Local::now() - Duration::seconds(15_778_476) {\n                        val.format(\"%m-%d %R\").to_string()\n                    } else {\n                        val.format(\"%F\").to_string()\n                    }\n                }\n                DateFlag::Formatted(format) => val.format(format).to_string(),\n            }\n        } else {\n            String::from(\"-\")\n        }\n    }",
            "Real(LocalPath(\"src/meta/date.rs\"))"
        ],
        "meta::date::Date::render": [
            "pub fn render(&self, colors: &Colors, flags: &Flags) -> ColoredString{\n        let now = Local::now();\n        let elem = if let Date::Date(val) = self {\n            if *val > now - Duration::hours(1) {\n                Elem::HourOld\n            } else if *val > now - Duration::days(1) {\n                Elem::DayOld\n            } else {\n                Elem::Older\n            }\n        } else {\n            Elem::Older\n        };\n        colors.colorize(self.date_string(flags), &elem)\n    }",
            "Real(LocalPath(\"src/meta/date.rs\"))"
        ],
        "meta::filetype::FileType": [
            "pub enum FileType {\n    BlockDevice,\n    CharDevice,\n    Directory { uid: bool },\n    File { uid: bool, exec: bool },\n    SymLink { is_dir: bool },\n    Pipe,\n    Socket,\n    Special,\n}",
            "Real(LocalPath(\"src/meta/filetype.rs\"))"
        ],
        "meta::filetype::FileType::is_dirlike": [
            "pub fn is_dirlike(self) -> bool{\n        matches!(\n            self,\n            FileType::Directory { .. } | FileType::SymLink { is_dir: true }\n        )\n    }",
            "Real(LocalPath(\"src/meta/filetype.rs\"))"
        ],
        "meta::filetype::FileType::new": [
            "#[cfg(unix)]\npub fn new(\n        meta: &Metadata,\n        symlink_meta: Option<&Metadata>,\n        permissions: &Permissions,\n    ) -> Self{\n        use std::os::unix::fs::FileTypeExt;\n\n        let file_type = meta.file_type();\n\n        if file_type.is_file() {\n            FileType::File {\n                exec: permissions.is_executable(),\n                uid: permissions.setuid,\n            }\n        } else if file_type.is_dir() {\n            FileType::Directory {\n                uid: permissions.setuid,\n            }\n        } else if file_type.is_fifo() {\n            FileType::Pipe\n        } else if file_type.is_symlink() {\n            FileType::SymLink {\n                // if broken, defaults to false\n                is_dir: symlink_meta.map(|m| m.is_dir()).unwrap_or_default(),\n            }\n        } else if file_type.is_char_device() {\n            FileType::CharDevice\n        } else if file_type.is_block_device() {\n            FileType::BlockDevice\n        } else if file_type.is_socket() {\n            FileType::Socket\n        } else {\n            FileType::Special\n        }\n    }",
            "Real(LocalPath(\"src/meta/filetype.rs\"))"
        ],
        "meta::filetype::FileType::render": [
            "pub fn render(self, colors: &Colors) -> ColoredString{\n        match self {\n            FileType::File { exec, .. } => {\n                colors.colorize(String::from(\".\"), &Elem::File { exec, uid: false })\n            }\n            FileType::Directory { .. } => {\n                colors.colorize(String::from(\"d\"), &Elem::Dir { uid: false })\n            }\n            FileType::Pipe => colors.colorize(String::from(\"|\"), &Elem::Pipe),\n            FileType::SymLink { .. } => colors.colorize(String::from(\"l\"), &Elem::SymLink),\n            FileType::BlockDevice => colors.colorize(String::from(\"b\"), &Elem::BlockDevice),\n            FileType::CharDevice => colors.colorize(String::from(\"c\"), &Elem::CharDevice),\n            FileType::Socket => colors.colorize(String::from(\"s\"), &Elem::Socket),\n            FileType::Special => colors.colorize(String::from(\"?\"), &Elem::Special),\n        }\n    }",
            "Real(LocalPath(\"src/meta/filetype.rs\"))"
        ],
        "meta::indicator::Indicator": [
            "pub struct Indicator(&'static str);",
            "Real(LocalPath(\"src/meta/indicator.rs\"))"
        ],
        "meta::indicator::Indicator::render": [
            "pub fn render(&self, flags: &Flags) -> ColoredString{\n        if flags.display_indicators.0 {\n            ColoredString::new(Colors::default_style(), self.0.to_string())\n        } else {\n            ColoredString::new(Colors::default_style(), \"\".into())\n        }\n    }",
            "Real(LocalPath(\"src/meta/indicator.rs\"))"
        ],
        "meta::inode::INode": [
            "pub struct INode {\n    index: Option<u64>,\n}",
            "Real(LocalPath(\"src/meta/inode.rs\"))"
        ],
        "meta::inode::INode::render": [
            "pub fn render(&self, colors: &Colors) -> ColoredString{\n        match self.index {\n            Some(i) => colors.colorize(i.to_string(), &Elem::INode { valid: true }),\n            None => colors.colorize(String::from(\"-\"), &Elem::INode { valid: false }),\n        }\n    }",
            "Real(LocalPath(\"src/meta/inode.rs\"))"
        ],
        "meta::links::Links": [
            "pub struct Links {\n    nlink: Option<u64>,\n}",
            "Real(LocalPath(\"src/meta/links.rs\"))"
        ],
        "meta::links::Links::render": [
            "pub fn render(&self, colors: &Colors) -> ColoredString{\n        match self.nlink {\n            Some(i) => colors.colorize(i.to_string(), &Elem::Links { valid: true }),\n            None => colors.colorize(String::from(\"-\"), &Elem::Links { valid: false }),\n        }\n    }",
            "Real(LocalPath(\"src/meta/links.rs\"))"
        ],
        "meta::name::DisplayOption": [
            "pub enum DisplayOption<'a> {\n    FileName,\n    Relative { base_path: &'a Path },\n    None,\n}",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "meta::name::Name": [
            "pub struct Name {\n    pub name: String,\n    path: PathBuf,\n    extension: Option<String>,\n    file_type: FileType,\n}",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "meta::name::Name::escape": [
            "pub fn escape(&self, string: &str) -> String{\n        if string\n            .chars()\n            .all(|c| c >= 0x20 as char && c != 0x7f as char)\n        {\n            string.to_string()\n        } else {\n            let mut chars = String::new();\n            for c in string.chars() {\n                // The `escape_default` method on `char` is *almost* what we want here, but\n                // it still escapes non-ASCII UTF-8 characters, which are still printable.\n                if c >= 0x20 as char && c != 0x7f as char {\n                    chars.push(c);\n                } else {\n                    chars += &c.escape_default().collect::<String>();\n                }\n            }\n            chars\n        }\n    }",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "meta::name::Name::extension": [
            "pub fn extension(&self) -> Option<&str>{\n        self.extension.as_deref()\n    }",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "meta::name::Name::file_name": [
            "pub fn file_name(&self) -> &str{\n        self.path\n            .file_name()\n            .and_then(OsStr::to_str)\n            .unwrap_or(&self.name)\n    }",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "meta::name::Name::file_type": [
            "pub fn file_type(&self) -> FileType{\n        self.file_type\n    }",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "meta::name::Name::hyperlink": [
            "fn hyperlink(&self, name: String, hyperlink: HyperlinkOption) -> String{\n        match hyperlink {\n            HyperlinkOption::Always => {\n                // HyperlinkOption::Auto gets converted to None or Always in core.rs based on tty_available\n                match std::fs::canonicalize(&self.path) {\n                    Ok(rp) => {\n                        match Url::from_file_path(&rp) {\n                            Ok(url) => {\n                                // Crossterm does not support hyperlinks as of now\n                                // https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\n                                format!(\"\\x1B]8;;{}\\x1B\\x5C{}\\x1B]8;;\\x1B\\x5C\", url, name)\n                            }\n                            Err(_) => {\n                                print_error!(\"{}: unable to form url.\", name);\n                                name\n                            }\n                        }\n                    }\n                    Err(err) => {\n                        print_error!(\"{}: {}.\", name, err);\n                        name\n                    }\n                }\n            }\n            _ => name,\n        }\n    }",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "meta::name::Name::new": [
            "pub fn new(path: &Path, file_type: FileType) -> Self{\n        let name = match path.file_name() {\n            Some(name) => name.to_string_lossy().to_string(),\n            None => path.to_string_lossy().to_string(),\n        };\n\n        let extension = path\n            .extension()\n            .map(|ext| ext.to_string_lossy().to_string());\n\n        Self {\n            name,\n            path: PathBuf::from(path),\n            extension,\n            file_type,\n        }\n    }",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "meta::name::Name::relative_path": [
            "fn relative_path<T: AsRef<Path> + Clone>(&self, base_path: T) -> PathBuf{\n        let base_path = base_path.as_ref();\n\n        if self.path == base_path {\n            return PathBuf::from(AsRef::<Path>::as_ref(&Component::CurDir));\n        }\n\n        let shared_components: PathBuf = self\n            .path\n            .components()\n            .zip(base_path.components())\n            .take_while(|(target_component, base_component)| target_component == base_component)\n            .map(|tuple| tuple.0)\n            .collect();\n\n        base_path\n            .strip_prefix(&shared_components)\n            .unwrap()\n            .components()\n            .map(|_| Component::ParentDir)\n            .chain(\n                self.path\n                    .strip_prefix(&shared_components)\n                    .unwrap()\n                    .components(),\n            )\n            .collect()\n    }",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "meta::name::Name::render": [
            "pub fn render(\n        &self,\n        colors: &Colors,\n        icons: &Icons,\n        display_option: &DisplayOption,\n        hyperlink: HyperlinkOption,\n    ) -> ColoredString{\n        let content = match display_option {\n            DisplayOption::FileName => {\n                format!(\n                    \"{}{}\",\n                    icons.get(self),\n                    self.hyperlink(self.escape(self.file_name()), hyperlink)\n                )\n            }\n            DisplayOption::Relative { base_path } => format!(\n                \"{}{}\",\n                icons.get(self),\n                self.hyperlink(\n                    self.escape(&self.relative_path(base_path).to_string_lossy()),\n                    hyperlink\n                )\n            ),\n            DisplayOption::None => format!(\n                \"{}{}\",\n                icons.get(self),\n                self.hyperlink(self.escape(&self.path.to_string_lossy()), hyperlink)\n            ),\n        };\n\n        let elem = match self.file_type {\n            FileType::CharDevice => Elem::CharDevice,\n            FileType::Directory { uid } => Elem::Dir { uid },\n            FileType::SymLink { .. } => Elem::SymLink,\n            FileType::File { uid, exec } => Elem::File { uid, exec },\n            _ => Elem::File {\n                exec: false,\n                uid: false,\n            },\n        };\n\n        colors.colorize_using_path(content, &self.path, &elem)\n    }",
            "Real(LocalPath(\"src/meta/name.rs\"))"
        ],
        "meta::owner::Owner": [
            "pub struct Owner {\n    user: String,\n    group: String,\n}",
            "Real(LocalPath(\"src/meta/owner.rs\"))"
        ],
        "meta::owner::Owner::new": [
            "allow(dead_code)\npub fn new(user: String, group: String) -> Self{\n        Self { user, group }\n    }",
            "Real(LocalPath(\"src/meta/owner.rs\"))"
        ],
        "meta::owner::Owner::render_group": [
            "pub fn render_group(&self, colors: &Colors) -> ColoredString{\n        colors.colorize(self.group.clone(), &Elem::Group)\n    }",
            "Real(LocalPath(\"src/meta/owner.rs\"))"
        ],
        "meta::owner::Owner::render_user": [
            "pub fn render_user(&self, colors: &Colors) -> ColoredString{\n        colors.colorize(self.user.clone(), &Elem::User)\n    }",
            "Real(LocalPath(\"src/meta/owner.rs\"))"
        ],
        "meta::permissions::Permissions": [
            "pub struct Permissions {\n    pub user_read: bool,\n    pub user_write: bool,\n    pub user_execute: bool,\n\n    pub group_read: bool,\n    pub group_write: bool,\n    pub group_execute: bool,\n\n    pub other_read: bool,\n    pub other_write: bool,\n    pub other_execute: bool,\n\n    pub sticky: bool,\n    pub setgid: bool,\n    pub setuid: bool,\n}",
            "Real(LocalPath(\"src/meta/permissions.rs\"))"
        ],
        "meta::permissions::Permissions::bits_to_octal": [
            "fn bits_to_octal(r: bool, w: bool, x: bool) -> u8{\n        (r as u8) * 4 + (w as u8) * 2 + (x as u8)\n    }",
            "Real(LocalPath(\"src/meta/permissions.rs\"))"
        ],
        "meta::permissions::Permissions::is_executable": [
            "pub fn is_executable(&self) -> bool{\n        self.user_execute || self.group_execute || self.other_execute\n    }",
            "Real(LocalPath(\"src/meta/permissions.rs\"))"
        ],
        "meta::permissions::Permissions::render": [
            "pub fn render(&self, colors: &Colors, flags: &Flags) -> ColoredString{\n        let bit = |bit, chr: &'static str, elem: &Elem| {\n            if bit {\n                colors.colorize(String::from(chr), elem)\n            } else {\n                colors.colorize(String::from(\"-\"), &Elem::NoAccess)\n            }\n        };\n\n        let strings = match flags.permission {\n            PermissionFlag::Rwx => vec![\n                // User permissions\n                bit(self.user_read, \"r\", &Elem::Read),\n                bit(self.user_write, \"w\", &Elem::Write),\n                match (self.user_execute, self.setuid) {\n                    (false, false) => colors.colorize(String::from(\"-\"), &Elem::NoAccess),\n                    (true, false) => colors.colorize(String::from(\"x\"), &Elem::Exec),\n                    (false, true) => colors.colorize(String::from(\"S\"), &Elem::ExecSticky),\n                    (true, true) => colors.colorize(String::from(\"s\"), &Elem::ExecSticky),\n                },\n                // Group permissions\n                bit(self.group_read, \"r\", &Elem::Read),\n                bit(self.group_write, \"w\", &Elem::Write),\n                match (self.group_execute, self.setgid) {\n                    (false, false) => colors.colorize(String::from(\"-\"), &Elem::NoAccess),\n                    (true, false) => colors.colorize(String::from(\"x\"), &Elem::Exec),\n                    (false, true) => colors.colorize(String::from(\"S\"), &Elem::ExecSticky),\n                    (true, true) => colors.colorize(String::from(\"s\"), &Elem::ExecSticky),\n                },\n                // Other permissions\n                bit(self.other_read, \"r\", &Elem::Read),\n                bit(self.other_write, \"w\", &Elem::Write),\n                match (self.other_execute, self.sticky) {\n                    (false, false) => colors.colorize(String::from(\"-\"), &Elem::NoAccess),\n                    (true, false) => colors.colorize(String::from(\"x\"), &Elem::Exec),\n                    (false, true) => colors.colorize(String::from(\"T\"), &Elem::ExecSticky),\n                    (true, true) => colors.colorize(String::from(\"t\"), &Elem::ExecSticky),\n                },\n            ],\n            PermissionFlag::Octal => {\n                let octal_sticky = Self::bits_to_octal(self.setuid, self.setgid, self.sticky);\n                let octal_user =\n                    Self::bits_to_octal(self.user_read, self.user_write, self.user_execute);\n                let octal_group =\n                    Self::bits_to_octal(self.group_read, self.group_write, self.group_execute);\n                let octal_other =\n                    Self::bits_to_octal(self.other_read, self.other_write, self.other_execute);\n                vec![colors.colorize(\n                    format!(\n                        \"{}{}{}{}\",\n                        octal_sticky, octal_user, octal_group, octal_other\n                    ),\n                    &Elem::Octal,\n                )]\n            }\n        };\n\n        let res = strings\n            .iter()\n            .map(|s| s.to_string())\n            .collect::<Vec<String>>()\n            .join(\"\");\n        ColoredString::new(Colors::default_style(), res)\n    }",
            "Real(LocalPath(\"src/meta/permissions.rs\"))"
        ],
        "meta::size::Size": [
            "pub struct Size {\n    bytes: u64,\n}",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "meta::size::Size::format_size": [
            "fn format_size(&self, number: f64) -> String{\n        format!(\"{0:.1$}\", number, if number < 10.0 { 1 } else { 0 })\n    }",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "meta::size::Size::get_bytes": [
            "pub fn get_bytes(&self) -> u64{\n        self.bytes\n    }",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "meta::size::Size::get_unit": [
            "pub fn get_unit(&self, flags: &Flags) -> Unit{\n        if self.bytes < 1024 || flags.size == SizeFlag::Bytes {\n            Unit::Byte\n        } else if self.bytes < 1024 * 1024 {\n            Unit::Kilo\n        } else if self.bytes < 1024 * 1024 * 1024 {\n            Unit::Mega\n        } else if self.bytes < 1024 * 1024 * 1024 * 1024 {\n            Unit::Giga\n        } else {\n            Unit::Tera\n        }\n    }",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "meta::size::Size::new": [
            "pub fn new(bytes: u64) -> Self{\n        Self { bytes }\n    }",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "meta::size::Size::paint": [
            "fn paint(&self, colors: &Colors, flags: &Flags, content: String) -> ColoredString{\n        let unit = self.get_unit(flags);\n\n        if unit == Unit::None {\n            colors.colorize(content, &Elem::NonFile)\n        } else if unit == Unit::Byte || unit == Unit::Kilo {\n            colors.colorize(content, &Elem::FileSmall)\n        } else if unit == Unit::Mega {\n            colors.colorize(content, &Elem::FileMedium)\n        } else {\n            colors.colorize(content, &Elem::FileLarge)\n        }\n    }",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "meta::size::Size::render": [
            "pub fn render(\n        &self,\n        colors: &Colors,\n        flags: &Flags,\n        val_alignment: Option<usize>,\n    ) -> ColoredString{\n        let val_content = self.render_value(colors, flags);\n        let unit_content = self.render_unit(colors, flags);\n\n        let left_pad = if let Some(align) = val_alignment {\n            \" \".repeat(align - val_content.content().len())\n        } else {\n            \"\".to_string()\n        };\n\n        let mut strings: Vec<ColoredString> = vec![\n            ColoredString::new(Colors::default_style(), left_pad),\n            val_content,\n        ];\n        if flags.size != SizeFlag::Short {\n            strings.push(ColoredString::new(Colors::default_style(), \" \".into()));\n        }\n        strings.push(unit_content);\n\n        let res = strings\n            .into_iter()\n            .map(|s| s.to_string())\n            .collect::<Vec<String>>()\n            .join(\"\");\n        ColoredString::new(Colors::default_style(), res)\n    }",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "meta::size::Size::render_unit": [
            "pub fn render_unit(&self, colors: &Colors, flags: &Flags) -> ColoredString{\n        let content = self.unit_string(flags);\n\n        self.paint(colors, flags, content)\n    }",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "meta::size::Size::render_value": [
            "pub fn render_value(&self, colors: &Colors, flags: &Flags) -> ColoredString{\n        let content = self.value_string(flags);\n\n        self.paint(colors, flags, content)\n    }",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "meta::size::Size::unit_string": [
            "pub fn unit_string(&self, flags: &Flags) -> String{\n        let unit = self.get_unit(flags);\n\n        match flags.size {\n            SizeFlag::Default => match unit {\n                Unit::None => String::from(\"-\"),\n                Unit::Byte => String::from(\"B\"),\n                Unit::Kilo => String::from(\"KB\"),\n                Unit::Mega => String::from(\"MB\"),\n                Unit::Giga => String::from(\"GB\"),\n                Unit::Tera => String::from(\"TB\"),\n            },\n            SizeFlag::Short => match unit {\n                Unit::None => String::from(\"-\"),\n                Unit::Byte => String::from(\"B\"),\n                Unit::Kilo => String::from(\"K\"),\n                Unit::Mega => String::from(\"M\"),\n                Unit::Giga => String::from(\"G\"),\n                Unit::Tera => String::from(\"T\"),\n            },\n            SizeFlag::Bytes => String::from(\"\"),\n        }\n    }",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "meta::size::Size::value_string": [
            "pub fn value_string(&self, flags: &Flags) -> String{\n        let unit = self.get_unit(flags);\n\n        match unit {\n            Unit::None => \"\".to_string(),\n            Unit::Byte => self.bytes.to_string(),\n            Unit::Kilo => self.format_size(((self.bytes as f64) / 1024.0 * 10.0).round() / 10.0),\n            Unit::Mega => {\n                self.format_size(((self.bytes as f64) / (1024.0 * 1024.0) * 10.0).round() / 10.0)\n            }\n            Unit::Giga => self.format_size(\n                ((self.bytes as f64) / (1024.0 * 1024.0 * 1024.0) * 10.0).round() / 10.0,\n            ),\n            Unit::Tera => self.format_size(\n                ((self.bytes as f64) / (1024.0 * 1024.0 * 1024.0 * 1024.0) * 10.0).round() / 10.0,\n            ),\n        }\n    }",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "meta::size::Unit": [
            "pub enum Unit {\n    None,\n    Byte,\n    Kilo,\n    Mega,\n    Giga,\n    Tera,\n}",
            "Real(LocalPath(\"src/meta/size.rs\"))"
        ],
        "meta::symlink::SymLink": [
            "pub struct SymLink {\n    target: Option<String>,\n    valid: bool,\n}",
            "Real(LocalPath(\"src/meta/symlink.rs\"))"
        ],
        "meta::symlink::SymLink::render": [
            "pub fn render(&self, colors: &Colors, flag: &Flags) -> ColoredString{\n        if let Some(target_string) = self.symlink_string() {\n            let elem = if self.valid {\n                &Elem::SymLink\n            } else {\n                &Elem::MissingSymLinkTarget\n            };\n\n            let strings: &[ColoredString] = &[\n                ColoredString::new(Colors::default_style(), format!(\" {} \", flag.symlink_arrow)), // ⇒ \\u{21d2}\n                colors.colorize(target_string, elem),\n            ];\n\n            let res = strings\n                .iter()\n                .map(|s| s.to_string())\n                .collect::<Vec<String>>()\n                .join(\"\");\n            ColoredString::new(Colors::default_style(), res)\n        } else {\n            ColoredString::new(Colors::default_style(), \"\".into())\n        }\n    }",
            "Real(LocalPath(\"src/meta/symlink.rs\"))"
        ],
        "meta::symlink::SymLink::symlink_string": [
            "pub fn symlink_string(&self) -> Option<String>{\n        self.target.as_ref().map(|target| target.to_string())\n    }",
            "Real(LocalPath(\"src/meta/symlink.rs\"))"
        ],
        "sort::assemble_sorters": [
            "pub fn assemble_sorters(flags: &Flags) -> Vec<(SortOrder, SortFn)>{\n    let mut sorters: Vec<(SortOrder, SortFn)> = vec![];\n    match flags.sorting.dir_grouping {\n        DirGrouping::First => {\n            sorters.push((SortOrder::Default, with_dirs_first));\n        }\n        DirGrouping::Last => {\n            sorters.push((SortOrder::Reverse, with_dirs_first));\n        }\n        DirGrouping::None => {}\n    };\n\n    match flags.sorting.column {\n        SortColumn::Name => sorters.push((flags.sorting.order, by_name)),\n        SortColumn::Size => sorters.push((flags.sorting.order, by_size)),\n        SortColumn::Time => sorters.push((flags.sorting.order, by_date)),\n        SortColumn::Version => sorters.push((flags.sorting.order, by_version)),\n        SortColumn::Extension => sorters.push((flags.sorting.order, by_extension)),\n        SortColumn::None => {}\n    }\n    sorters\n}",
            "Real(LocalPath(\"src/sort.rs\"))"
        ],
        "sort::by_date": [
            "fn by_date(a: &Meta, b: &Meta) -> Ordering{\n    b.date.cmp(&a.date).then(a.name.cmp(&b.name))\n}",
            "Real(LocalPath(\"src/sort.rs\"))"
        ],
        "sort::by_extension": [
            "fn by_extension(a: &Meta, b: &Meta) -> Ordering{\n    a.name.extension().cmp(&b.name.extension())\n}",
            "Real(LocalPath(\"src/sort.rs\"))"
        ],
        "sort::by_meta": [
            "pub fn by_meta(sorters: &[(SortOrder, SortFn)], a: &Meta, b: &Meta) -> Ordering{\n    for (direction, sorter) in sorters.iter() {\n        match (sorter)(a, b) {\n            Ordering::Equal => continue,\n            ordering => {\n                return match direction {\n                    SortOrder::Reverse => ordering.reverse(),\n                    SortOrder::Default => ordering,\n                }\n            }\n        }\n    }\n    Ordering::Equal\n}",
            "Real(LocalPath(\"src/sort.rs\"))"
        ],
        "sort::by_name": [
            "fn by_name(a: &Meta, b: &Meta) -> Ordering{\n    a.name.cmp(&b.name)\n}",
            "Real(LocalPath(\"src/sort.rs\"))"
        ],
        "sort::by_size": [
            "fn by_size(a: &Meta, b: &Meta) -> Ordering{\n    b.size.get_bytes().cmp(&a.size.get_bytes())\n}",
            "Real(LocalPath(\"src/sort.rs\"))"
        ],
        "sort::by_version": [
            "fn by_version(a: &Meta, b: &Meta) -> Ordering{\n    compare(&a.name.name, &b.name.name)\n}",
            "Real(LocalPath(\"src/sort.rs\"))"
        ],
        "sort::with_dirs_first": [
            "fn with_dirs_first(a: &Meta, b: &Meta) -> Ordering{\n    b.file_type.is_dirlike().cmp(&a.file_type.is_dirlike())\n}",
            "Real(LocalPath(\"src/sort.rs\"))"
        ]
    },
    "struct_constructor": {
        "&'static str": [
            "name"
        ],
        "&str": [
            "extension",
            "file_name"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_map",
            "visit_seq"
        ],
        "<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_enum"
        ],
        "<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_enum"
        ],
        "<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_enum"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_enum"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_newtype_struct",
            "visit_seq"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_enum"
        ],
        "<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_enum"
        ],
        "<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_enum"
        ],
        "<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_enum"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_enum"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_bytes",
            "visit_str",
            "visit_u64"
        ],
        "<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::Value": [
            "visit_enum"
        ],
        "bool": [
            "contains_inode",
            "displays_size",
            "enabled_from",
            "enabled_from_arg_matches",
            "eq",
            "has_suid",
            "is_dirlike",
            "is_executable",
            "should_display_folder_path"
        ],
        "clap::App": [
            "build"
        ],
        "color::Colors": [
            "new"
        ],
        "color::Elem": [
            "clone"
        ],
        "color::theme::Date": [
            "default",
            "deserialize"
        ],
        "color::theme::Dir": [
            "default",
            "deserialize"
        ],
        "color::theme::File": [
            "default",
            "deserialize"
        ],
        "color::theme::FileType": [
            "default",
            "deserialize"
        ],
        "color::theme::INode": [
            "default",
            "deserialize"
        ],
        "color::theme::Links": [
            "default",
            "deserialize"
        ],
        "color::theme::Permission": [
            "default",
            "deserialize"
        ],
        "color::theme::Size": [
            "default",
            "deserialize"
        ],
        "color::theme::Symlink": [
            "default",
            "deserialize"
        ],
        "color::theme::Theme": [
            "default",
            "default_dark",
            "deserialize",
            "from_path",
            "with_yaml"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field": [
            "deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field": [
            "deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field": [
            "deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field": [
            "deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field": [
            "deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field": [
            "deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field": [
            "deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field": [
            "deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field": [
            "deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field": [
            "deserialize"
        ],
        "config_file::Color": [
            "deserialize"
        ],
        "config_file::Config": [
            "default",
            "deserialize",
            "from_file",
            "from_yaml",
            "with_none"
        ],
        "config_file::Icons": [
            "deserialize"
        ],
        "config_file::Recursion": [
            "deserialize"
        ],
        "config_file::Sorting": [
            "deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field": [
            "deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field": [
            "deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field": [
            "deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field": [
            "deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field": [
            "deserialize"
        ],
        "core::Core": [
            "new"
        ],
        "crossterm::style::Color": [
            "get_color"
        ],
        "crossterm::style::ContentStyle": [
            "default_style",
            "style",
            "style_default",
            "style_from_path",
            "to_content_style"
        ],
        "crossterm::style::StyledContent": [
            "colorize",
            "colorize_using_path",
            "paint",
            "render",
            "render_context",
            "render_group",
            "render_method",
            "render_unit",
            "render_user",
            "render_value"
        ],
        "flags::Flags": [
            "clone",
            "configure_from",
            "default"
        ],
        "flags::blocks::Block": [
            "clone",
            "try_from"
        ],
        "flags::blocks::Blocks": [
            "clone",
            "configure_from",
            "default",
            "from_arg_matches",
            "from_config",
            "long"
        ],
        "flags::color::Color": [
            "clone",
            "configure_from",
            "default"
        ],
        "flags::color::ColorOption": [
            "clone",
            "default",
            "deserialize",
            "from_arg_matches",
            "from_config",
            "from_environment",
            "from_str"
        ],
        "flags::color::ThemeOption": [
            "clone",
            "default",
            "deserialize",
            "from_config",
            "visit_str"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field": [
            "deserialize"
        ],
        "flags::date::DateFlag": [
            "clone",
            "default",
            "from_arg_matches",
            "from_config",
            "from_environment",
            "from_format_string",
            "from_str"
        ],
        "flags::dereference::Dereference": [
            "clone",
            "default",
            "from_arg_matches",
            "from_config"
        ],
        "flags::display::Display": [
            "clone",
            "default",
            "deserialize",
            "from_arg_matches",
            "from_config"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field": [
            "deserialize"
        ],
        "flags::hyperlink::HyperlinkOption": [
            "clone",
            "default",
            "deserialize",
            "from_arg_matches",
            "from_config"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field": [
            "deserialize"
        ],
        "flags::icons::IconOption": [
            "clone",
            "default",
            "deserialize",
            "from_arg_matches",
            "from_config"
        ],
        "flags::icons::IconSeparator": [
            "clone",
            "default",
            "deserialize",
            "from_arg_matches",
            "from_config"
        ],
        "flags::icons::IconTheme": [
            "clone",
            "default",
            "deserialize",
            "from_arg_matches",
            "from_config"
        ],
        "flags::icons::Icons": [
            "clone",
            "configure_from",
            "default"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field": [
            "deserialize"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field": [
            "deserialize"
        ],
        "flags::ignore_globs::IgnoreGlobs": [
            "clone",
            "configure_from",
            "default"
        ],
        "flags::indicators::Indicators": [
            "clone",
            "default",
            "from_arg_matches",
            "from_config"
        ],
        "flags::layout::Layout": [
            "clone",
            "default",
            "deserialize",
            "from_arg_matches",
            "from_config"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field": [
            "deserialize"
        ],
        "flags::permission::PermissionFlag": [
            "clone",
            "default",
            "deserialize",
            "from_arg_matches",
            "from_config",
            "from_str"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field": [
            "deserialize"
        ],
        "flags::recursion::Recursion": [
            "clone",
            "configure_from",
            "default"
        ],
        "flags::size::SizeFlag": [
            "clone",
            "default",
            "deserialize",
            "from_arg_matches",
            "from_config",
            "from_str"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field": [
            "deserialize"
        ],
        "flags::sorting::DirGrouping": [
            "clone",
            "default",
            "deserialize",
            "from_arg_matches",
            "from_config",
            "from_str"
        ],
        "flags::sorting::SortColumn": [
            "clone",
            "default",
            "deserialize",
            "from_arg_matches",
            "from_config"
        ],
        "flags::sorting::SortOrder": [
            "clone",
            "default",
            "from_arg_matches",
            "from_config"
        ],
        "flags::sorting::Sorting": [
            "clone",
            "configure_from",
            "default"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field": [
            "deserialize"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field": [
            "deserialize"
        ],
        "flags::symlink_arrow::SymlinkArrow": [
            "clone",
            "default",
            "from_arg_matches",
            "from_config"
        ],
        "flags::symlinks::NoSymlink": [
            "clone",
            "default",
            "from_arg_matches",
            "from_config"
        ],
        "flags::total_size::TotalSize": [
            "clone",
            "default",
            "from_arg_matches",
            "from_config"
        ],
        "globset::Glob": [
            "create_glob"
        ],
        "globset::GlobSet": [
            "create_glob_set",
            "from_arg_matches",
            "from_config"
        ],
        "icon::Icons": [
            "new"
        ],
        "icon::Theme": [
            "clone"
        ],
        "lscolors::Indicator": [
            "get_indicator_from_elem"
        ],
        "meta::Meta": [
            "clone",
            "from_path"
        ],
        "meta::access_control::AccessControl": [
            "clone",
            "for_path",
            "from_data"
        ],
        "meta::date::Date": [
            "clone",
            "from"
        ],
        "meta::filetype::FileType": [
            "clone",
            "file_type",
            "new"
        ],
        "meta::indicator::Indicator": [
            "clone",
            "from"
        ],
        "meta::inode::INode": [
            "clone",
            "from"
        ],
        "meta::links::Links": [
            "clone",
            "from"
        ],
        "meta::name::Name": [
            "clone",
            "new"
        ],
        "meta::owner::Owner": [
            "clone",
            "from",
            "new"
        ],
        "meta::permissions::Permissions": [
            "clone",
            "from"
        ],
        "meta::size::Size": [
            "clone",
            "from",
            "new"
        ],
        "meta::size::Unit": [
            "clone",
            "get_unit"
        ],
        "meta::symlink::SymLink": [
            "clone",
            "from"
        ],
        "std::cmp::Ordering": [
            "by_date",
            "by_extension",
            "by_meta",
            "by_name",
            "by_size",
            "by_version",
            "cmp",
            "partial_cmp",
            "with_dirs_first"
        ],
        "std::collections::HashMap": [
            "get_default_icons_by_extension",
            "get_default_icons_by_name",
            "get_padding_rules"
        ],
        "std::path::PathBuf": [
            "config_file_path",
            "expand_home",
            "relative_path"
        ],
        "std::string::String": [
            "date_string",
            "display_folder_path",
            "escape",
            "format_size",
            "get",
            "grid",
            "inner_display_grid",
            "symlink_string",
            "tree",
            "unit_string",
            "value_string"
        ],
        "std::vec::Vec": [
            "assemble_sorters",
            "get_output",
            "inner_display_tree",
            "recurse_into"
        ],
        "u64": [
            "calculate_total_file_size",
            "get_bytes"
        ],
        "u8": [
            "bits_to_octal"
        ],
        "usize": [
            "depth_from",
            "depth_from_arg_matches",
            "detect_size_lengths",
            "get_visible_width"
        ]
    },
    "struct_to_trait": {
        "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::Elem": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::fmt::Debug",
            "std::hash::Hash",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "color::theme::Date": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralPartialEq"
        ],
        "color::theme::Dir": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralPartialEq"
        ],
        "color::theme::File": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralPartialEq"
        ],
        "color::theme::FileType": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralPartialEq"
        ],
        "color::theme::INode": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralPartialEq"
        ],
        "color::theme::Links": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralPartialEq"
        ],
        "color::theme::Permission": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralPartialEq"
        ],
        "color::theme::Size": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralPartialEq"
        ],
        "color::theme::Symlink": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralPartialEq"
        ],
        "color::theme::Theme": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralPartialEq"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "config_file::Color": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "config_file::Config": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "config_file::Icons": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "config_file::Recursion": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "config_file::Sorting": [
            "config_file::_::_serde::Deserialize",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::Flags": [
            "std::clone::Clone",
            "std::default::Default",
            "std::fmt::Debug"
        ],
        "flags::blocks::Block": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::Ord",
            "std::cmp::PartialEq",
            "std::cmp::PartialOrd",
            "std::convert::TryFrom",
            "std::fmt::Debug",
            "std::hash::Hash",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::blocks::Blocks": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::color::Color": [
            "std::clone::Clone",
            "std::default::Default",
            "std::fmt::Debug"
        ],
        "flags::color::ColorOption": [
            "config_file::_::_serde::Deserialize",
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::color::ThemeOption": [
            "config_file::_::_serde::Deserialize",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::date::DateFlag": [
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::dereference::Dereference": [
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::display::Display": [
            "config_file::_::_serde::Deserialize",
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::hyperlink::HyperlinkOption": [
            "config_file::_::_serde::Deserialize",
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::icons::IconOption": [
            "config_file::_::_serde::Deserialize",
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::icons::IconSeparator": [
            "config_file::_::_serde::Deserialize",
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::icons::IconTheme": [
            "config_file::_::_serde::Deserialize",
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::icons::Icons": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::ignore_globs::IgnoreGlobs": [
            "std::clone::Clone",
            "std::default::Default",
            "std::fmt::Debug"
        ],
        "flags::indicators::Indicators": [
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::layout::Layout": [
            "config_file::_::_serde::Deserialize",
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::permission::PermissionFlag": [
            "config_file::_::_serde::Deserialize",
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::recursion::Recursion": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::size::SizeFlag": [
            "config_file::_::_serde::Deserialize",
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::sorting::DirGrouping": [
            "config_file::_::_serde::Deserialize",
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::sorting::SortColumn": [
            "config_file::_::_serde::Deserialize",
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::sorting::SortOrder": [
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::sorting::Sorting": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field": [
            "config_file::_::_serde::Deserialize"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor": [
            "config_file::_::_serde::de::Visitor"
        ],
        "flags::symlink_arrow::SymlinkArrow": [
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::fmt::Display",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::symlinks::NoSymlink": [
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "flags::total_size::TotalSize": [
            "flags::Configurable",
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::default::Default",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "icon::Theme": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "meta::Meta": [
            "std::clone::Clone",
            "std::fmt::Debug"
        ],
        "meta::access_control::AccessControl": [
            "std::clone::Clone",
            "std::fmt::Debug"
        ],
        "meta::date::Date": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::Ord",
            "std::cmp::PartialEq",
            "std::cmp::PartialOrd",
            "std::convert::From",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "meta::filetype::FileType": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "meta::indicator::Indicator": [
            "std::clone::Clone",
            "std::convert::From",
            "std::fmt::Debug"
        ],
        "meta::inode::INode": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::convert::From",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "meta::links::Links": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::convert::From",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "meta::name::DisplayOption": [
            "std::fmt::Debug"
        ],
        "meta::name::Name": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::Ord",
            "std::cmp::PartialEq",
            "std::cmp::PartialOrd",
            "std::fmt::Debug",
            "std::marker::StructuralEq"
        ],
        "meta::owner::Owner": [
            "std::clone::Clone",
            "std::convert::From",
            "std::fmt::Debug"
        ],
        "meta::permissions::Permissions": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::convert::From",
            "std::fmt::Debug",
            "std::marker::Copy",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "meta::size::Size": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::convert::From",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "meta::size::Unit": [
            "std::clone::Clone",
            "std::cmp::Eq",
            "std::cmp::PartialEq",
            "std::fmt::Debug",
            "std::marker::StructuralEq",
            "std::marker::StructuralPartialEq"
        ],
        "meta::symlink::SymLink": [
            "std::clone::Clone",
            "std::convert::From",
            "std::fmt::Debug"
        ]
    },
    "targets": {
        "<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting": [
            "expecting",
            "Real(LocalPath(\"src/flags/color.rs\"))",
            "config_file::_::_serde::de::Visitor"
        ],
        "<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str": [
            "visit_str",
            "Real(LocalPath(\"src/flags/color.rs\"))",
            "config_file::_::_serde::de::Visitor"
        ],
        "<color::theme::Date as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            "std::default::Default"
        ],
        "<color::theme::Dir as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            "std::default::Default"
        ],
        "<color::theme::File as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            "std::default::Default"
        ],
        "<color::theme::FileType as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            "std::default::Default"
        ],
        "<color::theme::INode as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            "std::default::Default"
        ],
        "<color::theme::Links as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            "std::default::Default"
        ],
        "<color::theme::Permission as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            "std::default::Default"
        ],
        "<color::theme::Size as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            "std::default::Default"
        ],
        "<color::theme::Symlink as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            "std::default::Default"
        ],
        "<color::theme::Theme as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            "std::default::Default"
        ],
        "<config_file::Config as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/config_file.rs\"))",
            "std::default::Default"
        ],
        "<flags::blocks::Block as std::convert::TryFrom<&str>>::try_from": [
            "try_from",
            "Real(LocalPath(\"src/flags/blocks.rs\"))",
            "std::convert::TryFrom"
        ],
        "<flags::blocks::Blocks as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/blocks.rs\"))",
            "std::default::Default"
        ],
        "<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/color.rs\"))",
            "flags::Configurable"
        ],
        "<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/color.rs\"))",
            "flags::Configurable"
        ],
        "<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_environment": [
            "from_environment",
            "Real(LocalPath(\"src/flags/color.rs\"))",
            "flags::Configurable"
        ],
        "<flags::color::ColorOption as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/color.rs\"))",
            "std::default::Default"
        ],
        "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize": [
            "deserialize",
            "Real(LocalPath(\"src/flags/color.rs\"))",
            "config_file::_::_serde::Deserialize"
        ],
        "<flags::color::ThemeOption as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/color.rs\"))",
            "std::default::Default"
        ],
        "<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/date.rs\"))",
            "flags::Configurable"
        ],
        "<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/date.rs\"))",
            "flags::Configurable"
        ],
        "<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_environment": [
            "from_environment",
            "Real(LocalPath(\"src/flags/date.rs\"))",
            "flags::Configurable"
        ],
        "<flags::date::DateFlag as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/date.rs\"))",
            "std::default::Default"
        ],
        "<flags::dereference::Dereference as flags::Configurable<flags::dereference::Dereference>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/dereference.rs\"))",
            "flags::Configurable"
        ],
        "<flags::dereference::Dereference as flags::Configurable<flags::dereference::Dereference>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/dereference.rs\"))",
            "flags::Configurable"
        ],
        "<flags::display::Display as flags::Configurable<flags::display::Display>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/display.rs\"))",
            "flags::Configurable"
        ],
        "<flags::display::Display as flags::Configurable<flags::display::Display>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/display.rs\"))",
            "flags::Configurable"
        ],
        "<flags::display::Display as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/display.rs\"))",
            "std::default::Default"
        ],
        "<flags::hyperlink::HyperlinkOption as flags::Configurable<flags::hyperlink::HyperlinkOption>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/hyperlink.rs\"))",
            "flags::Configurable"
        ],
        "<flags::hyperlink::HyperlinkOption as flags::Configurable<flags::hyperlink::HyperlinkOption>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/hyperlink.rs\"))",
            "flags::Configurable"
        ],
        "<flags::hyperlink::HyperlinkOption as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/hyperlink.rs\"))",
            "std::default::Default"
        ],
        "<flags::icons::IconOption as flags::Configurable<flags::icons::IconOption>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/icons.rs\"))",
            "flags::Configurable"
        ],
        "<flags::icons::IconOption as flags::Configurable<flags::icons::IconOption>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/icons.rs\"))",
            "flags::Configurable"
        ],
        "<flags::icons::IconOption as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/icons.rs\"))",
            "std::default::Default"
        ],
        "<flags::icons::IconSeparator as flags::Configurable<flags::icons::IconSeparator>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/icons.rs\"))",
            "flags::Configurable"
        ],
        "<flags::icons::IconSeparator as flags::Configurable<flags::icons::IconSeparator>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/icons.rs\"))",
            "flags::Configurable"
        ],
        "<flags::icons::IconSeparator as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/icons.rs\"))",
            "std::default::Default"
        ],
        "<flags::icons::IconTheme as flags::Configurable<flags::icons::IconTheme>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/icons.rs\"))",
            "flags::Configurable"
        ],
        "<flags::icons::IconTheme as flags::Configurable<flags::icons::IconTheme>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/icons.rs\"))",
            "flags::Configurable"
        ],
        "<flags::icons::IconTheme as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/icons.rs\"))",
            "std::default::Default"
        ],
        "<flags::ignore_globs::IgnoreGlobs as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))",
            "std::default::Default"
        ],
        "<flags::indicators::Indicators as flags::Configurable<flags::indicators::Indicators>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/indicators.rs\"))",
            "flags::Configurable"
        ],
        "<flags::indicators::Indicators as flags::Configurable<flags::indicators::Indicators>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/indicators.rs\"))",
            "flags::Configurable"
        ],
        "<flags::layout::Layout as flags::Configurable<flags::layout::Layout>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/layout.rs\"))",
            "flags::Configurable"
        ],
        "<flags::layout::Layout as flags::Configurable<flags::layout::Layout>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/layout.rs\"))",
            "flags::Configurable"
        ],
        "<flags::layout::Layout as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/layout.rs\"))",
            "std::default::Default"
        ],
        "<flags::permission::PermissionFlag as flags::Configurable<flags::permission::PermissionFlag>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/permission.rs\"))",
            "flags::Configurable"
        ],
        "<flags::permission::PermissionFlag as flags::Configurable<flags::permission::PermissionFlag>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/permission.rs\"))",
            "flags::Configurable"
        ],
        "<flags::permission::PermissionFlag as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/permission.rs\"))",
            "std::default::Default"
        ],
        "<flags::recursion::Recursion as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/recursion.rs\"))",
            "std::default::Default"
        ],
        "<flags::size::SizeFlag as flags::Configurable<flags::size::SizeFlag>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/size.rs\"))",
            "flags::Configurable"
        ],
        "<flags::size::SizeFlag as flags::Configurable<flags::size::SizeFlag>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/size.rs\"))",
            "flags::Configurable"
        ],
        "<flags::size::SizeFlag as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/size.rs\"))",
            "std::default::Default"
        ],
        "<flags::sorting::DirGrouping as flags::Configurable<flags::sorting::DirGrouping>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/sorting.rs\"))",
            "flags::Configurable"
        ],
        "<flags::sorting::DirGrouping as flags::Configurable<flags::sorting::DirGrouping>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/sorting.rs\"))",
            "flags::Configurable"
        ],
        "<flags::sorting::DirGrouping as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/sorting.rs\"))",
            "std::default::Default"
        ],
        "<flags::sorting::SortColumn as flags::Configurable<flags::sorting::SortColumn>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/sorting.rs\"))",
            "flags::Configurable"
        ],
        "<flags::sorting::SortColumn as flags::Configurable<flags::sorting::SortColumn>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/sorting.rs\"))",
            "flags::Configurable"
        ],
        "<flags::sorting::SortColumn as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/sorting.rs\"))",
            "std::default::Default"
        ],
        "<flags::sorting::SortOrder as flags::Configurable<flags::sorting::SortOrder>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/sorting.rs\"))",
            "flags::Configurable"
        ],
        "<flags::sorting::SortOrder as flags::Configurable<flags::sorting::SortOrder>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/sorting.rs\"))",
            "flags::Configurable"
        ],
        "<flags::sorting::SortOrder as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/sorting.rs\"))",
            "std::default::Default"
        ],
        "<flags::symlink_arrow::SymlinkArrow as flags::Configurable<flags::symlink_arrow::SymlinkArrow>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/symlink_arrow.rs\"))",
            "flags::Configurable"
        ],
        "<flags::symlink_arrow::SymlinkArrow as flags::Configurable<flags::symlink_arrow::SymlinkArrow>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/symlink_arrow.rs\"))",
            "flags::Configurable"
        ],
        "<flags::symlink_arrow::SymlinkArrow as std::default::Default>::default": [
            "default",
            "Real(LocalPath(\"src/flags/symlink_arrow.rs\"))",
            "std::default::Default"
        ],
        "<flags::symlink_arrow::SymlinkArrow as std::fmt::Display>::fmt": [
            "fmt",
            "Real(LocalPath(\"src/flags/symlink_arrow.rs\"))",
            "std::fmt::Display"
        ],
        "<flags::symlinks::NoSymlink as flags::Configurable<flags::symlinks::NoSymlink>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/symlinks.rs\"))",
            "flags::Configurable"
        ],
        "<flags::symlinks::NoSymlink as flags::Configurable<flags::symlinks::NoSymlink>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/symlinks.rs\"))",
            "flags::Configurable"
        ],
        "<flags::total_size::TotalSize as flags::Configurable<flags::total_size::TotalSize>>::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/total_size.rs\"))",
            "flags::Configurable"
        ],
        "<flags::total_size::TotalSize as flags::Configurable<flags::total_size::TotalSize>>::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/total_size.rs\"))",
            "flags::Configurable"
        ],
        "<meta::date::Date as std::convert::From<&'a std::fs::Metadata>>::from": [
            "from",
            "Real(LocalPath(\"src/meta/date.rs\"))",
            "std::convert::From"
        ],
        "<meta::date::Date as std::convert::From<std::time::SystemTime>>::from": [
            "from",
            "Real(LocalPath(\"src/meta/date.rs\"))",
            "std::convert::From"
        ],
        "<meta::indicator::Indicator as std::convert::From<meta::filetype::FileType>>::from": [
            "from",
            "Real(LocalPath(\"src/meta/indicator.rs\"))",
            "std::convert::From"
        ],
        "<meta::inode::INode as std::convert::From<&'a std::fs::Metadata>>::from": [
            "from",
            "Real(LocalPath(\"src/meta/inode.rs\"))",
            "std::convert::From"
        ],
        "<meta::links::Links as std::convert::From<&'a std::fs::Metadata>>::from": [
            "from",
            "Real(LocalPath(\"src/meta/links.rs\"))",
            "std::convert::From"
        ],
        "<meta::name::Name as std::cmp::Ord>::cmp": [
            "cmp",
            "Real(LocalPath(\"src/meta/name.rs\"))",
            "std::cmp::Ord"
        ],
        "<meta::name::Name as std::cmp::PartialEq>::eq": [
            "eq",
            "Real(LocalPath(\"src/meta/name.rs\"))",
            "std::cmp::PartialEq"
        ],
        "<meta::name::Name as std::cmp::PartialOrd>::partial_cmp": [
            "partial_cmp",
            "Real(LocalPath(\"src/meta/name.rs\"))",
            "std::cmp::PartialOrd"
        ],
        "<meta::owner::Owner as std::convert::From<&'a std::fs::Metadata>>::from": [
            "from",
            "Real(LocalPath(\"src/meta/owner.rs\"))",
            "std::convert::From"
        ],
        "<meta::permissions::Permissions as std::convert::From<&'a std::fs::Metadata>>::from": [
            "from",
            "Real(LocalPath(\"src/meta/permissions.rs\"))",
            "std::convert::From"
        ],
        "<meta::size::Size as std::convert::From<&'a std::fs::Metadata>>::from": [
            "from",
            "Real(LocalPath(\"src/meta/size.rs\"))",
            "std::convert::From"
        ],
        "<meta::symlink::SymLink as std::convert::From<&'a std::path::Path>>::from": [
            "from",
            "Real(LocalPath(\"src/meta/symlink.rs\"))",
            "std::convert::From"
        ],
        "app::build": [
            "build",
            "Real(LocalPath(\"src/app.rs\"))",
            ""
        ],
        "app::validate_date_argument": [
            "validate_date_argument",
            "Real(LocalPath(\"src/app.rs\"))",
            ""
        ],
        "app::validate_time_format": [
            "validate_time_format",
            "Real(LocalPath(\"src/app.rs\"))",
            ""
        ],
        "color::Colors::colorize": [
            "colorize",
            "Real(LocalPath(\"src/color.rs\"))",
            ""
        ],
        "color::Colors::colorize_using_path": [
            "colorize_using_path",
            "Real(LocalPath(\"src/color.rs\"))",
            ""
        ],
        "color::Colors::default_style": [
            "default_style",
            "Real(LocalPath(\"src/color.rs\"))",
            ""
        ],
        "color::Colors::get_indicator_from_elem": [
            "get_indicator_from_elem",
            "Real(LocalPath(\"src/color.rs\"))",
            ""
        ],
        "color::Colors::new": [
            "new",
            "Real(LocalPath(\"src/color.rs\"))",
            ""
        ],
        "color::Colors::style": [
            "style",
            "Real(LocalPath(\"src/color.rs\"))",
            ""
        ],
        "color::Colors::style_default": [
            "style_default",
            "Real(LocalPath(\"src/color.rs\"))",
            ""
        ],
        "color::Colors::style_from_path": [
            "style_from_path",
            "Real(LocalPath(\"src/color.rs\"))",
            ""
        ],
        "color::Elem::get_color": [
            "get_color",
            "Real(LocalPath(\"src/color.rs\"))",
            ""
        ],
        "color::Elem::has_suid": [
            "has_suid",
            "Real(LocalPath(\"src/color.rs\"))",
            ""
        ],
        "color::theme::Theme::default_dark": [
            "default_dark",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            ""
        ],
        "color::theme::Theme::from_path": [
            "from_path",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            ""
        ],
        "color::theme::Theme::with_yaml": [
            "with_yaml",
            "Real(LocalPath(\"src/color/theme.rs\"))",
            ""
        ],
        "color::to_content_style": [
            "to_content_style",
            "Real(LocalPath(\"src/color.rs\"))",
            ""
        ],
        "config_file::Config::config_file_path": [
            "config_file_path",
            "Real(LocalPath(\"src/config_file.rs\"))",
            ""
        ],
        "config_file::Config::expand_home": [
            "expand_home",
            "Real(LocalPath(\"src/config_file.rs\"))",
            ""
        ],
        "config_file::Config::from_file": [
            "from_file",
            "Real(LocalPath(\"src/config_file.rs\"))",
            ""
        ],
        "config_file::Config::from_yaml": [
            "from_yaml",
            "Real(LocalPath(\"src/config_file.rs\"))",
            ""
        ],
        "config_file::Config::with_none": [
            "with_none",
            "Real(LocalPath(\"src/config_file.rs\"))",
            ""
        ],
        "core::Core::display": [
            "display",
            "Real(LocalPath(\"src/core.rs\"))",
            ""
        ],
        "core::Core::fetch": [
            "fetch",
            "Real(LocalPath(\"src/core.rs\"))",
            ""
        ],
        "core::Core::new": [
            "new",
            "Real(LocalPath(\"src/core.rs\"))",
            ""
        ],
        "core::Core::run": [
            "run",
            "Real(LocalPath(\"src/core.rs\"))",
            ""
        ],
        "core::Core::sort": [
            "sort",
            "Real(LocalPath(\"src/core.rs\"))",
            ""
        ],
        "display::detect_size_lengths": [
            "detect_size_lengths",
            "Real(LocalPath(\"src/display.rs\"))",
            ""
        ],
        "display::display_folder_path": [
            "display_folder_path",
            "Real(LocalPath(\"src/display.rs\"))",
            ""
        ],
        "display::get_output": [
            "get_output",
            "Real(LocalPath(\"src/display.rs\"))",
            ""
        ],
        "display::get_padding_rules": [
            "get_padding_rules",
            "Real(LocalPath(\"src/display.rs\"))",
            ""
        ],
        "display::get_visible_width": [
            "get_visible_width",
            "Real(LocalPath(\"src/display.rs\"))",
            ""
        ],
        "display::grid": [
            "grid",
            "Real(LocalPath(\"src/display.rs\"))",
            ""
        ],
        "display::inner_display_grid": [
            "inner_display_grid",
            "Real(LocalPath(\"src/display.rs\"))",
            ""
        ],
        "display::inner_display_tree": [
            "inner_display_tree",
            "Real(LocalPath(\"src/display.rs\"))",
            ""
        ],
        "display::should_display_folder_path": [
            "should_display_folder_path",
            "Real(LocalPath(\"src/display.rs\"))",
            ""
        ],
        "display::tree": [
            "tree",
            "Real(LocalPath(\"src/display.rs\"))",
            ""
        ],
        "flags::Configurable::configure_from": [
            "configure_from",
            "Real(LocalPath(\"src/flags.rs\"))",
            ""
        ],
        "flags::Configurable::from_environment": [
            "from_environment",
            "Real(LocalPath(\"src/flags.rs\"))",
            ""
        ],
        "flags::Flags::configure_from": [
            "configure_from",
            "Real(LocalPath(\"src/flags.rs\"))",
            ""
        ],
        "flags::blocks::Blocks::configure_from": [
            "configure_from",
            "Real(LocalPath(\"src/flags/blocks.rs\"))",
            ""
        ],
        "flags::blocks::Blocks::contains_inode": [
            "contains_inode",
            "Real(LocalPath(\"src/flags/blocks.rs\"))",
            ""
        ],
        "flags::blocks::Blocks::displays_size": [
            "displays_size",
            "Real(LocalPath(\"src/flags/blocks.rs\"))",
            ""
        ],
        "flags::blocks::Blocks::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/blocks.rs\"))",
            ""
        ],
        "flags::blocks::Blocks::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/blocks.rs\"))",
            ""
        ],
        "flags::blocks::Blocks::long": [
            "long",
            "Real(LocalPath(\"src/flags/blocks.rs\"))",
            ""
        ],
        "flags::blocks::Blocks::optional_insert_context": [
            "optional_insert_context",
            "Real(LocalPath(\"src/flags/blocks.rs\"))",
            ""
        ],
        "flags::blocks::Blocks::optional_prepend_inode": [
            "optional_prepend_inode",
            "Real(LocalPath(\"src/flags/blocks.rs\"))",
            ""
        ],
        "flags::blocks::Blocks::prepend_inode": [
            "prepend_inode",
            "Real(LocalPath(\"src/flags/blocks.rs\"))",
            ""
        ],
        "flags::color::Color::configure_from": [
            "configure_from",
            "Real(LocalPath(\"src/flags/color.rs\"))",
            ""
        ],
        "flags::color::ColorOption::from_str": [
            "from_str",
            "Real(LocalPath(\"src/flags/color.rs\"))",
            ""
        ],
        "flags::color::ThemeOption::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/color.rs\"))",
            ""
        ],
        "flags::date::DateFlag::from_format_string": [
            "from_format_string",
            "Real(LocalPath(\"src/flags/date.rs\"))",
            ""
        ],
        "flags::date::DateFlag::from_str": [
            "from_str",
            "Real(LocalPath(\"src/flags/date.rs\"))",
            ""
        ],
        "flags::icons::Icons::configure_from": [
            "configure_from",
            "Real(LocalPath(\"src/flags/icons.rs\"))",
            ""
        ],
        "flags::ignore_globs::IgnoreGlobs::configure_from": [
            "configure_from",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))",
            ""
        ],
        "flags::ignore_globs::IgnoreGlobs::create_glob": [
            "create_glob",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))",
            ""
        ],
        "flags::ignore_globs::IgnoreGlobs::create_glob_set": [
            "create_glob_set",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))",
            ""
        ],
        "flags::ignore_globs::IgnoreGlobs::from_arg_matches": [
            "from_arg_matches",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))",
            ""
        ],
        "flags::ignore_globs::IgnoreGlobs::from_config": [
            "from_config",
            "Real(LocalPath(\"src/flags/ignore_globs.rs\"))",
            ""
        ],
        "flags::permission::PermissionFlag::from_str": [
            "from_str",
            "Real(LocalPath(\"src/flags/permission.rs\"))",
            ""
        ],
        "flags::recursion::Recursion::configure_from": [
            "configure_from",
            "Real(LocalPath(\"src/flags/recursion.rs\"))",
            ""
        ],
        "flags::recursion::Recursion::depth_from": [
            "depth_from",
            "Real(LocalPath(\"src/flags/recursion.rs\"))",
            ""
        ],
        "flags::recursion::Recursion::depth_from_arg_matches": [
            "depth_from_arg_matches",
            "Real(LocalPath(\"src/flags/recursion.rs\"))",
            ""
        ],
        "flags::recursion::Recursion::enabled_from": [
            "enabled_from",
            "Real(LocalPath(\"src/flags/recursion.rs\"))",
            ""
        ],
        "flags::recursion::Recursion::enabled_from_arg_matches": [
            "enabled_from_arg_matches",
            "Real(LocalPath(\"src/flags/recursion.rs\"))",
            ""
        ],
        "flags::size::SizeFlag::from_str": [
            "from_str",
            "Real(LocalPath(\"src/flags/size.rs\"))",
            ""
        ],
        "flags::sorting::DirGrouping::from_str": [
            "from_str",
            "Real(LocalPath(\"src/flags/sorting.rs\"))",
            ""
        ],
        "flags::sorting::Sorting::configure_from": [
            "configure_from",
            "Real(LocalPath(\"src/flags/sorting.rs\"))",
            ""
        ],
        "icon::Icons::get": [
            "get",
            "Real(LocalPath(\"src/icon.rs\"))",
            ""
        ],
        "icon::Icons::get_default_icons_by_extension": [
            "get_default_icons_by_extension",
            "Real(LocalPath(\"src/icon.rs\"))",
            ""
        ],
        "icon::Icons::get_default_icons_by_name": [
            "get_default_icons_by_name",
            "Real(LocalPath(\"src/icon.rs\"))",
            ""
        ],
        "icon::Icons::new": [
            "new",
            "Real(LocalPath(\"src/icon.rs\"))",
            ""
        ],
        "main": [
            "main",
            "Real(LocalPath(\"src/main.rs\"))",
            ""
        ],
        "meta::Meta::calculate_total_file_size": [
            "calculate_total_file_size",
            "Real(LocalPath(\"src/meta/mod.rs\"))",
            ""
        ],
        "meta::Meta::calculate_total_size": [
            "calculate_total_size",
            "Real(LocalPath(\"src/meta/mod.rs\"))",
            ""
        ],
        "meta::Meta::from_path": [
            "from_path",
            "Real(LocalPath(\"src/meta/mod.rs\"))",
            ""
        ],
        "meta::Meta::recurse_into": [
            "recurse_into",
            "Real(LocalPath(\"src/meta/mod.rs\"))",
            ""
        ],
        "meta::access_control::AccessControl::for_path": [
            "for_path",
            "Real(LocalPath(\"src/meta/access_control.rs\"))",
            ""
        ],
        "meta::access_control::AccessControl::from_data": [
            "from_data",
            "Real(LocalPath(\"src/meta/access_control.rs\"))",
            ""
        ],
        "meta::access_control::AccessControl::render_context": [
            "render_context",
            "Real(LocalPath(\"src/meta/access_control.rs\"))",
            ""
        ],
        "meta::access_control::AccessControl::render_method": [
            "render_method",
            "Real(LocalPath(\"src/meta/access_control.rs\"))",
            ""
        ],
        "meta::access_control::Method::name": [
            "name",
            "Real(LocalPath(\"src/meta/access_control.rs\"))",
            ""
        ],
        "meta::date::Date::date_string": [
            "date_string",
            "Real(LocalPath(\"src/meta/date.rs\"))",
            ""
        ],
        "meta::date::Date::render": [
            "render",
            "Real(LocalPath(\"src/meta/date.rs\"))",
            ""
        ],
        "meta::filetype::FileType::is_dirlike": [
            "is_dirlike",
            "Real(LocalPath(\"src/meta/filetype.rs\"))",
            ""
        ],
        "meta::filetype::FileType::new": [
            "new",
            "Real(LocalPath(\"src/meta/filetype.rs\"))",
            ""
        ],
        "meta::filetype::FileType::render": [
            "render",
            "Real(LocalPath(\"src/meta/filetype.rs\"))",
            ""
        ],
        "meta::indicator::Indicator::render": [
            "render",
            "Real(LocalPath(\"src/meta/indicator.rs\"))",
            ""
        ],
        "meta::inode::INode::render": [
            "render",
            "Real(LocalPath(\"src/meta/inode.rs\"))",
            ""
        ],
        "meta::links::Links::render": [
            "render",
            "Real(LocalPath(\"src/meta/links.rs\"))",
            ""
        ],
        "meta::name::Name::escape": [
            "escape",
            "Real(LocalPath(\"src/meta/name.rs\"))",
            ""
        ],
        "meta::name::Name::extension": [
            "extension",
            "Real(LocalPath(\"src/meta/name.rs\"))",
            ""
        ],
        "meta::name::Name::file_name": [
            "file_name",
            "Real(LocalPath(\"src/meta/name.rs\"))",
            ""
        ],
        "meta::name::Name::file_type": [
            "file_type",
            "Real(LocalPath(\"src/meta/name.rs\"))",
            ""
        ],
        "meta::name::Name::hyperlink": [
            "hyperlink",
            "Real(LocalPath(\"src/meta/name.rs\"))",
            ""
        ],
        "meta::name::Name::new": [
            "new",
            "Real(LocalPath(\"src/meta/name.rs\"))",
            ""
        ],
        "meta::name::Name::relative_path": [
            "relative_path",
            "Real(LocalPath(\"src/meta/name.rs\"))",
            ""
        ],
        "meta::name::Name::render": [
            "render",
            "Real(LocalPath(\"src/meta/name.rs\"))",
            ""
        ],
        "meta::owner::Owner::new": [
            "new",
            "Real(LocalPath(\"src/meta/owner.rs\"))",
            ""
        ],
        "meta::owner::Owner::render_group": [
            "render_group",
            "Real(LocalPath(\"src/meta/owner.rs\"))",
            ""
        ],
        "meta::owner::Owner::render_user": [
            "render_user",
            "Real(LocalPath(\"src/meta/owner.rs\"))",
            ""
        ],
        "meta::permissions::Permissions::bits_to_octal": [
            "bits_to_octal",
            "Real(LocalPath(\"src/meta/permissions.rs\"))",
            ""
        ],
        "meta::permissions::Permissions::is_executable": [
            "is_executable",
            "Real(LocalPath(\"src/meta/permissions.rs\"))",
            ""
        ],
        "meta::permissions::Permissions::render": [
            "render",
            "Real(LocalPath(\"src/meta/permissions.rs\"))",
            ""
        ],
        "meta::size::Size::format_size": [
            "format_size",
            "Real(LocalPath(\"src/meta/size.rs\"))",
            ""
        ],
        "meta::size::Size::get_bytes": [
            "get_bytes",
            "Real(LocalPath(\"src/meta/size.rs\"))",
            ""
        ],
        "meta::size::Size::get_unit": [
            "get_unit",
            "Real(LocalPath(\"src/meta/size.rs\"))",
            ""
        ],
        "meta::size::Size::new": [
            "new",
            "Real(LocalPath(\"src/meta/size.rs\"))",
            ""
        ],
        "meta::size::Size::paint": [
            "paint",
            "Real(LocalPath(\"src/meta/size.rs\"))",
            ""
        ],
        "meta::size::Size::render": [
            "render",
            "Real(LocalPath(\"src/meta/size.rs\"))",
            ""
        ],
        "meta::size::Size::render_unit": [
            "render_unit",
            "Real(LocalPath(\"src/meta/size.rs\"))",
            ""
        ],
        "meta::size::Size::render_value": [
            "render_value",
            "Real(LocalPath(\"src/meta/size.rs\"))",
            ""
        ],
        "meta::size::Size::unit_string": [
            "unit_string",
            "Real(LocalPath(\"src/meta/size.rs\"))",
            ""
        ],
        "meta::size::Size::value_string": [
            "value_string",
            "Real(LocalPath(\"src/meta/size.rs\"))",
            ""
        ],
        "meta::symlink::SymLink::render": [
            "render",
            "Real(LocalPath(\"src/meta/symlink.rs\"))",
            ""
        ],
        "meta::symlink::SymLink::symlink_string": [
            "symlink_string",
            "Real(LocalPath(\"src/meta/symlink.rs\"))",
            ""
        ],
        "sort::assemble_sorters": [
            "assemble_sorters",
            "Real(LocalPath(\"src/sort.rs\"))",
            ""
        ],
        "sort::by_date": [
            "by_date",
            "Real(LocalPath(\"src/sort.rs\"))",
            ""
        ],
        "sort::by_extension": [
            "by_extension",
            "Real(LocalPath(\"src/sort.rs\"))",
            ""
        ],
        "sort::by_meta": [
            "by_meta",
            "Real(LocalPath(\"src/sort.rs\"))",
            ""
        ],
        "sort::by_name": [
            "by_name",
            "Real(LocalPath(\"src/sort.rs\"))",
            ""
        ],
        "sort::by_size": [
            "by_size",
            "Real(LocalPath(\"src/sort.rs\"))",
            ""
        ],
        "sort::by_version": [
            "by_version",
            "Real(LocalPath(\"src/sort.rs\"))",
            ""
        ],
        "sort::with_dirs_first": [
            "with_dirs_first",
            "Real(LocalPath(\"src/sort.rs\"))",
            ""
        ]
    },
    "trait_to_struct": {
        "config_file::_::_serde::Deserialize": [
            "color::theme::Date",
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::INode",
            "color::theme::Links",
            "color::theme::Permission",
            "color::theme::Size",
            "color::theme::Symlink",
            "color::theme::Theme",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field",
            "config_file::Color",
            "config_file::Config",
            "config_file::Icons",
            "config_file::Recursion",
            "config_file::Sorting",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field",
            "flags::display::Display",
            "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field",
            "flags::hyperlink::HyperlinkOption",
            "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field",
            "flags::layout::Layout",
            "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field",
            "flags::permission::PermissionFlag",
            "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field",
            "flags::size::SizeFlag",
            "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field"
        ],
        "config_file::_::_serde::de::Visitor": [
            "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor",
            "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor",
            "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor",
            "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor",
            "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor",
            "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor",
            "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor",
            "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor",
            "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor",
            "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor",
            "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor",
            "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor",
            "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor",
            "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor",
            "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor",
            "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor",
            "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor"
        ],
        "flags::Configurable": [
            "flags::color::ColorOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize"
        ],
        "std::clone::Clone": [
            "color::Elem",
            "flags::Flags",
            "flags::blocks::Block",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "icon::Theme",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::size::Unit",
            "meta::symlink::SymLink"
        ],
        "std::cmp::Eq": [
            "color::Elem",
            "config_file::Color",
            "config_file::Config",
            "config_file::Icons",
            "config_file::Recursion",
            "config_file::Sorting",
            "flags::blocks::Block",
            "flags::blocks::Blocks",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "icon::Theme",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::size::Unit"
        ],
        "std::cmp::Ord": [
            "flags::blocks::Block",
            "meta::date::Date",
            "meta::name::Name"
        ],
        "std::cmp::PartialEq": [
            "color::Elem",
            "color::theme::Date",
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::INode",
            "color::theme::Links",
            "color::theme::Permission",
            "color::theme::Size",
            "color::theme::Symlink",
            "color::theme::Theme",
            "config_file::Color",
            "config_file::Config",
            "config_file::Icons",
            "config_file::Recursion",
            "config_file::Sorting",
            "flags::blocks::Block",
            "flags::blocks::Blocks",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "icon::Theme",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::size::Unit"
        ],
        "std::cmp::PartialOrd": [
            "flags::blocks::Block",
            "meta::date::Date",
            "meta::name::Name"
        ],
        "std::convert::From": [
            "meta::date::Date",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::symlink::SymLink"
        ],
        "std::convert::TryFrom": [
            "flags::blocks::Block"
        ],
        "std::default::Default": [
            "color::theme::Date",
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::INode",
            "color::theme::Links",
            "color::theme::Permission",
            "color::theme::Size",
            "color::theme::Symlink",
            "color::theme::Theme",
            "config_file::Config",
            "flags::Flags",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize"
        ],
        "std::fmt::Debug": [
            "color::Elem",
            "color::theme::Date",
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::INode",
            "color::theme::Links",
            "color::theme::Permission",
            "color::theme::Size",
            "color::theme::Symlink",
            "color::theme::Theme",
            "config_file::Color",
            "config_file::Config",
            "config_file::Icons",
            "config_file::Recursion",
            "config_file::Sorting",
            "flags::Flags",
            "flags::blocks::Block",
            "flags::blocks::Blocks",
            "flags::color::Color",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::ignore_globs::IgnoreGlobs",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "icon::Theme",
            "meta::Meta",
            "meta::access_control::AccessControl",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::indicator::Indicator",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::DisplayOption",
            "meta::name::Name",
            "meta::owner::Owner",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::size::Unit",
            "meta::symlink::SymLink"
        ],
        "std::fmt::Display": [
            "flags::symlink_arrow::SymlinkArrow"
        ],
        "std::hash::Hash": [
            "color::Elem",
            "flags::blocks::Block"
        ],
        "std::marker::Copy": [
            "flags::blocks::Block",
            "flags::color::ColorOption",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconTheme",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "icon::Theme",
            "meta::filetype::FileType",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::permissions::Permissions"
        ],
        "std::marker::StructuralEq": [
            "color::Elem",
            "config_file::Color",
            "config_file::Config",
            "config_file::Icons",
            "config_file::Recursion",
            "config_file::Sorting",
            "flags::blocks::Block",
            "flags::blocks::Blocks",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "icon::Theme",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::name::Name",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::size::Unit"
        ],
        "std::marker::StructuralPartialEq": [
            "color::Elem",
            "color::theme::Date",
            "color::theme::Dir",
            "color::theme::File",
            "color::theme::FileType",
            "color::theme::INode",
            "color::theme::Links",
            "color::theme::Permission",
            "color::theme::Size",
            "color::theme::Symlink",
            "color::theme::Theme",
            "config_file::Color",
            "config_file::Config",
            "config_file::Icons",
            "config_file::Recursion",
            "config_file::Sorting",
            "flags::blocks::Block",
            "flags::blocks::Blocks",
            "flags::color::ColorOption",
            "flags::color::ThemeOption",
            "flags::date::DateFlag",
            "flags::dereference::Dereference",
            "flags::display::Display",
            "flags::hyperlink::HyperlinkOption",
            "flags::icons::IconOption",
            "flags::icons::IconSeparator",
            "flags::icons::IconTheme",
            "flags::icons::Icons",
            "flags::indicators::Indicators",
            "flags::layout::Layout",
            "flags::permission::PermissionFlag",
            "flags::recursion::Recursion",
            "flags::size::SizeFlag",
            "flags::sorting::DirGrouping",
            "flags::sorting::SortColumn",
            "flags::sorting::SortOrder",
            "flags::sorting::Sorting",
            "flags::symlink_arrow::SymlinkArrow",
            "flags::symlinks::NoSymlink",
            "flags::total_size::TotalSize",
            "icon::Theme",
            "meta::date::Date",
            "meta::filetype::FileType",
            "meta::inode::INode",
            "meta::links::Links",
            "meta::permissions::Permissions",
            "meta::size::Size",
            "meta::size::Unit"
        ]
    },
    "type_to_def_path": {
        "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor": "<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor",
        "color::Colors": "color::Colors",
        "color::Elem": "color::Elem",
        "color::theme::Date": "color::theme::Date",
        "color::theme::Dir": "color::theme::Dir",
        "color::theme::File": "color::theme::File",
        "color::theme::FileType": "color::theme::FileType",
        "color::theme::INode": "color::theme::INode",
        "color::theme::Links": "color::theme::Links",
        "color::theme::Permission": "color::theme::Permission",
        "color::theme::Size": "color::theme::Size",
        "color::theme::Symlink": "color::theme::Symlink",
        "color::theme::Theme": "color::theme::Theme",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de>": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de>": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de>": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de>": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de>": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de>": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de>": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de>": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de>": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor",
        "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de>": "color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor",
        "config_file::Color": "config_file::Color",
        "config_file::Config": "config_file::Config",
        "config_file::Icons": "config_file::Icons",
        "config_file::Recursion": "config_file::Recursion",
        "config_file::Sorting": "config_file::Sorting",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de>": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de>": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de>": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de>": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor",
        "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de>": "config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor",
        "core::Core": "core::Core",
        "flags::Flags": "flags::Flags",
        "flags::blocks::Block": "flags::blocks::Block",
        "flags::blocks::Blocks": "flags::blocks::Blocks",
        "flags::color::Color": "flags::color::Color",
        "flags::color::ColorOption": "flags::color::ColorOption",
        "flags::color::ThemeOption": "flags::color::ThemeOption",
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field": "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field",
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor": "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor",
        "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de>": "flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor",
        "flags::date::DateFlag": "flags::date::DateFlag",
        "flags::dereference::Dereference": "flags::dereference::Dereference",
        "flags::display::Display": "flags::display::Display",
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field": "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field",
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor": "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor",
        "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de>": "flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor",
        "flags::hyperlink::HyperlinkOption": "flags::hyperlink::HyperlinkOption",
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field": "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field",
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor": "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor",
        "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de>": "flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor",
        "flags::icons::IconOption": "flags::icons::IconOption",
        "flags::icons::IconSeparator": "flags::icons::IconSeparator",
        "flags::icons::IconTheme": "flags::icons::IconTheme",
        "flags::icons::Icons": "flags::icons::Icons",
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field": "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field",
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor": "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor",
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de>": "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor",
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de>": "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor",
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field": "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field",
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor": "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor",
        "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de>": "flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor",
        "flags::ignore_globs::IgnoreGlobs": "flags::ignore_globs::IgnoreGlobs",
        "flags::indicators::Indicators": "flags::indicators::Indicators",
        "flags::layout::Layout": "flags::layout::Layout",
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field": "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field",
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor": "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor",
        "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de>": "flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor",
        "flags::permission::PermissionFlag": "flags::permission::PermissionFlag",
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field": "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field",
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor": "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor",
        "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de>": "flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor",
        "flags::recursion::Recursion": "flags::recursion::Recursion",
        "flags::size::SizeFlag": "flags::size::SizeFlag",
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field": "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field",
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor": "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor",
        "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de>": "flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor",
        "flags::sorting::DirGrouping": "flags::sorting::DirGrouping",
        "flags::sorting::SortColumn": "flags::sorting::SortColumn",
        "flags::sorting::SortOrder": "flags::sorting::SortOrder",
        "flags::sorting::Sorting": "flags::sorting::Sorting",
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field": "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field",
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor": "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor",
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de>": "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor",
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field": "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field",
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor": "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor",
        "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de>": "flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor",
        "flags::symlink_arrow::SymlinkArrow": "flags::symlink_arrow::SymlinkArrow",
        "flags::symlinks::NoSymlink": "flags::symlinks::NoSymlink",
        "flags::total_size::TotalSize": "flags::total_size::TotalSize",
        "icon::Icons": "icon::Icons",
        "icon::Theme": "icon::Theme",
        "meta::Meta": "meta::Meta",
        "meta::access_control::AccessControl": "meta::access_control::AccessControl",
        "meta::access_control::Method": "meta::access_control::Method",
        "meta::date::Date": "meta::date::Date",
        "meta::filetype::FileType": "meta::filetype::FileType",
        "meta::indicator::Indicator": "meta::indicator::Indicator",
        "meta::inode::INode": "meta::inode::INode",
        "meta::links::Links": "meta::links::Links",
        "meta::name::DisplayOption<'a>": "meta::name::DisplayOption",
        "meta::name::Name": "meta::name::Name",
        "meta::owner::Owner": "meta::owner::Owner",
        "meta::permissions::Permissions": "meta::permissions::Permissions",
        "meta::size::Size": "meta::size::Size",
        "meta::size::Unit": "meta::size::Unit",
        "meta::symlink::SymLink": "meta::symlink::SymLink"
    }
}