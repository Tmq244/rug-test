-----------------
src/app.rs app::build
deps:{}
candidates:{}
+app::build();
+crate::app::build();
+crate::app::build();
-----------------
src/app.rs app::validate_date_argument
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
+app::validate_date_argument(p0);
+crate::app::validate_date_argument(p0);
+crate::app::validate_date_argument(p0);
-----------------
src/app.rs app::validate_time_format
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+app::validate_time_format(&p0);
+crate::app::validate_time_format(&p0);
+crate::app::validate_time_format(&p0);
-----------------
src/color.rs color::to_content_style
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // lscolors::Style
+color::to_content_style(p0);
+crate::color::to_content_style(p0);
+crate::color::to_content_style(p0);
-----------------
src/display.rs display::grid
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [meta::Meta]
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::Flags
let mut p2 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p3 = & MaybeUninit::uninit().assume_init(); // icon::Icons
+display::grid(p0, p1, p2, p3);
+crate::display::grid(p0, p1, p2, p3);
+crate::display::grid(p0, p1, p2, p3);
-----------------
src/display.rs display::tree
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [meta::Meta]
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::Flags
let mut p2 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p3 = & MaybeUninit::uninit().assume_init(); // icon::Icons
+display::tree(p0, p1, p2, p3);
+crate::display::tree(p0, p1, p2, p3);
+crate::display::tree(p0, p1, p2, p3);
-----------------
src/display.rs display::inner_display_grid
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::DisplayOption<'_>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [meta::Meta]
let mut p2 = & MaybeUninit::uninit().assume_init(); // flags::Flags
let mut p3 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p4 = & MaybeUninit::uninit().assume_init(); // icon::Icons
let mut p5 = 0usize; // None+usize
let mut p6 = MaybeUninit::uninit().assume_init(); // std::option::Option<usize>
+display::inner_display_grid(p0, p1, p2, p3, p4, p5, p6);
+crate::display::inner_display_grid(p0, p1, p2, p3, p4, p5, p6);
+crate::display::inner_display_grid(p0, p1, p2, p3, p4, p5, p6);
-----------------
src/display.rs display::inner_display_tree
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [meta::Meta]
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::Flags
let mut p2 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p3 = & MaybeUninit::uninit().assume_init(); // icon::Icons
let mut p4 = MaybeUninit::uninit().assume_init(); // (usize, &str)
let mut p5 = & MaybeUninit::uninit().assume_init(); // std::collections::HashMap<flags::blocks::Block, usize>
let mut p6 = 0usize; // None+usize
+display::inner_display_tree(p0, p1, p2, p3, p4, p5, p6);
+crate::display::inner_display_tree(p0, p1, p2, p3, p4, p5, p6);
+crate::display::inner_display_tree(p0, p1, p2, p3, p4, p5, p6);
-----------------
src/display.rs display::should_display_folder_path
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
let mut p1 = & MaybeUninit::uninit().assume_init(); // [meta::Meta]
let mut p2 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+display::should_display_folder_path(p0, p1, p2);
+crate::display::should_display_folder_path(p0, p1, p2);
+crate::display::should_display_folder_path(p0, p1, p2);
-----------------
src/display.rs display::display_folder_path
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::Meta
+display::display_folder_path(p0);
+crate::display::display_folder_path(p0);
+crate::display::display_folder_path(p0);
-----------------
src/display.rs display::get_output
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::Meta
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p2 = & MaybeUninit::uninit().assume_init(); // icon::Icons
let mut p3 = & MaybeUninit::uninit().assume_init(); // flags::Flags
let mut p4 = & MaybeUninit::uninit().assume_init(); // meta::name::DisplayOption<'_>
let mut p5 = & MaybeUninit::uninit().assume_init(); // std::collections::HashMap<flags::blocks::Block, usize>
let mut p6 = MaybeUninit::uninit().assume_init(); // (usize, &'a str)
+display::get_output(p0, p1, p2, p3, p4, p5, p6);
+crate::display::get_output(p0, p1, p2, p3, p4, p5, p6);
+crate::display::get_output(p0, p1, p2, p3, p4, p5, p6);
-----------------
src/display.rs display::get_visible_width
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = true; // None+bool
+display::get_visible_width(&p0, p1);
+crate::display::get_visible_width(&p0, p1);
+crate::display::get_visible_width(&p0, p1);
-----------------
src/display.rs display::detect_size_lengths
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [meta::Meta]
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+display::detect_size_lengths(p0, p1);
+crate::display::detect_size_lengths(p0, p1);
+crate::display::detect_size_lengths(p0, p1);
-----------------
src/display.rs display::get_padding_rules
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [meta::Meta]
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+display::get_padding_rules(p0, p1);
+crate::display::get_padding_rules(p0, p1);
+crate::display::get_padding_rules(p0, p1);
-----------------
src/sort.rs sort::assemble_sorters
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+sort::assemble_sorters(p0);
+crate::sort::assemble_sorters(p0);
+crate::sort::assemble_sorters(p0);
-----------------
src/sort.rs sort::by_meta
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)]
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::Meta
let mut p2 = & MaybeUninit::uninit().assume_init(); // meta::Meta
+sort::by_meta(p0, p1, p2);
+crate::sort::by_meta(p0, p1, p2);
+crate::sort::by_meta(p0, p1, p2);
-----------------
src/sort.rs sort::with_dirs_first
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::Meta
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::Meta
+sort::with_dirs_first(p0, p1);
+crate::sort::with_dirs_first(p0, p1);
+crate::sort::with_dirs_first(p0, p1);
-----------------
src/sort.rs sort::by_size
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::Meta
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::Meta
+sort::by_size(p0, p1);
+crate::sort::by_size(p0, p1);
+crate::sort::by_size(p0, p1);
-----------------
src/sort.rs sort::by_name
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::Meta
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::Meta
+sort::by_name(p0, p1);
+crate::sort::by_name(p0, p1);
+crate::sort::by_name(p0, p1);
-----------------
src/sort.rs sort::by_date
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::Meta
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::Meta
+sort::by_date(p0, p1);
+crate::sort::by_date(p0, p1);
+crate::sort::by_date(p0, p1);
-----------------
src/sort.rs sort::by_version
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::Meta
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::Meta
+sort::by_version(p0, p1);
+crate::sort::by_version(p0, p1);
+crate::sort::by_version(p0, p1);
-----------------
src/sort.rs sort::by_extension
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::Meta
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::Meta
+sort::by_extension(p0, p1);
+crate::sort::by_extension(p0, p1);
+crate::sort::by_extension(p0, p1);
-----------------
src/main.rs main
deps:{}
candidates:{}
+main();
+crate::main();
+crate::main();
-----------------
src/flags.rs flags::Configurable::configure_from
deps:{"flags::Configurable::configure_from":{"Self":["flags::Configurable"],"T":["std::marker::Sized","std::default::Default"]}}
candidates:{"flags::Configurable::configure_from":{"Self":["flags::layout::Layout","flags::dereference::Dereference","flags::icons::IconOption","flags::date::DateFlag","flags::total_size::TotalSize","flags::indicators::Indicators","flags::hyperlink::HyperlinkOption","flags::permission::PermissionFlag","flags::sorting::SortOrder","flags::size::SizeFlag","flags::symlinks::NoSymlink","flags::color::ColorOption","flags::display::Display","flags::sorting::DirGrouping","flags::symlink_arrow::SymlinkArrow","flags::icons::IconSeparator","flags::sorting::SortColumn","flags::icons::IconTheme"],"T":["color::theme::Dir","color::theme::Theme","color::theme::INode","color::theme::Size","flags::icons::IconSeparator","color::theme::File","flags::layout::Layout","flags::icons::IconOption","flags::sorting::DirGrouping","flags::color::ColorOption","color::theme::FileType","flags::sorting::SortColumn","flags::size::SizeFlag","flags::icons::Icons","flags::Flags","flags::display::Display","color::theme::Links","flags::indicators::Indicators","flags::color::ThemeOption","color::theme::Permission","flags::color::Color","flags::total_size::TotalSize","flags::date::DateFlag","flags::dereference::Dereference","flags::icons::IconTheme","color::theme::Date","flags::symlink_arrow::SymlinkArrow","color::theme::Symlink","flags::symlinks::NoSymlink","config_file::Config","flags::recursion::Recursion","flags::hyperlink::HyperlinkOption","flags::permission::PermissionFlag","flags::ignore_globs::IgnoreGlobs","flags::blocks::Blocks","flags::sorting::Sorting","flags::sorting::SortOrder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::Configurable::configure_from(p0, p1);
+crate::flags::Configurable::configure_from(p0, p1);
+crate::flags::Configurable::configure_from(p0, p1);
-----------------
src/flags.rs flags::Configurable::from_arg_matches
deps:{"flags::Configurable::from_arg_matches":{"Self":["flags::Configurable"],"T":["std::marker::Sized","std::default::Default"]}}
candidates:{"flags::Configurable::from_arg_matches":{"Self":["flags::size::SizeFlag","flags::sorting::SortColumn","flags::dereference::Dereference","flags::sorting::SortOrder","flags::layout::Layout","flags::display::Display","flags::symlink_arrow::SymlinkArrow","flags::hyperlink::HyperlinkOption","flags::date::DateFlag","flags::icons::IconOption","flags::icons::IconTheme","flags::icons::IconSeparator","flags::sorting::DirGrouping","flags::permission::PermissionFlag","flags::symlinks::NoSymlink","flags::total_size::TotalSize","flags::indicators::Indicators","flags::color::ColorOption"],"T":["flags::recursion::Recursion","color::theme::INode","color::theme::Symlink","flags::icons::IconTheme","flags::hyperlink::HyperlinkOption","flags::ignore_globs::IgnoreGlobs","flags::date::DateFlag","flags::symlink_arrow::SymlinkArrow","flags::color::ThemeOption","color::theme::Size","flags::symlinks::NoSymlink","flags::display::Display","flags::indicators::Indicators","color::theme::FileType","flags::Flags","color::theme::Date","config_file::Config","flags::sorting::DirGrouping","flags::sorting::SortOrder","color::theme::Permission","flags::dereference::Dereference","flags::size::SizeFlag","color::theme::Dir","flags::total_size::TotalSize","color::theme::Links","flags::icons::Icons","flags::layout::Layout","flags::color::ColorOption","flags::permission::PermissionFlag","flags::color::Color","flags::icons::IconSeparator","color::theme::File","flags::icons::IconOption","color::theme::Theme","flags::sorting::Sorting","flags::blocks::Blocks","flags::sorting::SortColumn"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+flags::Configurable::from_arg_matches(p0);
+crate::flags::Configurable::from_arg_matches(p0);
+crate::flags::Configurable::from_arg_matches(p0);
-----------------
src/flags.rs flags::Configurable::from_config
deps:{"flags::Configurable::from_config":{"Self":["flags::Configurable"],"T":["std::marker::Sized","std::default::Default"]}}
candidates:{"flags::Configurable::from_config":{"Self":["flags::symlinks::NoSymlink","flags::icons::IconOption","flags::color::ColorOption","flags::layout::Layout","flags::dereference::Dereference","flags::icons::IconSeparator","flags::indicators::Indicators","flags::sorting::DirGrouping","flags::date::DateFlag","flags::sorting::SortOrder","flags::size::SizeFlag","flags::total_size::TotalSize","flags::display::Display","flags::icons::IconTheme","flags::hyperlink::HyperlinkOption","flags::permission::PermissionFlag","flags::sorting::SortColumn","flags::symlink_arrow::SymlinkArrow"],"T":["flags::total_size::TotalSize","color::theme::File","flags::color::ThemeOption","flags::icons::Icons","flags::icons::IconOption","flags::recursion::Recursion","flags::sorting::Sorting","flags::blocks::Blocks","config_file::Config","color::theme::Theme","flags::symlink_arrow::SymlinkArrow","flags::indicators::Indicators","color::theme::FileType","flags::icons::IconSeparator","color::theme::Symlink","flags::size::SizeFlag","color::theme::Dir","color::theme::Date","flags::sorting::DirGrouping","flags::permission::PermissionFlag","flags::color::Color","color::theme::Size","flags::icons::IconTheme","flags::sorting::SortColumn","flags::date::DateFlag","flags::ignore_globs::IgnoreGlobs","flags::sorting::SortOrder","flags::symlinks::NoSymlink","color::theme::INode","color::theme::Permission","flags::hyperlink::HyperlinkOption","color::theme::Links","flags::display::Display","flags::Flags","flags::color::ColorOption","flags::layout::Layout","flags::dereference::Dereference"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::Configurable::from_config(p0);
+crate::flags::Configurable::from_config(p0);
+crate::flags::Configurable::from_config(p0);
-----------------
src/flags.rs flags::Configurable::from_environment
deps:{"flags::Configurable::from_environment":{"Self":["flags::Configurable"],"T":["std::marker::Sized","std::default::Default"]}}
candidates:{"flags::Configurable::from_environment":{"Self":["flags::display::Display","flags::hyperlink::HyperlinkOption","flags::sorting::DirGrouping","flags::icons::IconOption","flags::icons::IconTheme","flags::color::ColorOption","flags::date::DateFlag","flags::size::SizeFlag","flags::indicators::Indicators","flags::sorting::SortColumn","flags::symlinks::NoSymlink","flags::permission::PermissionFlag","flags::layout::Layout","flags::symlink_arrow::SymlinkArrow","flags::total_size::TotalSize","flags::sorting::SortOrder","flags::icons::IconSeparator","flags::dereference::Dereference"],"T":["flags::sorting::DirGrouping","flags::total_size::TotalSize","flags::indicators::Indicators","flags::icons::IconSeparator","config_file::Config","flags::icons::Icons","flags::color::Color","flags::dereference::Dereference","color::theme::Links","color::theme::File","flags::symlinks::NoSymlink","flags::ignore_globs::IgnoreGlobs","flags::sorting::SortOrder","flags::recursion::Recursion","flags::color::ColorOption","flags::permission::PermissionFlag","color::theme::Date","flags::display::Display","flags::blocks::Blocks","color::theme::Dir","flags::sorting::SortColumn","flags::icons::IconTheme","color::theme::Permission","color::theme::FileType","flags::color::ThemeOption","color::theme::INode","color::theme::Size","flags::icons::IconOption","flags::date::DateFlag","flags::layout::Layout","flags::hyperlink::HyperlinkOption","flags::Flags","flags::symlink_arrow::SymlinkArrow","color::theme::Theme","color::theme::Symlink","flags::sorting::Sorting","flags::size::SizeFlag"]}}
+flags::Configurable::from_environment();
+crate::flags::Configurable::from_environment();
+crate::flags::Configurable::from_environment();
-----------------
src/color/theme.rs <color::theme::Theme as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Theme
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<color::theme::Theme as std::fmt::Debug>::fmt(p0, p1);
+crate::<color::theme::Theme as std::fmt::Debug>::fmt(p0, p1);
+<color::theme::Theme>::fmt(p0, p1);
-----------------
src/color/theme.rs color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"],"color::theme::Theme":["std::default::Default"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize":{"__D":["config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U32Deserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::I128Deserializer<E>","serde_yaml::Value","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::U128Deserializer<E>","serde_yaml::value::de::MapDeserializer","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","&'a serde_yaml::Number"],"color::theme::Theme":["flags::color::ColorOption","color::theme::Date","flags::color::ThemeOption","color::theme::Permission","flags::dereference::Dereference","flags::sorting::Sorting","flags::total_size::TotalSize","color::theme::Symlink","flags::sorting::DirGrouping","flags::Flags","flags::permission::PermissionFlag","flags::ignore_globs::IgnoreGlobs","flags::symlinks::NoSymlink","flags::hyperlink::HyperlinkOption","config_file::Config","flags::sorting::SortColumn","flags::date::DateFlag","flags::icons::Icons","flags::display::Display","color::theme::INode","flags::size::SizeFlag","color::theme::File","color::theme::FileType","flags::symlink_arrow::SymlinkArrow","flags::recursion::Recursion","flags::blocks::Blocks","flags::layout::Layout","color::theme::Theme","flags::color::Color","color::theme::Links","flags::icons::IconOption","color::theme::Dir","color::theme::Size","flags::icons::IconSeparator","flags::sorting::SortOrder","flags::icons::IconTheme","flags::indicators::Indicators"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize(p0);
+crate::color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize(p0);
+<color::theme::Theme>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::MapAccessDeserializer<A>","serde_yaml::Number","config_file::_::_serde::de::value::U64Deserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","serde_yaml::Value","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","serde_yaml::value::de::SeqDeserializer"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Field>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Theme":["std::default::Default"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Theme":["flags::hyperlink::HyperlinkOption","color::theme::Date","flags::sorting::SortOrder","flags::ignore_globs::IgnoreGlobs","flags::color::ColorOption","color::theme::Symlink","flags::icons::Icons","flags::date::DateFlag","flags::blocks::Blocks","flags::permission::PermissionFlag","flags::recursion::Recursion","flags::icons::IconTheme","flags::size::SizeFlag","color::theme::Links","flags::dereference::Dereference","color::theme::Theme","flags::Flags","color::theme::File","flags::total_size::TotalSize","color::theme::Size","color::theme::Permission","flags::sorting::DirGrouping","flags::symlink_arrow::SymlinkArrow","flags::symlinks::NoSymlink","flags::display::Display","flags::layout::Layout","flags::indicators::Indicators","flags::color::Color","flags::icons::IconOption","config_file::Config","flags::color::ThemeOption","color::theme::Dir","color::theme::INode","flags::icons::IconSeparator","color::theme::FileType","flags::sorting::Sorting","flags::sorting::SortColumn"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::SeqAccess","std::marker::Sized"],"color::theme::Theme":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_yaml::de::SeqAccess<'a, 'r>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::PairVisitor<A, B, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","serde_yaml::value::de::SeqDeserializer","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>"],"color::theme::Theme":["flags::sorting::Sorting","flags::layout::Layout","flags::indicators::Indicators","flags::icons::Icons","color::theme::Date","flags::icons::IconOption","flags::color::ColorOption","flags::hyperlink::HyperlinkOption","color::theme::Links","flags::color::Color","flags::symlinks::NoSymlink","flags::icons::IconTheme","color::theme::Permission","color::theme::Theme","color::theme::Dir","flags::size::SizeFlag","color::theme::Symlink","color::theme::FileType","flags::Flags","color::theme::INode","flags::icons::IconSeparator","flags::color::ThemeOption","flags::sorting::SortColumn","flags::sorting::DirGrouping","flags::dereference::Dereference","flags::display::Display","flags::date::DateFlag","config_file::Config","flags::ignore_globs::IgnoreGlobs","flags::sorting::SortOrder","flags::symlink_arrow::SymlinkArrow","color::theme::Size","flags::recursion::Recursion","flags::total_size::TotalSize","flags::permission::PermissionFlag","color::theme::File","flags::blocks::Blocks"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","config_file::_::_serde::de::MapAccess"],"color::theme::Theme":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","serde_yaml::de::MapAccess<'a, 'r>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>"],"color::theme::Theme":["flags::display::Display","flags::date::DateFlag","flags::color::ThemeOption","flags::sorting::DirGrouping","flags::Flags","color::theme::Theme","flags::sorting::SortColumn","color::theme::Permission","flags::sorting::Sorting","flags::icons::IconSeparator","color::theme::Size","flags::symlinks::NoSymlink","flags::size::SizeFlag","config_file::Config","flags::sorting::SortOrder","flags::symlink_arrow::SymlinkArrow","flags::blocks::Blocks","flags::color::ColorOption","flags::icons::Icons","flags::color::Color","color::theme::FileType","color::theme::INode","flags::recursion::Recursion","color::theme::Dir","flags::permission::PermissionFlag","flags::icons::IconOption","flags::ignore_globs::IgnoreGlobs","color::theme::Date","flags::indicators::Indicators","color::theme::File","color::theme::Links","flags::total_size::TotalSize","flags::hyperlink::HyperlinkOption","flags::dereference::Dereference","color::theme::Symlink","flags::icons::IconTheme","flags::layout::Layout"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Theme>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/color/theme.rs <color::theme::Theme as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Theme
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::theme::Theme
+p0.eq(p1);
+<color::theme::Theme as std::cmp::PartialEq>::eq(p0, p1);
+crate::<color::theme::Theme as std::cmp::PartialEq>::eq(p0, p1);
+<color::theme::Theme>::eq(p0, p1);
-----------------
src/color/theme.rs <color::theme::Permission as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Permission
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<color::theme::Permission as std::fmt::Debug>::fmt(p0, p1);
+crate::<color::theme::Permission as std::fmt::Debug>::fmt(p0, p1);
+<color::theme::Permission>::fmt(p0, p1);
-----------------
src/color/theme.rs color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"],"color::theme::Permission":["std::default::Default"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize":{"__D":["config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","&'a serde_yaml::Number","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::UnitDeserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::U32Deserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_yaml::Value","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>"],"color::theme::Permission":["flags::indicators::Indicators","flags::icons::Icons","color::theme::Dir","flags::recursion::Recursion","color::theme::Links","color::theme::FileType","color::theme::File","flags::hyperlink::HyperlinkOption","flags::permission::PermissionFlag","color::theme::Date","flags::total_size::TotalSize","color::theme::Permission","flags::sorting::Sorting","flags::layout::Layout","flags::display::Display","color::theme::Symlink","flags::color::Color","flags::size::SizeFlag","flags::color::ThemeOption","flags::icons::IconTheme","flags::ignore_globs::IgnoreGlobs","flags::sorting::SortOrder","flags::dereference::Dereference","color::theme::INode","flags::symlinks::NoSymlink","color::theme::Theme","flags::icons::IconOption","flags::date::DateFlag","flags::sorting::SortColumn","config_file::Config","flags::color::ColorOption","flags::Flags","flags::sorting::DirGrouping","flags::symlink_arrow::SymlinkArrow","color::theme::Size","flags::icons::IconSeparator","flags::blocks::Blocks"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize(p0);
+crate::color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize(p0);
+<color::theme::Permission>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","serde_yaml::Value","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::IsizeDeserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::CharDeserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::Number","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::F64Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Field>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Permission":["std::default::Default"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Permission":["flags::dereference::Dereference","flags::sorting::SortOrder","flags::color::ThemeOption","flags::icons::IconSeparator","flags::blocks::Blocks","color::theme::Dir","color::theme::File","flags::size::SizeFlag","config_file::Config","color::theme::Permission","flags::display::Display","flags::sorting::Sorting","flags::icons::Icons","flags::symlink_arrow::SymlinkArrow","flags::sorting::DirGrouping","color::theme::FileType","flags::sorting::SortColumn","color::theme::INode","color::theme::Links","color::theme::Symlink","flags::color::ColorOption","flags::color::Color","flags::symlinks::NoSymlink","color::theme::Date","flags::icons::IconOption","flags::permission::PermissionFlag","color::theme::Size","flags::layout::Layout","flags::Flags","flags::date::DateFlag","color::theme::Theme","flags::icons::IconTheme","flags::total_size::TotalSize","flags::indicators::Indicators","flags::recursion::Recursion","flags::ignore_globs::IgnoreGlobs","flags::hyperlink::HyperlinkOption"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","config_file::_::_serde::de::SeqAccess"],"color::theme::Permission":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::PairVisitor<A, B, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_yaml::de::SeqAccess<'a, 'r>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>"],"color::theme::Permission":["flags::icons::Icons","flags::sorting::SortColumn","color::theme::Dir","flags::icons::IconOption","flags::ignore_globs::IgnoreGlobs","flags::blocks::Blocks","flags::symlink_arrow::SymlinkArrow","flags::sorting::Sorting","flags::sorting::SortOrder","color::theme::Permission","color::theme::INode","flags::indicators::Indicators","color::theme::FileType","flags::color::ThemeOption","color::theme::Date","flags::display::Display","flags::color::ColorOption","flags::hyperlink::HyperlinkOption","flags::icons::IconTheme","flags::symlinks::NoSymlink","flags::total_size::TotalSize","flags::color::Color","config_file::Config","flags::layout::Layout","color::theme::File","flags::sorting::DirGrouping","color::theme::Size","flags::recursion::Recursion","flags::icons::IconSeparator","flags::dereference::Dereference","flags::date::DateFlag","flags::permission::PermissionFlag","color::theme::Links","color::theme::Symlink","flags::size::SizeFlag","color::theme::Theme","flags::Flags"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::de::MapAccess","std::marker::Sized"],"color::theme::Permission":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["serde_yaml::de::MapAccess<'a, 'r>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>"],"color::theme::Permission":["flags::ignore_globs::IgnoreGlobs","flags::total_size::TotalSize","flags::recursion::Recursion","flags::dereference::Dereference","flags::icons::Icons","flags::indicators::Indicators","flags::sorting::SortOrder","flags::sorting::SortColumn","color::theme::Dir","flags::sorting::DirGrouping","color::theme::FileType","flags::color::ColorOption","flags::display::Display","color::theme::Links","flags::blocks::Blocks","flags::color::ThemeOption","color::theme::File","color::theme::INode","color::theme::Symlink","flags::icons::IconSeparator","flags::icons::IconTheme","flags::date::DateFlag","flags::size::SizeFlag","color::theme::Permission","flags::symlinks::NoSymlink","flags::Flags","flags::symlink_arrow::SymlinkArrow","flags::hyperlink::HyperlinkOption","flags::layout::Layout","color::theme::Date","config_file::Config","flags::permission::PermissionFlag","flags::color::Color","color::theme::Size","flags::icons::IconOption","flags::sorting::Sorting","color::theme::Theme"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Permission>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/color/theme.rs <color::theme::Permission as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Permission
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::theme::Permission
+p0.eq(p1);
+<color::theme::Permission as std::cmp::PartialEq>::eq(p0, p1);
+crate::<color::theme::Permission as std::cmp::PartialEq>::eq(p0, p1);
+<color::theme::Permission>::eq(p0, p1);
-----------------
src/color/theme.rs <color::theme::FileType as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::FileType
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<color::theme::FileType as std::fmt::Debug>::fmt(p0, p1);
+crate::<color::theme::FileType as std::fmt::Debug>::fmt(p0, p1);
+<color::theme::FileType>::fmt(p0, p1);
-----------------
src/color/theme.rs color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"],"color::theme::FileType":["std::default::Default"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize":{"__D":["config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","serde_yaml::Number","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::SeqDeserializer<I, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::U32Deserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::U128Deserializer<E>","serde_yaml::Value","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>"],"color::theme::FileType":["flags::sorting::SortOrder","color::theme::Links","color::theme::Size","flags::ignore_globs::IgnoreGlobs","flags::layout::Layout","flags::indicators::Indicators","color::theme::Theme","flags::symlinks::NoSymlink","flags::display::Display","flags::sorting::SortColumn","flags::color::Color","color::theme::Symlink","flags::icons::IconOption","color::theme::File","color::theme::Permission","config_file::Config","flags::Flags","flags::color::ThemeOption","flags::icons::Icons","color::theme::INode","flags::hyperlink::HyperlinkOption","flags::total_size::TotalSize","flags::sorting::DirGrouping","flags::icons::IconTheme","flags::blocks::Blocks","flags::symlink_arrow::SymlinkArrow","color::theme::Dir","flags::recursion::Recursion","flags::sorting::Sorting","flags::permission::PermissionFlag","flags::dereference::Dereference","flags::color::ColorOption","flags::date::DateFlag","color::theme::FileType","color::theme::Date","flags::size::SizeFlag","flags::icons::IconSeparator"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize(p0);
+crate::color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize(p0);
+<color::theme::FileType>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","serde_yaml::Value","serde_yaml::Deserializer<'de>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_yaml::Number","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Field>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::FileType":["std::default::Default"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::FileType":["flags::total_size::TotalSize","flags::symlink_arrow::SymlinkArrow","flags::sorting::Sorting","color::theme::INode","flags::icons::IconSeparator","flags::dereference::Dereference","flags::sorting::SortColumn","flags::layout::Layout","flags::size::SizeFlag","color::theme::Dir","flags::color::ColorOption","color::theme::Size","flags::color::Color","flags::blocks::Blocks","flags::symlinks::NoSymlink","flags::recursion::Recursion","flags::display::Display","flags::date::DateFlag","flags::permission::PermissionFlag","flags::sorting::SortOrder","config_file::Config","flags::icons::IconOption","flags::indicators::Indicators","color::theme::Links","color::theme::FileType","flags::ignore_globs::IgnoreGlobs","flags::icons::Icons","flags::icons::IconTheme","color::theme::Symlink","flags::Flags","color::theme::Permission","flags::sorting::DirGrouping","color::theme::Date","color::theme::File","color::theme::Theme","flags::color::ThemeOption","flags::hyperlink::HyperlinkOption"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","config_file::_::_serde::de::SeqAccess"],"color::theme::FileType":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["serde_yaml::de::SeqAccess<'a, 'r>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::PairVisitor<A, B, E>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>"],"color::theme::FileType":["config_file::Config","flags::sorting::SortColumn","color::theme::Permission","flags::icons::IconTheme","flags::ignore_globs::IgnoreGlobs","color::theme::Date","color::theme::Size","flags::size::SizeFlag","color::theme::File","flags::date::DateFlag","flags::display::Display","flags::icons::IconSeparator","color::theme::Links","color::theme::Dir","flags::sorting::DirGrouping","flags::layout::Layout","color::theme::Theme","flags::blocks::Blocks","flags::permission::PermissionFlag","flags::Flags","flags::hyperlink::HyperlinkOption","color::theme::FileType","flags::symlinks::NoSymlink","flags::sorting::Sorting","flags::icons::IconOption","flags::color::Color","color::theme::INode","flags::sorting::SortOrder","flags::symlink_arrow::SymlinkArrow","flags::color::ColorOption","flags::total_size::TotalSize","flags::dereference::Dereference","color::theme::Symlink","flags::icons::Icons","flags::color::ThemeOption","flags::indicators::Indicators","flags::recursion::Recursion"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","config_file::_::_serde::de::MapAccess"],"color::theme::FileType":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["serde_yaml::de::MapAccess<'a, 'r>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>"],"color::theme::FileType":["flags::color::Color","flags::color::ThemeOption","flags::icons::IconSeparator","color::theme::Links","color::theme::FileType","flags::size::SizeFlag","flags::display::Display","flags::color::ColorOption","flags::symlinks::NoSymlink","flags::icons::Icons","flags::date::DateFlag","flags::sorting::DirGrouping","flags::permission::PermissionFlag","color::theme::Size","flags::sorting::Sorting","flags::recursion::Recursion","color::theme::INode","color::theme::Permission","flags::indicators::Indicators","flags::sorting::SortOrder","color::theme::Dir","color::theme::Date","flags::ignore_globs::IgnoreGlobs","flags::layout::Layout","flags::icons::IconOption","flags::dereference::Dereference","flags::Flags","flags::total_size::TotalSize","flags::sorting::SortColumn","flags::symlink_arrow::SymlinkArrow","flags::blocks::Blocks","config_file::Config","flags::icons::IconTheme","flags::hyperlink::HyperlinkOption","color::theme::Symlink","color::theme::Theme","color::theme::File"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::FileType>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/color/theme.rs <color::theme::FileType as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::FileType
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::theme::FileType
+p0.eq(p1);
+<color::theme::FileType as std::cmp::PartialEq>::eq(p0, p1);
+crate::<color::theme::FileType as std::cmp::PartialEq>::eq(p0, p1);
+<color::theme::FileType>::eq(p0, p1);
-----------------
src/color/theme.rs <color::theme::File as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::File
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<color::theme::File as std::fmt::Debug>::fmt(p0, p1);
+crate::<color::theme::File as std::fmt::Debug>::fmt(p0, p1);
+<color::theme::File>::fmt(p0, p1);
-----------------
src/color/theme.rs color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"],"color::theme::File":["std::default::Default"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize":{"__D":["serde_yaml::Value","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","&'a serde_yaml::Number","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","serde_yaml::Number","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::I8Deserializer<E>"],"color::theme::File":["flags::icons::IconSeparator","flags::sorting::Sorting","flags::total_size::TotalSize","flags::size::SizeFlag","flags::ignore_globs::IgnoreGlobs","flags::symlink_arrow::SymlinkArrow","color::theme::Date","flags::blocks::Blocks","flags::dereference::Dereference","flags::color::ThemeOption","color::theme::FileType","color::theme::Dir","flags::recursion::Recursion","flags::indicators::Indicators","color::theme::Links","flags::date::DateFlag","color::theme::Symlink","flags::layout::Layout","flags::sorting::DirGrouping","flags::permission::PermissionFlag","color::theme::Size","flags::icons::IconOption","flags::color::Color","color::theme::Permission","config_file::Config","flags::color::ColorOption","flags::sorting::SortOrder","flags::Flags","flags::display::Display","color::theme::INode","color::theme::File","color::theme::Theme","flags::icons::IconTheme","flags::sorting::SortColumn","flags::hyperlink::HyperlinkOption","flags::icons::Icons","flags::symlinks::NoSymlink"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize(p0);
+crate::color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize(p0);
+<color::theme::File>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U8Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","serde_yaml::Value","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I8Deserializer<E>","serde_yaml::Number","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","&'a serde_yaml::Number"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Field>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::File":["std::default::Default"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::File":["flags::dereference::Dereference","color::theme::FileType","flags::icons::IconSeparator","flags::icons::IconTheme","flags::icons::Icons","color::theme::Permission","color::theme::Dir","flags::total_size::TotalSize","flags::indicators::Indicators","flags::symlinks::NoSymlink","flags::display::Display","flags::sorting::Sorting","flags::ignore_globs::IgnoreGlobs","flags::color::ThemeOption","color::theme::Date","flags::color::Color","flags::permission::PermissionFlag","color::theme::Symlink","color::theme::File","config_file::Config","color::theme::INode","flags::sorting::SortColumn","flags::size::SizeFlag","flags::icons::IconOption","flags::symlink_arrow::SymlinkArrow","flags::date::DateFlag","flags::recursion::Recursion","color::theme::Size","flags::sorting::SortOrder","flags::color::ColorOption","flags::sorting::DirGrouping","color::theme::Theme","flags::blocks::Blocks","flags::layout::Layout","flags::hyperlink::HyperlinkOption","flags::Flags","color::theme::Links"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::SeqAccess","std::marker::Sized"],"color::theme::File":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["serde_yaml::de::SeqAccess<'a, 'r>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","config_file::_::_serde::de::value::PairVisitor<A, B, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>"],"color::theme::File":["flags::hyperlink::HyperlinkOption","flags::display::Display","flags::blocks::Blocks","color::theme::Dir","flags::symlink_arrow::SymlinkArrow","color::theme::Permission","color::theme::Symlink","flags::recursion::Recursion","color::theme::File","flags::date::DateFlag","flags::Flags","flags::color::Color","flags::icons::Icons","config_file::Config","flags::indicators::Indicators","flags::color::ColorOption","flags::sorting::Sorting","flags::total_size::TotalSize","color::theme::Theme","flags::layout::Layout","color::theme::FileType","flags::symlinks::NoSymlink","color::theme::Size","flags::icons::IconSeparator","color::theme::Date","flags::ignore_globs::IgnoreGlobs","flags::icons::IconOption","flags::sorting::DirGrouping","flags::sorting::SortOrder","flags::color::ThemeOption","flags::size::SizeFlag","flags::dereference::Dereference","color::theme::INode","flags::sorting::SortColumn","color::theme::Links","flags::icons::IconTheme","flags::permission::PermissionFlag"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","config_file::_::_serde::de::MapAccess"],"color::theme::File":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_yaml::value::de::MapDeserializer","serde_yaml::de::MapAccess<'a, 'r>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>"],"color::theme::File":["flags::sorting::Sorting","color::theme::Size","flags::ignore_globs::IgnoreGlobs","color::theme::INode","flags::color::Color","color::theme::Permission","flags::blocks::Blocks","flags::sorting::DirGrouping","flags::size::SizeFlag","color::theme::FileType","flags::date::DateFlag","color::theme::Dir","flags::permission::PermissionFlag","color::theme::Theme","flags::indicators::Indicators","flags::color::ColorOption","flags::icons::IconTheme","flags::color::ThemeOption","color::theme::Date","flags::icons::IconSeparator","flags::recursion::Recursion","flags::icons::Icons","color::theme::File","flags::layout::Layout","color::theme::Symlink","flags::icons::IconOption","flags::sorting::SortOrder","flags::sorting::SortColumn","color::theme::Links","flags::Flags","flags::total_size::TotalSize","flags::dereference::Dereference","flags::symlinks::NoSymlink","config_file::Config","flags::hyperlink::HyperlinkOption","flags::symlink_arrow::SymlinkArrow","flags::display::Display"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::File>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/color/theme.rs <color::theme::File as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::File
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::theme::File
+p0.eq(p1);
+<color::theme::File as std::cmp::PartialEq>::eq(p0, p1);
+crate::<color::theme::File as std::cmp::PartialEq>::eq(p0, p1);
+<color::theme::File>::eq(p0, p1);
-----------------
src/color/theme.rs <color::theme::Dir as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Dir
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<color::theme::Dir as std::fmt::Debug>::fmt(p0, p1);
+crate::<color::theme::Dir as std::fmt::Debug>::fmt(p0, p1);
+<color::theme::Dir>::fmt(p0, p1);
-----------------
src/color/theme.rs color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"],"color::theme::Dir":["std::default::Default"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize":{"__D":["<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","serde_yaml::value::de::SeqDeserializer","serde_yaml::Number","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::U8Deserializer<E>","serde_yaml::Value","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>"],"color::theme::Dir":["color::theme::Permission","flags::display::Display","color::theme::Links","flags::size::SizeFlag","flags::symlinks::NoSymlink","flags::icons::Icons","flags::layout::Layout","flags::icons::IconOption","flags::sorting::Sorting","color::theme::Dir","flags::Flags","flags::color::ColorOption","color::theme::Theme","color::theme::Size","config_file::Config","flags::total_size::TotalSize","flags::permission::PermissionFlag","color::theme::FileType","flags::sorting::SortColumn","flags::ignore_globs::IgnoreGlobs","flags::icons::IconSeparator","flags::indicators::Indicators","color::theme::Date","color::theme::Symlink","flags::recursion::Recursion","flags::color::ThemeOption","flags::icons::IconTheme","flags::dereference::Dereference","flags::sorting::DirGrouping","color::theme::INode","flags::date::DateFlag","flags::color::Color","flags::sorting::SortOrder","flags::hyperlink::HyperlinkOption","flags::symlink_arrow::SymlinkArrow","flags::blocks::Blocks","color::theme::File"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize(p0);
+crate::color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize(p0);
+<color::theme::Dir>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","serde_yaml::Value","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_yaml::Number","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","&'a serde_yaml::Number","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Field>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Dir":["std::default::Default"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Dir":["flags::icons::IconOption","color::theme::Dir","flags::recursion::Recursion","flags::sorting::Sorting","color::theme::Links","flags::symlink_arrow::SymlinkArrow","flags::symlinks::NoSymlink","flags::date::DateFlag","flags::display::Display","color::theme::Size","flags::layout::Layout","flags::icons::Icons","config_file::Config","color::theme::FileType","color::theme::File","color::theme::Date","flags::Flags","flags::dereference::Dereference","color::theme::INode","flags::color::ColorOption","flags::ignore_globs::IgnoreGlobs","flags::icons::IconTheme","flags::blocks::Blocks","flags::indicators::Indicators","flags::hyperlink::HyperlinkOption","flags::color::ThemeOption","flags::sorting::SortColumn","flags::sorting::DirGrouping","flags::color::Color","flags::sorting::SortOrder","flags::size::SizeFlag","color::theme::Permission","color::theme::Symlink","color::theme::Theme","flags::total_size::TotalSize","flags::permission::PermissionFlag","flags::icons::IconSeparator"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::SeqAccess","std::marker::Sized"],"color::theme::Dir":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["serde_yaml::value::de::SeqDeserializer","serde_yaml::de::SeqAccess<'a, 'r>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","config_file::_::_serde::de::value::PairVisitor<A, B, E>"],"color::theme::Dir":["flags::color::Color","flags::sorting::DirGrouping","flags::hyperlink::HyperlinkOption","config_file::Config","flags::blocks::Blocks","flags::symlinks::NoSymlink","flags::color::ColorOption","flags::total_size::TotalSize","flags::size::SizeFlag","flags::dereference::Dereference","color::theme::Symlink","color::theme::Permission","color::theme::Links","color::theme::INode","flags::sorting::Sorting","flags::permission::PermissionFlag","color::theme::File","flags::color::ThemeOption","flags::icons::IconSeparator","flags::icons::Icons","flags::date::DateFlag","flags::layout::Layout","flags::sorting::SortOrder","flags::recursion::Recursion","color::theme::Dir","flags::indicators::Indicators","color::theme::FileType","flags::display::Display","color::theme::Size","color::theme::Date","flags::ignore_globs::IgnoreGlobs","flags::Flags","flags::symlink_arrow::SymlinkArrow","flags::icons::IconOption","flags::icons::IconTheme","color::theme::Theme","flags::sorting::SortColumn"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::de::MapAccess","std::marker::Sized"],"color::theme::Dir":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","serde_yaml::de::MapAccess<'a, 'r>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>"],"color::theme::Dir":["flags::size::SizeFlag","color::theme::Symlink","flags::date::DateFlag","flags::permission::PermissionFlag","flags::icons::IconOption","flags::icons::IconSeparator","flags::display::Display","flags::sorting::Sorting","flags::Flags","flags::indicators::Indicators","color::theme::Permission","flags::color::ThemeOption","flags::sorting::SortColumn","flags::sorting::DirGrouping","flags::color::Color","flags::recursion::Recursion","flags::blocks::Blocks","color::theme::Dir","color::theme::Theme","flags::hyperlink::HyperlinkOption","flags::sorting::SortOrder","color::theme::INode","color::theme::FileType","flags::ignore_globs::IgnoreGlobs","flags::layout::Layout","flags::color::ColorOption","config_file::Config","flags::dereference::Dereference","flags::symlinks::NoSymlink","flags::icons::Icons","flags::icons::IconTheme","color::theme::File","flags::total_size::TotalSize","color::theme::Date","color::theme::Links","flags::symlink_arrow::SymlinkArrow","color::theme::Size"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Dir>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/color/theme.rs <color::theme::Dir as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Dir
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::theme::Dir
+p0.eq(p1);
+<color::theme::Dir as std::cmp::PartialEq>::eq(p0, p1);
+crate::<color::theme::Dir as std::cmp::PartialEq>::eq(p0, p1);
+<color::theme::Dir>::eq(p0, p1);
-----------------
src/color/theme.rs <color::theme::Symlink as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Symlink
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<color::theme::Symlink as std::fmt::Debug>::fmt(p0, p1);
+crate::<color::theme::Symlink as std::fmt::Debug>::fmt(p0, p1);
+<color::theme::Symlink>::fmt(p0, p1);
-----------------
src/color/theme.rs color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"],"color::theme::Symlink":["std::default::Default"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize":{"__D":["&'a serde_yaml::Number","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","serde_yaml::Number","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::F64Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_yaml::Value","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::CharDeserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I32Deserializer<E>"],"color::theme::Symlink":["flags::ignore_globs::IgnoreGlobs","flags::icons::IconSeparator","color::theme::FileType","flags::color::Color","flags::date::DateFlag","flags::display::Display","flags::indicators::Indicators","color::theme::Size","color::theme::File","color::theme::INode","color::theme::Links","flags::icons::IconOption","flags::color::ThemeOption","flags::total_size::TotalSize","color::theme::Dir","flags::symlinks::NoSymlink","flags::recursion::Recursion","flags::layout::Layout","flags::hyperlink::HyperlinkOption","flags::sorting::Sorting","flags::Flags","flags::permission::PermissionFlag","color::theme::Theme","flags::sorting::SortColumn","flags::sorting::DirGrouping","color::theme::Symlink","flags::color::ColorOption","flags::sorting::SortOrder","flags::icons::Icons","flags::symlink_arrow::SymlinkArrow","config_file::Config","color::theme::Permission","flags::size::SizeFlag","flags::dereference::Dereference","flags::blocks::Blocks","color::theme::Date","flags::icons::IconTheme"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize(p0);
+crate::color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize(p0);
+<color::theme::Symlink>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::UnitDeserializer<E>","serde_yaml::Value","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U32Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Field>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Symlink":["std::default::Default"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Symlink":["flags::symlinks::NoSymlink","flags::size::SizeFlag","flags::date::DateFlag","flags::icons::Icons","color::theme::Permission","flags::sorting::Sorting","config_file::Config","flags::icons::IconSeparator","flags::indicators::Indicators","flags::color::Color","flags::dereference::Dereference","flags::layout::Layout","flags::ignore_globs::IgnoreGlobs","flags::color::ThemeOption","flags::display::Display","color::theme::Date","flags::icons::IconTheme","flags::sorting::SortOrder","flags::total_size::TotalSize","color::theme::Links","color::theme::Dir","color::theme::Size","flags::blocks::Blocks","flags::hyperlink::HyperlinkOption","color::theme::FileType","flags::icons::IconOption","flags::sorting::SortColumn","flags::recursion::Recursion","color::theme::INode","color::theme::Symlink","color::theme::Theme","flags::sorting::DirGrouping","flags::Flags","flags::color::ColorOption","flags::symlink_arrow::SymlinkArrow","color::theme::File","flags::permission::PermissionFlag"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","config_file::_::_serde::de::SeqAccess"],"color::theme::Symlink":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::PairVisitor<A, B, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_yaml::de::SeqAccess<'a, 'r>"],"color::theme::Symlink":["flags::sorting::DirGrouping","color::theme::INode","flags::size::SizeFlag","flags::layout::Layout","flags::color::ThemeOption","color::theme::Symlink","color::theme::Theme","flags::dereference::Dereference","flags::symlinks::NoSymlink","config_file::Config","flags::Flags","flags::icons::IconTheme","flags::ignore_globs::IgnoreGlobs","color::theme::Links","flags::sorting::Sorting","flags::date::DateFlag","color::theme::Permission","flags::total_size::TotalSize","flags::icons::Icons","flags::display::Display","color::theme::Size","flags::icons::IconOption","flags::indicators::Indicators","flags::permission::PermissionFlag","color::theme::File","flags::sorting::SortColumn","flags::color::ColorOption","flags::symlink_arrow::SymlinkArrow","flags::recursion::Recursion","flags::hyperlink::HyperlinkOption","flags::sorting::SortOrder","color::theme::Date","flags::blocks::Blocks","color::theme::Dir","flags::color::Color","flags::icons::IconSeparator","color::theme::FileType"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","config_file::_::_serde::de::MapAccess"],"color::theme::Symlink":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde_yaml::de::MapAccess<'a, 'r>"],"color::theme::Symlink":["flags::size::SizeFlag","flags::Flags","flags::icons::IconSeparator","flags::color::ThemeOption","color::theme::Size","color::theme::Symlink","flags::blocks::Blocks","flags::symlink_arrow::SymlinkArrow","flags::indicators::Indicators","flags::sorting::SortColumn","flags::recursion::Recursion","flags::icons::IconOption","flags::color::ColorOption","color::theme::Dir","flags::icons::Icons","flags::total_size::TotalSize","config_file::Config","color::theme::INode","flags::icons::IconTheme","flags::ignore_globs::IgnoreGlobs","color::theme::Permission","flags::permission::PermissionFlag","color::theme::Theme","flags::hyperlink::HyperlinkOption","color::theme::Links","flags::sorting::DirGrouping","flags::layout::Layout","color::theme::File","color::theme::Date","flags::display::Display","flags::sorting::SortOrder","color::theme::FileType","flags::date::DateFlag","flags::color::Color","flags::symlinks::NoSymlink","flags::dereference::Dereference","flags::sorting::Sorting"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Symlink>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/color/theme.rs <color::theme::Symlink as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Symlink
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::theme::Symlink
+p0.eq(p1);
+<color::theme::Symlink as std::cmp::PartialEq>::eq(p0, p1);
+crate::<color::theme::Symlink as std::cmp::PartialEq>::eq(p0, p1);
+<color::theme::Symlink>::eq(p0, p1);
-----------------
src/color/theme.rs <color::theme::Date as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Date
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<color::theme::Date as std::fmt::Debug>::fmt(p0, p1);
+crate::<color::theme::Date as std::fmt::Debug>::fmt(p0, p1);
+<color::theme::Date>::fmt(p0, p1);
-----------------
src/color/theme.rs color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"],"color::theme::Date":["std::default::Default"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize":{"__D":["config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","serde_yaml::Value","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::I16Deserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","serde_yaml::value::de::SeqDeserializer"],"color::theme::Date":["flags::recursion::Recursion","flags::color::ColorOption","color::theme::Dir","flags::dereference::Dereference","color::theme::Permission","color::theme::Links","flags::display::Display","flags::hyperlink::HyperlinkOption","flags::sorting::SortColumn","flags::indicators::Indicators","color::theme::Size","config_file::Config","flags::icons::IconSeparator","color::theme::INode","flags::Flags","flags::icons::IconTheme","flags::color::Color","flags::icons::IconOption","flags::permission::PermissionFlag","color::theme::Theme","flags::sorting::Sorting","color::theme::Date","flags::ignore_globs::IgnoreGlobs","color::theme::File","flags::symlink_arrow::SymlinkArrow","flags::sorting::DirGrouping","flags::date::DateFlag","color::theme::Symlink","flags::sorting::SortOrder","flags::total_size::TotalSize","flags::icons::Icons","color::theme::FileType","flags::symlinks::NoSymlink","flags::blocks::Blocks","flags::color::ThemeOption","flags::layout::Layout","flags::size::SizeFlag"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize(p0);
+crate::color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize(p0);
+<color::theme::Date>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","serde_yaml::Value","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","&'a serde_yaml::Number","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","serde_yaml::Number","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I128Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Field>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Date":["std::default::Default"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Date":["flags::blocks::Blocks","color::theme::Date","flags::ignore_globs::IgnoreGlobs","flags::Flags","flags::color::ColorOption","color::theme::Size","flags::sorting::Sorting","flags::color::Color","flags::indicators::Indicators","color::theme::FileType","flags::icons::IconSeparator","flags::display::Display","flags::sorting::DirGrouping","flags::total_size::TotalSize","flags::permission::PermissionFlag","color::theme::File","config_file::Config","color::theme::Permission","flags::color::ThemeOption","flags::layout::Layout","flags::date::DateFlag","flags::sorting::SortOrder","flags::icons::IconTheme","color::theme::Symlink","flags::icons::IconOption","color::theme::Dir","color::theme::INode","flags::icons::Icons","flags::dereference::Dereference","flags::hyperlink::HyperlinkOption","color::theme::Theme","flags::sorting::SortColumn","color::theme::Links","flags::symlink_arrow::SymlinkArrow","flags::symlinks::NoSymlink","flags::size::SizeFlag","flags::recursion::Recursion"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","config_file::_::_serde::de::SeqAccess"],"color::theme::Date":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::PairVisitor<A, B, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","serde_yaml::de::SeqAccess<'a, 'r>","config_file::_::_serde::de::value::SeqDeserializer<I, E>"],"color::theme::Date":["flags::blocks::Blocks","color::theme::Permission","flags::symlinks::NoSymlink","flags::dereference::Dereference","flags::Flags","color::theme::FileType","flags::color::Color","color::theme::Date","flags::permission::PermissionFlag","flags::symlink_arrow::SymlinkArrow","flags::layout::Layout","color::theme::Links","flags::color::ColorOption","flags::sorting::Sorting","flags::date::DateFlag","flags::sorting::SortOrder","flags::sorting::DirGrouping","flags::recursion::Recursion","flags::total_size::TotalSize","flags::icons::IconTheme","flags::sorting::SortColumn","flags::icons::IconSeparator","flags::hyperlink::HyperlinkOption","flags::size::SizeFlag","flags::icons::IconOption","flags::indicators::Indicators","flags::display::Display","config_file::Config","color::theme::Symlink","color::theme::Theme","color::theme::Dir","flags::icons::Icons","color::theme::Size","color::theme::File","color::theme::INode","flags::color::ThemeOption","flags::ignore_globs::IgnoreGlobs"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::de::MapAccess","std::marker::Sized"],"color::theme::Date":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","serde_yaml::de::MapAccess<'a, 'r>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>"],"color::theme::Date":["flags::hyperlink::HyperlinkOption","flags::sorting::Sorting","flags::indicators::Indicators","color::theme::INode","color::theme::Symlink","flags::symlink_arrow::SymlinkArrow","flags::icons::Icons","flags::symlinks::NoSymlink","flags::layout::Layout","color::theme::Theme","flags::permission::PermissionFlag","flags::size::SizeFlag","flags::ignore_globs::IgnoreGlobs","flags::icons::IconOption","color::theme::Size","flags::recursion::Recursion","color::theme::Permission","flags::color::ThemeOption","flags::color::Color","flags::display::Display","color::theme::File","flags::date::DateFlag","color::theme::Links","flags::icons::IconTheme","color::theme::Dir","flags::Flags","flags::color::ColorOption","flags::blocks::Blocks","flags::sorting::DirGrouping","color::theme::Date","flags::icons::IconSeparator","flags::total_size::TotalSize","flags::dereference::Dereference","flags::sorting::SortOrder","flags::sorting::SortColumn","config_file::Config","color::theme::FileType"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Date>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/color/theme.rs <color::theme::Date as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Date
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::theme::Date
+p0.eq(p1);
+<color::theme::Date as std::cmp::PartialEq>::eq(p0, p1);
+crate::<color::theme::Date as std::cmp::PartialEq>::eq(p0, p1);
+<color::theme::Date>::eq(p0, p1);
-----------------
src/color/theme.rs <color::theme::Size as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Size
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<color::theme::Size as std::fmt::Debug>::fmt(p0, p1);
+crate::<color::theme::Size as std::fmt::Debug>::fmt(p0, p1);
+<color::theme::Size>::fmt(p0, p1);
-----------------
src/color/theme.rs color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"],"color::theme::Size":["std::default::Default"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize":{"__D":["config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","serde_yaml::Value","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","serde_yaml::Number","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","&'a serde_yaml::Number","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>"],"color::theme::Size":["flags::Flags","flags::color::ColorOption","flags::icons::IconTheme","flags::icons::Icons","flags::sorting::SortColumn","color::theme::Links","flags::date::DateFlag","flags::color::Color","flags::layout::Layout","color::theme::Dir","color::theme::Date","flags::size::SizeFlag","color::theme::File","color::theme::Symlink","flags::indicators::Indicators","config_file::Config","color::theme::Permission","flags::sorting::DirGrouping","flags::color::ThemeOption","flags::total_size::TotalSize","flags::sorting::SortOrder","flags::permission::PermissionFlag","color::theme::INode","flags::ignore_globs::IgnoreGlobs","flags::symlink_arrow::SymlinkArrow","flags::blocks::Blocks","flags::dereference::Dereference","flags::sorting::Sorting","flags::icons::IconOption","color::theme::FileType","flags::display::Display","flags::symlinks::NoSymlink","flags::recursion::Recursion","color::theme::Theme","flags::hyperlink::HyperlinkOption","flags::icons::IconSeparator","color::theme::Size"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize(p0);
+crate::color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize(p0);
+<color::theme::Size>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","serde_yaml::Value","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Field>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Size":["std::default::Default"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Size":["flags::icons::IconTheme","flags::layout::Layout","color::theme::FileType","flags::date::DateFlag","flags::recursion::Recursion","flags::display::Display","flags::ignore_globs::IgnoreGlobs","flags::permission::PermissionFlag","color::theme::Links","color::theme::INode","flags::color::Color","flags::icons::IconSeparator","color::theme::File","flags::color::ColorOption","color::theme::Theme","flags::dereference::Dereference","config_file::Config","color::theme::Date","flags::size::SizeFlag","flags::hyperlink::HyperlinkOption","flags::blocks::Blocks","flags::total_size::TotalSize","flags::sorting::SortColumn","color::theme::Size","flags::Flags","color::theme::Permission","flags::sorting::SortOrder","flags::color::ThemeOption","flags::icons::IconOption","flags::sorting::Sorting","flags::indicators::Indicators","color::theme::Symlink","flags::sorting::DirGrouping","flags::symlink_arrow::SymlinkArrow","flags::symlinks::NoSymlink","flags::icons::Icons","color::theme::Dir"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::SeqAccess","std::marker::Sized"],"color::theme::Size":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::value::PairVisitor<A, B, E>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","serde_yaml::value::de::SeqDeserializer","serde_yaml::de::SeqAccess<'a, 'r>"],"color::theme::Size":["flags::icons::Icons","color::theme::Date","color::theme::FileType","flags::sorting::Sorting","flags::indicators::Indicators","flags::display::Display","flags::date::DateFlag","flags::sorting::SortOrder","flags::ignore_globs::IgnoreGlobs","flags::icons::IconSeparator","flags::Flags","flags::sorting::SortColumn","flags::dereference::Dereference","color::theme::Size","flags::blocks::Blocks","flags::color::ColorOption","color::theme::Dir","color::theme::Theme","flags::recursion::Recursion","flags::layout::Layout","flags::total_size::TotalSize","color::theme::INode","color::theme::File","flags::color::ThemeOption","flags::size::SizeFlag","flags::hyperlink::HyperlinkOption","flags::symlinks::NoSymlink","flags::symlink_arrow::SymlinkArrow","flags::icons::IconOption","flags::permission::PermissionFlag","config_file::Config","flags::color::Color","color::theme::Symlink","color::theme::Permission","flags::sorting::DirGrouping","flags::icons::IconTheme","color::theme::Links"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::de::MapAccess","std::marker::Sized"],"color::theme::Size":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","serde_yaml::de::MapAccess<'a, 'r>","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>"],"color::theme::Size":["flags::display::Display","flags::icons::IconOption","flags::date::DateFlag","color::theme::Size","flags::icons::IconSeparator","flags::permission::PermissionFlag","flags::symlink_arrow::SymlinkArrow","flags::dereference::Dereference","flags::blocks::Blocks","color::theme::INode","config_file::Config","color::theme::FileType","color::theme::Links","flags::Flags","flags::icons::Icons","flags::sorting::SortColumn","flags::color::ColorOption","color::theme::Theme","flags::recursion::Recursion","color::theme::File","flags::layout::Layout","flags::indicators::Indicators","flags::sorting::DirGrouping","flags::size::SizeFlag","color::theme::Symlink","color::theme::Date","flags::icons::IconTheme","flags::sorting::SortOrder","flags::color::Color","color::theme::Dir","flags::total_size::TotalSize","flags::ignore_globs::IgnoreGlobs","flags::sorting::Sorting","flags::color::ThemeOption","color::theme::Permission","flags::hyperlink::HyperlinkOption","flags::symlinks::NoSymlink"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Size>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/color/theme.rs <color::theme::Size as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Size
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::theme::Size
+p0.eq(p1);
+<color::theme::Size as std::cmp::PartialEq>::eq(p0, p1);
+crate::<color::theme::Size as std::cmp::PartialEq>::eq(p0, p1);
+<color::theme::Size>::eq(p0, p1);
-----------------
src/color/theme.rs <color::theme::INode as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::INode
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<color::theme::INode as std::fmt::Debug>::fmt(p0, p1);
+crate::<color::theme::INode as std::fmt::Debug>::fmt(p0, p1);
+<color::theme::INode>::fmt(p0, p1);
-----------------
src/color/theme.rs color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"],"color::theme::INode":["std::default::Default"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize":{"__D":["config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::U128Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::Number","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::I8Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::I128Deserializer<E>","serde_yaml::Value","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>"],"color::theme::INode":["flags::blocks::Blocks","flags::layout::Layout","flags::indicators::Indicators","flags::hyperlink::HyperlinkOption","color::theme::INode","flags::date::DateFlag","flags::permission::PermissionFlag","color::theme::Date","flags::size::SizeFlag","flags::color::Color","flags::total_size::TotalSize","color::theme::Size","flags::ignore_globs::IgnoreGlobs","flags::symlinks::NoSymlink","flags::color::ColorOption","color::theme::Theme","flags::sorting::SortColumn","color::theme::Dir","color::theme::File","flags::color::ThemeOption","flags::sorting::SortOrder","flags::dereference::Dereference","flags::icons::IconTheme","config_file::Config","color::theme::Permission","color::theme::Links","flags::recursion::Recursion","color::theme::Symlink","flags::icons::Icons","flags::display::Display","color::theme::FileType","flags::symlink_arrow::SymlinkArrow","flags::sorting::Sorting","flags::icons::IconOption","flags::sorting::DirGrouping","flags::Flags","flags::icons::IconSeparator"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize(p0);
+crate::color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize(p0);
+<color::theme::INode>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::IsizeDeserializer<E>","serde_yaml::Deserializer<'de>","serde_yaml::Number","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::U8Deserializer<E>","serde_yaml::Value","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Field>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::INode":["std::default::Default"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::INode":["color::theme::Dir","flags::sorting::SortOrder","flags::permission::PermissionFlag","flags::date::DateFlag","flags::layout::Layout","flags::blocks::Blocks","flags::ignore_globs::IgnoreGlobs","flags::indicators::Indicators","color::theme::Symlink","color::theme::Size","flags::icons::IconTheme","flags::color::ThemeOption","flags::sorting::Sorting","flags::total_size::TotalSize","flags::Flags","flags::display::Display","config_file::Config","flags::color::Color","flags::symlinks::NoSymlink","flags::color::ColorOption","flags::symlink_arrow::SymlinkArrow","flags::hyperlink::HyperlinkOption","color::theme::Permission","flags::dereference::Dereference","flags::sorting::SortColumn","color::theme::INode","flags::icons::Icons","flags::icons::IconOption","color::theme::Links","flags::icons::IconSeparator","color::theme::Theme","color::theme::FileType","color::theme::File","flags::recursion::Recursion","flags::sorting::DirGrouping","color::theme::Date","flags::size::SizeFlag"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","config_file::_::_serde::de::SeqAccess"],"color::theme::INode":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_yaml::de::SeqAccess<'a, 'r>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::PairVisitor<A, B, E>"],"color::theme::INode":["color::theme::Dir","config_file::Config","flags::display::Display","flags::color::ThemeOption","flags::dereference::Dereference","flags::icons::Icons","flags::permission::PermissionFlag","color::theme::Links","flags::icons::IconSeparator","flags::sorting::DirGrouping","color::theme::Theme","flags::sorting::SortColumn","color::theme::Permission","flags::color::ColorOption","flags::symlink_arrow::SymlinkArrow","flags::blocks::Blocks","flags::symlinks::NoSymlink","flags::ignore_globs::IgnoreGlobs","flags::Flags","color::theme::FileType","flags::indicators::Indicators","color::theme::Size","flags::layout::Layout","flags::sorting::SortOrder","flags::total_size::TotalSize","flags::color::Color","color::theme::File","flags::hyperlink::HyperlinkOption","flags::icons::IconTheme","flags::recursion::Recursion","flags::date::DateFlag","flags::size::SizeFlag","flags::icons::IconOption","flags::sorting::Sorting","color::theme::Date","color::theme::INode","color::theme::Symlink"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::de::MapAccess","std::marker::Sized"],"color::theme::INode":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde_yaml::de::MapAccess<'a, 'r>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>"],"color::theme::INode":["flags::dereference::Dereference","flags::icons::Icons","flags::icons::IconOption","flags::indicators::Indicators","color::theme::Date","flags::icons::IconSeparator","config_file::Config","flags::hyperlink::HyperlinkOption","flags::blocks::Blocks","color::theme::FileType","flags::recursion::Recursion","flags::symlink_arrow::SymlinkArrow","flags::permission::PermissionFlag","flags::color::Color","color::theme::File","flags::color::ColorOption","flags::sorting::SortColumn","flags::icons::IconTheme","color::theme::Size","flags::layout::Layout","flags::sorting::SortOrder","color::theme::Theme","color::theme::INode","flags::sorting::DirGrouping","flags::date::DateFlag","flags::sorting::Sorting","flags::ignore_globs::IgnoreGlobs","color::theme::Links","flags::Flags","color::theme::Symlink","flags::display::Display","flags::size::SizeFlag","flags::total_size::TotalSize","color::theme::Dir","flags::color::ThemeOption","flags::symlinks::NoSymlink","color::theme::Permission"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::INode>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/color/theme.rs <color::theme::INode as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::INode
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::theme::INode
+p0.eq(p1);
+<color::theme::INode as std::cmp::PartialEq>::eq(p0, p1);
+crate::<color::theme::INode as std::cmp::PartialEq>::eq(p0, p1);
+<color::theme::INode>::eq(p0, p1);
-----------------
src/color/theme.rs <color::theme::Links as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Links
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<color::theme::Links as std::fmt::Debug>::fmt(p0, p1);
+crate::<color::theme::Links as std::fmt::Debug>::fmt(p0, p1);
+<color::theme::Links>::fmt(p0, p1);
-----------------
src/color/theme.rs color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"],"color::theme::Links":["std::default::Default"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize":{"__D":["config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","serde_yaml::Deserializer<'de>","serde_yaml::Value","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","serde_yaml::Number","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>"],"color::theme::Links":["color::theme::Theme","color::theme::Symlink","flags::sorting::Sorting","flags::icons::Icons","flags::hyperlink::HyperlinkOption","flags::size::SizeFlag","flags::layout::Layout","flags::date::DateFlag","config_file::Config","color::theme::Date","flags::Flags","flags::symlinks::NoSymlink","flags::sorting::DirGrouping","flags::display::Display","color::theme::INode","color::theme::FileType","flags::icons::IconOption","flags::symlink_arrow::SymlinkArrow","color::theme::Size","color::theme::File","flags::icons::IconTheme","flags::permission::PermissionFlag","flags::sorting::SortOrder","flags::icons::IconSeparator","flags::color::ThemeOption","flags::recursion::Recursion","flags::total_size::TotalSize","flags::color::Color","flags::blocks::Blocks","flags::indicators::Indicators","color::theme::Links","flags::color::ColorOption","color::theme::Permission","flags::ignore_globs::IgnoreGlobs","flags::sorting::SortColumn","flags::dereference::Dereference","color::theme::Dir"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize(p0);
+crate::color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize(p0);
+<color::theme::Links>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","serde_yaml::Number","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","serde_yaml::Value","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::U128Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::I128Deserializer<E>","serde_yaml::value::de::SeqDeserializer"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Field>::deserialize(p0);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Links":["std::default::Default"]}}
candidates:{"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting":{"color::theme::Links":["flags::sorting::SortColumn","color::theme::Size","flags::total_size::TotalSize","config_file::Config","flags::display::Display","flags::Flags","color::theme::Dir","flags::date::DateFlag","flags::blocks::Blocks","flags::color::ThemeOption","flags::symlink_arrow::SymlinkArrow","flags::size::SizeFlag","flags::icons::IconTheme","flags::color::ColorOption","flags::color::Color","color::theme::INode","color::theme::Theme","flags::indicators::Indicators","flags::recursion::Recursion","color::theme::Links","color::theme::Symlink","flags::sorting::SortOrder","flags::permission::PermissionFlag","color::theme::Date","flags::layout::Layout","color::theme::FileType","flags::icons::IconOption","flags::hyperlink::HyperlinkOption","flags::dereference::Dereference","flags::ignore_globs::IgnoreGlobs","color::theme::Permission","flags::sorting::DirGrouping","flags::sorting::Sorting","flags::icons::Icons","color::theme::File","flags::symlinks::NoSymlink","flags::icons::IconSeparator"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","config_file::_::_serde::de::SeqAccess"],"color::theme::Links":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::PairVisitor<A, B, E>","serde_yaml::de::SeqAccess<'a, 'r>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::SeqDeserializer<I, E>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>"],"color::theme::Links":["flags::icons::IconTheme","flags::date::DateFlag","flags::Flags","color::theme::INode","flags::sorting::SortColumn","color::theme::Size","flags::icons::IconOption","flags::sorting::DirGrouping","flags::hyperlink::HyperlinkOption","flags::sorting::SortOrder","flags::indicators::Indicators","flags::sorting::Sorting","flags::color::Color","flags::color::ColorOption","flags::display::Display","flags::dereference::Dereference","flags::recursion::Recursion","flags::total_size::TotalSize","flags::permission::PermissionFlag","flags::color::ThemeOption","flags::size::SizeFlag","color::theme::File","flags::icons::IconSeparator","color::theme::Date","color::theme::Symlink","color::theme::FileType","color::theme::Permission","color::theme::Links","color::theme::Dir","flags::blocks::Blocks","flags::symlink_arrow::SymlinkArrow","flags::symlinks::NoSymlink","flags::layout::Layout","flags::icons::Icons","flags::ignore_globs::IgnoreGlobs","config_file::Config","color::theme::Theme"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/color/theme.rs <color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::de::MapAccess","std::marker::Sized"],"color::theme::Links":["std::default::Default"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","serde_yaml::de::MapAccess<'a, 'r>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>"],"color::theme::Links":["flags::symlink_arrow::SymlinkArrow","flags::total_size::TotalSize","color::theme::INode","flags::size::SizeFlag","flags::sorting::DirGrouping","color::theme::Symlink","flags::icons::IconTheme","flags::color::Color","flags::hyperlink::HyperlinkOption","flags::color::ColorOption","flags::ignore_globs::IgnoreGlobs","flags::sorting::SortOrder","color::theme::Size","flags::icons::IconSeparator","color::theme::Links","flags::layout::Layout","color::theme::FileType","flags::icons::Icons","flags::blocks::Blocks","config_file::Config","color::theme::File","flags::sorting::SortColumn","color::theme::Permission","flags::recursion::Recursion","flags::symlinks::NoSymlink","flags::dereference::Dereference","color::theme::Theme","color::theme::Dir","flags::icons::IconOption","flags::sorting::Sorting","flags::indicators::Indicators","flags::color::ThemeOption","flags::Flags","flags::permission::PermissionFlag","flags::display::Display","color::theme::Date","flags::date::DateFlag"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<color::theme::_::<impl config_file::_::_serde::Deserialize<'de> for color::theme::Links>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/color/theme.rs <color::theme::Links as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::theme::Links
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::theme::Links
+p0.eq(p1);
+<color::theme::Links as std::cmp::PartialEq>::eq(p0, p1);
+crate::<color::theme::Links as std::cmp::PartialEq>::eq(p0, p1);
+<color::theme::Links>::eq(p0, p1);
-----------------
src/color/theme.rs <color::theme::Permission as std::default::Default>::default
deps:{}
candidates:{}
+<color::theme::Permission as std::default::Default>::default();
+crate::<color::theme::Permission as std::default::Default>::default();
+<color::theme::Permission>::default();
-----------------
src/color/theme.rs <color::theme::FileType as std::default::Default>::default
deps:{}
candidates:{}
+<color::theme::FileType as std::default::Default>::default();
+crate::<color::theme::FileType as std::default::Default>::default();
+<color::theme::FileType>::default();
-----------------
src/color/theme.rs <color::theme::File as std::default::Default>::default
deps:{}
candidates:{}
+<color::theme::File as std::default::Default>::default();
+crate::<color::theme::File as std::default::Default>::default();
+<color::theme::File>::default();
-----------------
src/color/theme.rs <color::theme::Dir as std::default::Default>::default
deps:{}
candidates:{}
+<color::theme::Dir as std::default::Default>::default();
+crate::<color::theme::Dir as std::default::Default>::default();
+<color::theme::Dir>::default();
-----------------
src/color/theme.rs <color::theme::Symlink as std::default::Default>::default
deps:{}
candidates:{}
+<color::theme::Symlink as std::default::Default>::default();
+crate::<color::theme::Symlink as std::default::Default>::default();
+<color::theme::Symlink>::default();
-----------------
src/color/theme.rs <color::theme::Date as std::default::Default>::default
deps:{}
candidates:{}
+<color::theme::Date as std::default::Default>::default();
+crate::<color::theme::Date as std::default::Default>::default();
+<color::theme::Date>::default();
-----------------
src/color/theme.rs <color::theme::Size as std::default::Default>::default
deps:{}
candidates:{}
+<color::theme::Size as std::default::Default>::default();
+crate::<color::theme::Size as std::default::Default>::default();
+<color::theme::Size>::default();
-----------------
src/color/theme.rs <color::theme::INode as std::default::Default>::default
deps:{}
candidates:{}
+<color::theme::INode as std::default::Default>::default();
+crate::<color::theme::INode as std::default::Default>::default();
+<color::theme::INode>::default();
-----------------
src/color/theme.rs <color::theme::Links as std::default::Default>::default
deps:{}
candidates:{}
+<color::theme::Links as std::default::Default>::default();
+crate::<color::theme::Links as std::default::Default>::default();
+<color::theme::Links>::default();
-----------------
src/color/theme.rs <color::theme::Theme as std::default::Default>::default
deps:{}
candidates:{}
+<color::theme::Theme as std::default::Default>::default();
+crate::<color::theme::Theme as std::default::Default>::default();
+<color::theme::Theme>::default();
-----------------
src/color/theme.rs color::theme::Theme::from_path
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+color::theme::Theme::from_path(&p0);
+crate::color::theme::Theme::from_path(&p0);
+<color::theme::Theme>::from_path(&p0);
-----------------
src/color/theme.rs color::theme::Theme::with_yaml
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+color::theme::Theme::with_yaml(&p0);
+crate::color::theme::Theme::with_yaml(&p0);
+<color::theme::Theme>::with_yaml(&p0);
-----------------
src/color/theme.rs color::theme::Theme::default_dark
deps:{}
candidates:{}
+color::theme::Theme::default_dark();
+crate::color::theme::Theme::default_dark();
+<color::theme::Theme>::default_dark();
-----------------
src/color.rs <color::Elem as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<color::Elem as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<color::Elem as std::hash::Hash>::hash":{"__H":["<&mut H as std::hash::Hasher>","std::hash::SipHasher","std::hash::SipHasher13","std::hash::sip::Hasher<S>","std::collections::hash_map::DefaultHasher","std::boxed::Box<T, A>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Elem
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<color::Elem as std::hash::Hash>::hash(p0, p1);
+crate::<color::Elem as std::hash::Hash>::hash(p0, p1);
+<color::Elem>::hash(p0, p1);
-----------------
src/color.rs <color::Elem as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Elem
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<color::Elem as std::fmt::Debug>::fmt(p0, p1);
+crate::<color::Elem as std::fmt::Debug>::fmt(p0, p1);
+<color::Elem>::fmt(p0, p1);
-----------------
src/color.rs <color::Elem as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Elem
+p0.assert_receiver_is_total_eq();
+<color::Elem as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<color::Elem as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<color::Elem>::assert_receiver_is_total_eq(p0);
-----------------
src/color.rs <color::Elem as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Elem
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Elem
+p0.eq(p1);
+<color::Elem as std::cmp::PartialEq>::eq(p0, p1);
+crate::<color::Elem as std::cmp::PartialEq>::eq(p0, p1);
+<color::Elem>::eq(p0, p1);
-----------------
src/color.rs <color::Elem as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Elem
+p0.clone();
+<color::Elem as std::clone::Clone>::clone(p0);
+crate::<color::Elem as std::clone::Clone>::clone(p0);
+<color::Elem>::clone(p0);
-----------------
src/color.rs color::Elem::has_suid
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Elem
+p0.has_suid();
+color::Elem::has_suid(p0);
+crate::color::Elem::has_suid(p0);
+<color::Elem>::has_suid(p0);
-----------------
src/color.rs color::Elem::get_color
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Elem
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::theme::Theme
+p0.get_color(p1);
+color::Elem::get_color(p0, p1);
+crate::color::Elem::get_color(p0, p1);
+<color::Elem>::get_color(p0, p1);
-----------------
src/color.rs color::Colors::new
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::color::ThemeOption
+color::Colors::new(p0);
+crate::color::Colors::new(p0);
+<color::Colors>::new(p0);
-----------------
src/color.rs color::Colors::colorize
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p1 = std::string::String::new(); // None+std::string::String
let mut p2 = & MaybeUninit::uninit().assume_init(); // color::Elem
+p0.colorize(p1, p2);
+color::Colors::colorize(p0, p1, p2);
+crate::color::Colors::colorize(p0, p1, p2);
+<color::Colors>::colorize(p0, p1, p2);
-----------------
src/color.rs color::Colors::colorize_using_path
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p1 = std::string::String::new(); // None+std::string::String
let mut p2 = & MaybeUninit::uninit().assume_init(); // std::path::Path
let mut p3 = & MaybeUninit::uninit().assume_init(); // color::Elem
+p0.colorize_using_path(p1, p2, p3);
+color::Colors::colorize_using_path(p0, p1, p2, p3);
+crate::color::Colors::colorize_using_path(p0, p1, p2, p3);
+<color::Colors>::colorize_using_path(p0, p1, p2, p3);
-----------------
src/color.rs color::Colors::default_style
deps:{}
candidates:{}
+color::Colors::default_style();
+crate::color::Colors::default_style();
+<color::Colors>::default_style();
-----------------
src/color.rs color::Colors::style_from_path
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::path::Path
+p0.style_from_path(p1);
+color::Colors::style_from_path(p0, p1);
+crate::color::Colors::style_from_path(p0, p1);
+<color::Colors>::style_from_path(p0, p1);
-----------------
src/color.rs color::Colors::style
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Elem
+p0.style(p1);
+color::Colors::style(p0, p1);
+crate::color::Colors::style(p0, p1);
+<color::Colors>::style(p0, p1);
-----------------
src/color.rs color::Colors::style_default
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Elem
+p0.style_default(p1);
+color::Colors::style_default(p0, p1);
+crate::color::Colors::style_default(p0, p1);
+<color::Colors>::style_default(p0, p1);
-----------------
src/color.rs color::Colors::get_indicator_from_elem
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Elem
+p0.get_indicator_from_elem(p1);
+color::Colors::get_indicator_from_elem(p0, p1);
+crate::color::Colors::get_indicator_from_elem(p0, p1);
+<color::Colors>::get_indicator_from_elem(p0, p1);
-----------------
src/config_file.rs <config_file::Config as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+p0.assert_receiver_is_total_eq();
+<config_file::Config as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<config_file::Config as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<config_file::Config>::assert_receiver_is_total_eq(p0);
-----------------
src/config_file.rs <config_file::Config as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+p0.eq(p1);
+<config_file::Config as std::cmp::PartialEq>::eq(p0, p1);
+crate::<config_file::Config as std::cmp::PartialEq>::eq(p0, p1);
+<config_file::Config>::eq(p0, p1);
-----------------
src/config_file.rs <config_file::Config as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<config_file::Config as std::fmt::Debug>::fmt(p0, p1);
+crate::<config_file::Config as std::fmt::Debug>::fmt(p0, p1);
+<config_file::Config>::fmt(p0, p1);
-----------------
src/config_file.rs config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize":{"__D":["config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U8Deserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::CharDeserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::UnitDeserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_yaml::Value","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","&'a serde_yaml::Number","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize(p0);
+crate::config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize(p0);
+<config_file::Config>::deserialize(p0);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","serde_yaml::Number","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","serde_yaml::Value","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field>::deserialize(p0);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::PairVisitor<A, B, E>","serde_yaml::de::SeqAccess<'a, 'r>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","serde_yaml::value::de::SeqDeserializer","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::de::MapAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","serde_yaml::de::MapAccess<'a, 'r>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/config_file.rs <config_file::Color as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Color
+p0.assert_receiver_is_total_eq();
+<config_file::Color as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<config_file::Color as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<config_file::Color>::assert_receiver_is_total_eq(p0);
-----------------
src/config_file.rs <config_file::Color as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Color
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Color
+p0.eq(p1);
+<config_file::Color as std::cmp::PartialEq>::eq(p0, p1);
+crate::<config_file::Color as std::cmp::PartialEq>::eq(p0, p1);
+<config_file::Color>::eq(p0, p1);
-----------------
src/config_file.rs <config_file::Color as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Color
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<config_file::Color as std::fmt::Debug>::fmt(p0, p1);
+crate::<config_file::Color as std::fmt::Debug>::fmt(p0, p1);
+<config_file::Color>::fmt(p0, p1);
-----------------
src/config_file.rs config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize":{"__D":["config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","&'a serde_yaml::Number","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::I128Deserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::F64Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_yaml::Value","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","serde_yaml::Number","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::CharDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize(p0);
+crate::config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize(p0);
+<config_file::Color>::deserialize(p0);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","serde_yaml::Value","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","serde_yaml::Number","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field>::deserialize(p0);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","serde_yaml::de::SeqAccess<'a, 'r>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","config_file::_::_serde::de::value::PairVisitor<A, B, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::de::MapAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_yaml::de::MapAccess<'a, 'r>","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/config_file.rs <config_file::Icons as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Icons
+p0.assert_receiver_is_total_eq();
+<config_file::Icons as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<config_file::Icons as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<config_file::Icons>::assert_receiver_is_total_eq(p0);
-----------------
src/config_file.rs <config_file::Icons as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Icons
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Icons
+p0.eq(p1);
+<config_file::Icons as std::cmp::PartialEq>::eq(p0, p1);
+crate::<config_file::Icons as std::cmp::PartialEq>::eq(p0, p1);
+<config_file::Icons>::eq(p0, p1);
-----------------
src/config_file.rs <config_file::Icons as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Icons
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<config_file::Icons as std::fmt::Debug>::fmt(p0, p1);
+crate::<config_file::Icons as std::fmt::Debug>::fmt(p0, p1);
+<config_file::Icons>::fmt(p0, p1);
-----------------
src/config_file.rs config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize":{"__D":["config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","&'a serde_yaml::Number","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","serde_yaml::Number","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_yaml::Value","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::U8Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize(p0);
+crate::config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize(p0);
+<config_file::Icons>::deserialize(p0);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::F64Deserializer<E>","serde_yaml::Number","serde_yaml::Value","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::U128Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field>::deserialize(p0);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","serde_yaml::de::SeqAccess<'a, 'r>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::PairVisitor<A, B, E>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","config_file::_::_serde::de::MapAccess"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","serde_yaml::value::de::MapDeserializer","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","serde_yaml::de::MapAccess<'a, 'r>","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/config_file.rs <config_file::Recursion as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Recursion
+p0.assert_receiver_is_total_eq();
+<config_file::Recursion as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<config_file::Recursion as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<config_file::Recursion>::assert_receiver_is_total_eq(p0);
-----------------
src/config_file.rs <config_file::Recursion as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Recursion
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Recursion
+p0.eq(p1);
+<config_file::Recursion as std::cmp::PartialEq>::eq(p0, p1);
+crate::<config_file::Recursion as std::cmp::PartialEq>::eq(p0, p1);
+<config_file::Recursion>::eq(p0, p1);
-----------------
src/config_file.rs <config_file::Recursion as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Recursion
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<config_file::Recursion as std::fmt::Debug>::fmt(p0, p1);
+crate::<config_file::Recursion as std::fmt::Debug>::fmt(p0, p1);
+<config_file::Recursion>::fmt(p0, p1);
-----------------
src/config_file.rs config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize":{"__D":["config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::I32Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::I128Deserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","&'a serde_yaml::Number","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","serde_yaml::value::de::MapDeserializer","serde_yaml::Value","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize(p0);
+crate::config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize(p0);
+<config_file::Recursion>::deserialize(p0);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::Deserializer<'de>","serde_yaml::Value","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_yaml::Number","serde_yaml::value::de::SeqDeserializer","&'a serde_yaml::Number","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field>::deserialize(p0);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","serde_yaml::de::SeqAccess<'a, 'r>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::PairVisitor<A, B, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["config_file::_::_serde::de::MapAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","serde_yaml::de::MapAccess<'a, 'r>","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/config_file.rs <config_file::Sorting as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Sorting
+p0.assert_receiver_is_total_eq();
+<config_file::Sorting as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<config_file::Sorting as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<config_file::Sorting>::assert_receiver_is_total_eq(p0);
-----------------
src/config_file.rs <config_file::Sorting as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Sorting
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Sorting
+p0.eq(p1);
+<config_file::Sorting as std::cmp::PartialEq>::eq(p0, p1);
+crate::<config_file::Sorting as std::cmp::PartialEq>::eq(p0, p1);
+<config_file::Sorting>::eq(p0, p1);
-----------------
src/config_file.rs <config_file::Sorting as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Sorting
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<config_file::Sorting as std::fmt::Debug>::fmt(p0, p1);
+crate::<config_file::Sorting as std::fmt::Debug>::fmt(p0, p1);
+<config_file::Sorting>::fmt(p0, p1);
-----------------
src/config_file.rs config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize":{"__D":["config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::F32Deserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","serde_yaml::Value","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U8Deserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::StringDeserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::UsizeDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize(p0);
+crate::config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize(p0);
+<config_file::Sorting>::deserialize(p0);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_yaml::Number","&'a serde_yaml::Number","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::Value","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field>::deserialize(p0);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_yaml::de::SeqAccess<'a, 'r>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::PairVisitor<A, B, E>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/config_file.rs <config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","config_file::_::_serde::de::MapAccess"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>":{},"<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["serde_yaml::de::MapAccess<'a, 'r>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatInternallyTaggedAccess<'a, 'de, E>","config_file::_::_serde::__private::de::FlatStructAccess<'a, 'de, E>","config_file::_::_serde::__private::de::FlatMapAccess<'a, 'de, E>","<&'a mut A as config_file::_::_serde::de::MapAccess<'de>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/config_file.rs config_file::Config::with_none
deps:{}
candidates:{}
+config_file::Config::with_none();
+crate::config_file::Config::with_none();
+<config_file::Config>::with_none();
-----------------
src/config_file.rs config_file::Config::from_file
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
+config_file::Config::from_file(p0);
+crate::config_file::Config::from_file(p0);
+<config_file::Config>::from_file(p0);
-----------------
src/config_file.rs config_file::Config::from_yaml
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+config_file::Config::from_yaml(&p0);
+crate::config_file::Config::from_yaml(&p0);
+<config_file::Config>::from_yaml(&p0);
-----------------
src/config_file.rs config_file::Config::config_file_path
deps:{}
candidates:{}
+config_file::Config::config_file_path();
+crate::config_file::Config::config_file_path();
+<config_file::Config>::config_file_path();
-----------------
src/config_file.rs config_file::Config::expand_home
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"config_file::Config::expand_home":{"P":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"config_file::Config::expand_home":{"P":["core::num::dec2flt::common::AsciiStr<'a>","<&T as std::convert::AsRef<U>>","std::vec::Drain<'a, T, A>","std::ffi::CStr","std::ffi::CString","std::slice::Iter<'_, T>","std::rc::Rc<T>","std::boxed::Box<T, A>","std::borrow::Cow<'_, std::ffi::OsStr>","std::slice::IterMut<'_, T>","std::vec::IntoIter<T, A>","std::borrow::Cow<'_, T>","std::sync::Arc<T>","<&mut T as std::convert::AsRef<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // P
+config_file::Config::expand_home(p0);
+crate::config_file::Config::expand_home(p0);
+<config_file::Config>::expand_home(p0);
-----------------
src/config_file.rs <config_file::Config as std::default::Default>::default
deps:{}
candidates:{}
+<config_file::Config as std::default::Default>::default();
+crate::<config_file::Config as std::default::Default>::default();
+<config_file::Config>::default();
-----------------
src/core.rs core::Core::new
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::Flags
+core::Core::new(p0);
+crate::core::Core::new(p0);
+<core::Core>::new(p0);
-----------------
src/core.rs core::Core::run
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // core::Core
let mut p1 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<std::path::PathBuf>
+p0.run(p1);
+core::Core::run(p0, p1);
+crate::core::Core::run(p0, p1);
+<core::Core>::run(p0, p1);
-----------------
src/core.rs core::Core::fetch
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // core::Core
let mut p1 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<std::path::PathBuf>
+p0.fetch(p1);
+core::Core::fetch(p0, p1);
+crate::core::Core::fetch(p0, p1);
+<core::Core>::fetch(p0, p1);
-----------------
src/core.rs core::Core::sort
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // core::Core
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::vec::Vec<meta::Meta>
+p0.sort(p1);
+core::Core::sort(p0, p1);
+crate::core::Core::sort(p0, p1);
+<core::Core>::sort(p0, p1);
-----------------
src/core.rs core::Core::display
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // core::Core
let mut p1 = & MaybeUninit::uninit().assume_init(); // [meta::Meta]
+p0.display(p1);
+core::Core::display(p0, p1);
+crate::core::Core::display(p0, p1);
+<core::Core>::display(p0, p1);
-----------------
src/flags/blocks.rs <flags::blocks::Blocks as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Blocks
+p0.clone();
+<flags::blocks::Blocks as std::clone::Clone>::clone(p0);
+crate::<flags::blocks::Blocks as std::clone::Clone>::clone(p0);
+<flags::blocks::Blocks>::clone(p0);
-----------------
src/flags/blocks.rs <flags::blocks::Blocks as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Blocks
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::blocks::Blocks as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::blocks::Blocks as std::fmt::Debug>::fmt(p0, p1);
+<flags::blocks::Blocks>::fmt(p0, p1);
-----------------
src/flags/blocks.rs <flags::blocks::Blocks as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Blocks
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Blocks
+p0.eq(p1);
+<flags::blocks::Blocks as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::blocks::Blocks as std::cmp::PartialEq>::eq(p0, p1);
+<flags::blocks::Blocks>::eq(p0, p1);
-----------------
src/flags/blocks.rs <flags::blocks::Blocks as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Blocks
+p0.assert_receiver_is_total_eq();
+<flags::blocks::Blocks as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::blocks::Blocks as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::blocks::Blocks>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/blocks.rs flags::blocks::Blocks::configure_from
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::blocks::Blocks::configure_from(p0, p1);
+crate::flags::blocks::Blocks::configure_from(p0, p1);
+<flags::blocks::Blocks>::configure_from(p0, p1);
-----------------
src/flags/blocks.rs flags::blocks::Blocks::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+flags::blocks::Blocks::from_arg_matches(p0);
+crate::flags::blocks::Blocks::from_arg_matches(p0);
+<flags::blocks::Blocks>::from_arg_matches(p0);
-----------------
src/flags/blocks.rs flags::blocks::Blocks::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::blocks::Blocks::from_config(p0);
+crate::flags::blocks::Blocks::from_config(p0);
+<flags::blocks::Blocks>::from_config(p0);
-----------------
src/flags/blocks.rs flags::blocks::Blocks::long
deps:{}
candidates:{}
+flags::blocks::Blocks::long();
+crate::flags::blocks::Blocks::long();
+<flags::blocks::Blocks>::long();
-----------------
src/flags/blocks.rs flags::blocks::Blocks::contains_inode
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Blocks
+p0.contains_inode();
+flags::blocks::Blocks::contains_inode(p0);
+crate::flags::blocks::Blocks::contains_inode(p0);
+<flags::blocks::Blocks>::contains_inode(p0);
-----------------
src/flags/blocks.rs flags::blocks::Blocks::prepend_inode
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // flags::blocks::Blocks
+p0.prepend_inode();
+flags::blocks::Blocks::prepend_inode(p0);
+crate::flags::blocks::Blocks::prepend_inode(p0);
+<flags::blocks::Blocks>::prepend_inode(p0);
-----------------
src/flags/blocks.rs flags::blocks::Blocks::optional_prepend_inode
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // flags::blocks::Blocks
+p0.optional_prepend_inode();
+flags::blocks::Blocks::optional_prepend_inode(p0);
+crate::flags::blocks::Blocks::optional_prepend_inode(p0);
+<flags::blocks::Blocks>::optional_prepend_inode(p0);
-----------------
src/flags/blocks.rs flags::blocks::Blocks::displays_size
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Blocks
+p0.displays_size();
+flags::blocks::Blocks::displays_size(p0);
+crate::flags::blocks::Blocks::displays_size(p0);
+<flags::blocks::Blocks>::displays_size(p0);
-----------------
src/flags/blocks.rs flags::blocks::Blocks::optional_insert_context
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // flags::blocks::Blocks
+p0.optional_insert_context();
+flags::blocks::Blocks::optional_insert_context(p0);
+crate::flags::blocks::Blocks::optional_insert_context(p0);
+<flags::blocks::Blocks>::optional_insert_context(p0);
-----------------
src/flags/blocks.rs <flags::blocks::Blocks as std::default::Default>::default
deps:{}
candidates:{}
+<flags::blocks::Blocks as std::default::Default>::default();
+crate::<flags::blocks::Blocks as std::default::Default>::default();
+<flags::blocks::Blocks>::default();
-----------------
src/flags/blocks.rs <flags::blocks::Block as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Block
+p0.clone();
+<flags::blocks::Block as std::clone::Clone>::clone(p0);
+crate::<flags::blocks::Block as std::clone::Clone>::clone(p0);
+<flags::blocks::Block>::clone(p0);
-----------------
src/flags/blocks.rs <flags::blocks::Block as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Block
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::blocks::Block as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::blocks::Block as std::fmt::Debug>::fmt(p0, p1);
+<flags::blocks::Block>::fmt(p0, p1);
-----------------
src/flags/blocks.rs <flags::blocks::Block as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Block
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Block
+p0.eq(p1);
+<flags::blocks::Block as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::blocks::Block as std::cmp::PartialEq>::eq(p0, p1);
+<flags::blocks::Block>::eq(p0, p1);
-----------------
src/flags/blocks.rs <flags::blocks::Block as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Block
+p0.assert_receiver_is_total_eq();
+<flags::blocks::Block as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::blocks::Block as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::blocks::Block>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/blocks.rs <flags::blocks::Block as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<flags::blocks::Block as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<flags::blocks::Block as std::hash::Hash>::hash":{"__H":["std::boxed::Box<T, A>","std::hash::sip::Hasher<S>","std::collections::hash_map::DefaultHasher","std::hash::SipHasher13","<&mut H as std::hash::Hasher>","std::hash::SipHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Block
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<flags::blocks::Block as std::hash::Hash>::hash(p0, p1);
+crate::<flags::blocks::Block as std::hash::Hash>::hash(p0, p1);
+<flags::blocks::Block>::hash(p0, p1);
-----------------
src/flags/blocks.rs <flags::blocks::Block as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Block
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Block
+p0.partial_cmp(p1);
+<flags::blocks::Block as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<flags::blocks::Block as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<flags::blocks::Block>::partial_cmp(p0, p1);
-----------------
src/flags/blocks.rs <flags::blocks::Block as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Block
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::blocks::Block
+p0.cmp(p1);
+<flags::blocks::Block as std::cmp::Ord>::cmp(p0, p1);
+crate::<flags::blocks::Block as std::cmp::Ord>::cmp(p0, p1);
+<flags::blocks::Block>::cmp(p0, p1);
-----------------
src/flags/blocks.rs <flags::blocks::Block as std::convert::TryFrom<&str>>::try_from
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<flags::blocks::Block as std::convert::TryFrom<&str>>::try_from(&p0);
+crate::<flags::blocks::Block as std::convert::TryFrom<&str>>::try_from(&p0);
+<flags::blocks::Block>::try_from(&p0);
-----------------
src/flags/color.rs <flags::color::Color as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::color::Color
+p0.clone();
+<flags::color::Color as std::clone::Clone>::clone(p0);
+crate::<flags::color::Color as std::clone::Clone>::clone(p0);
+<flags::color::Color>::clone(p0);
-----------------
src/flags/color.rs <flags::color::Color as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::color::Color
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::color::Color as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::color::Color as std::fmt::Debug>::fmt(p0, p1);
+<flags::color::Color>::fmt(p0, p1);
-----------------
src/flags/color.rs <flags::color::Color as std::default::Default>::default
deps:{}
candidates:{}
+<flags::color::Color as std::default::Default>::default();
+crate::<flags::color::Color as std::default::Default>::default();
+<flags::color::Color>::default();
-----------------
src/flags/color.rs flags::color::Color::configure_from
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::color::Color::configure_from(p0, p1);
+crate::flags::color::Color::configure_from(p0, p1);
+<flags::color::Color>::configure_from(p0, p1);
-----------------
src/flags/color.rs <flags::color::ThemeOption as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::color::ThemeOption
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::color::ThemeOption
+p0.eq(p1);
+<flags::color::ThemeOption as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::color::ThemeOption as std::cmp::PartialEq>::eq(p0, p1);
+<flags::color::ThemeOption>::eq(p0, p1);
-----------------
src/flags/color.rs <flags::color::ThemeOption as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::color::ThemeOption
+p0.assert_receiver_is_total_eq();
+<flags::color::ThemeOption as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::color::ThemeOption as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::color::ThemeOption>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/color.rs <flags::color::ThemeOption as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::color::ThemeOption
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::color::ThemeOption as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::color::ThemeOption as std::fmt::Debug>::fmt(p0, p1);
+<flags::color::ThemeOption>::fmt(p0, p1);
-----------------
src/flags/color.rs <flags::color::ThemeOption as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::color::ThemeOption
+p0.clone();
+<flags::color::ThemeOption as std::clone::Clone>::clone(p0);
+crate::<flags::color::ThemeOption as std::clone::Clone>::clone(p0);
+<flags::color::ThemeOption>::clone(p0);
-----------------
src/flags/color.rs flags::color::ThemeOption::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::color::ThemeOption::from_config(p0);
+crate::flags::color::ThemeOption::from_config(p0);
+<flags::color::ThemeOption>::from_config(p0);
-----------------
src/flags/color.rs <flags::color::ThemeOption as std::default::Default>::default
deps:{}
candidates:{}
+<flags::color::ThemeOption as std::default::Default>::default();
+crate::<flags::color::ThemeOption as std::default::Default>::default();
+<flags::color::ThemeOption>::default();
-----------------
src/flags/color.rs <flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize":{"D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize":{"D":["config_file::_::_serde::de::value::F64Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","serde_yaml::Value","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","serde_yaml::Number","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U8Deserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","serde_yaml::Deserializer<'de>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // D
+<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<flags::color::ThemeOption>::deserialize(p0);
-----------------
src/flags/color.rs <<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor>::expecting(p0, p1);
-----------------
src/flags/color.rs <<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<<flags::color::ThemeOption as config_file::_::_serde::Deserialize<'de>>::deserialize::ThemeOptionVisitor>::visit_str(p0, &p1);
-----------------
src/flags/color.rs <flags::color::ColorOption as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::color::ColorOption
+p0.clone();
+<flags::color::ColorOption as std::clone::Clone>::clone(p0);
+crate::<flags::color::ColorOption as std::clone::Clone>::clone(p0);
+<flags::color::ColorOption>::clone(p0);
-----------------
src/flags/color.rs <flags::color::ColorOption as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::color::ColorOption
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::color::ColorOption as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::color::ColorOption as std::fmt::Debug>::fmt(p0, p1);
+<flags::color::ColorOption>::fmt(p0, p1);
-----------------
src/flags/color.rs <flags::color::ColorOption as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::color::ColorOption
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::color::ColorOption
+p0.eq(p1);
+<flags::color::ColorOption as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::color::ColorOption as std::cmp::PartialEq>::eq(p0, p1);
+<flags::color::ColorOption>::eq(p0, p1);
-----------------
src/flags/color.rs <flags::color::ColorOption as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::color::ColorOption
+p0.assert_receiver_is_total_eq();
+<flags::color::ColorOption as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::color::ColorOption as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::color::ColorOption>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/color.rs flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize":{"__D":["config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","serde_yaml::Value","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::F64Deserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I64Deserializer<E>","serde_yaml::Deserializer<'de>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","serde_yaml::Number","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize(p0);
+crate::flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize(p0);
+<flags::color::ColorOption>::deserialize(p0);
-----------------
src/flags/color.rs <flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/flags/color.rs <flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/flags/color.rs <flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/flags/color.rs <flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/flags/color.rs <flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","serde_yaml::Value","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","serde_yaml::Number","&'a serde_yaml::Number","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::BoolDeserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field>::deserialize(p0);
-----------------
src/flags/color.rs <flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/flags/color.rs <flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["std::marker::Sized","config_file::_::_serde::de::EnumAccess"]}}
candidates:{"<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["config_file::_::_serde::__private::de::content::EnumDeserializer<'de, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::content::EnumRefDeserializer<'a, 'de, E>","serde_yaml::de::EnumAccess<'a, 'r>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_yaml::value::de::EnumDeserializer","config_file::_::_serde::de::value::U32Deserializer<E>","serde_yaml::de::UnitVariantAccess<'a, 'r>","config_file::_::_serde::de::value::StrDeserializer<'a, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/flags/color.rs flags::color::ColorOption::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+flags::color::ColorOption::from_str(&p0);
+crate::flags::color::ColorOption::from_str(&p0);
+<flags::color::ColorOption>::from_str(&p0);
-----------------
src/flags/color.rs <flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_arg_matches(p0);
+crate::<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_arg_matches(p0);
+<flags::color::ColorOption>::from_arg_matches(p0);
-----------------
src/flags/color.rs <flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_config(p0);
+crate::<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_config(p0);
+<flags::color::ColorOption>::from_config(p0);
-----------------
src/flags/color.rs <flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_environment
deps:{}
candidates:{}
+<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_environment();
+crate::<flags::color::ColorOption as flags::Configurable<flags::color::ColorOption>>::from_environment();
+<flags::color::ColorOption>::from_environment();
-----------------
src/flags/color.rs <flags::color::ColorOption as std::default::Default>::default
deps:{}
candidates:{}
+<flags::color::ColorOption as std::default::Default>::default();
+crate::<flags::color::ColorOption as std::default::Default>::default();
+<flags::color::ColorOption>::default();
-----------------
src/flags/date.rs <flags::date::DateFlag as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::date::DateFlag
+p0.clone();
+<flags::date::DateFlag as std::clone::Clone>::clone(p0);
+crate::<flags::date::DateFlag as std::clone::Clone>::clone(p0);
+<flags::date::DateFlag>::clone(p0);
-----------------
src/flags/date.rs <flags::date::DateFlag as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::date::DateFlag
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::date::DateFlag as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::date::DateFlag as std::fmt::Debug>::fmt(p0, p1);
+<flags::date::DateFlag>::fmt(p0, p1);
-----------------
src/flags/date.rs <flags::date::DateFlag as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::date::DateFlag
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::date::DateFlag
+p0.eq(p1);
+<flags::date::DateFlag as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::date::DateFlag as std::cmp::PartialEq>::eq(p0, p1);
+<flags::date::DateFlag>::eq(p0, p1);
-----------------
src/flags/date.rs <flags::date::DateFlag as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::date::DateFlag
+p0.assert_receiver_is_total_eq();
+<flags::date::DateFlag as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::date::DateFlag as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::date::DateFlag>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/date.rs flags::date::DateFlag::from_format_string
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+flags::date::DateFlag::from_format_string(&p0);
+crate::flags::date::DateFlag::from_format_string(&p0);
+<flags::date::DateFlag>::from_format_string(&p0);
-----------------
src/flags/date.rs flags::date::DateFlag::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+flags::date::DateFlag::from_str(&p0);
+crate::flags::date::DateFlag::from_str(&p0);
+<flags::date::DateFlag>::from_str(&p0);
-----------------
src/flags/date.rs <flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_arg_matches(p0);
+crate::<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_arg_matches(p0);
+<flags::date::DateFlag>::from_arg_matches(p0);
-----------------
src/flags/date.rs <flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_config(p0);
+crate::<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_config(p0);
+<flags::date::DateFlag>::from_config(p0);
-----------------
src/flags/date.rs <flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_environment
deps:{}
candidates:{}
+<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_environment();
+crate::<flags::date::DateFlag as flags::Configurable<flags::date::DateFlag>>::from_environment();
+<flags::date::DateFlag>::from_environment();
-----------------
src/flags/date.rs <flags::date::DateFlag as std::default::Default>::default
deps:{}
candidates:{}
+<flags::date::DateFlag as std::default::Default>::default();
+crate::<flags::date::DateFlag as std::default::Default>::default();
+<flags::date::DateFlag>::default();
-----------------
src/flags/dereference.rs <flags::dereference::Dereference as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::dereference::Dereference
+p0.clone();
+<flags::dereference::Dereference as std::clone::Clone>::clone(p0);
+crate::<flags::dereference::Dereference as std::clone::Clone>::clone(p0);
+<flags::dereference::Dereference>::clone(p0);
-----------------
src/flags/dereference.rs <flags::dereference::Dereference as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::dereference::Dereference
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::dereference::Dereference as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::dereference::Dereference as std::fmt::Debug>::fmt(p0, p1);
+<flags::dereference::Dereference>::fmt(p0, p1);
-----------------
src/flags/dereference.rs <flags::dereference::Dereference as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::dereference::Dereference
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::dereference::Dereference
+p0.eq(p1);
+<flags::dereference::Dereference as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::dereference::Dereference as std::cmp::PartialEq>::eq(p0, p1);
+<flags::dereference::Dereference>::eq(p0, p1);
-----------------
src/flags/dereference.rs <flags::dereference::Dereference as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::dereference::Dereference
+p0.assert_receiver_is_total_eq();
+<flags::dereference::Dereference as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::dereference::Dereference as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::dereference::Dereference>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/dereference.rs <flags::dereference::Dereference as std::default::Default>::default
deps:{}
candidates:{}
+<flags::dereference::Dereference as std::default::Default>::default();
+crate::<flags::dereference::Dereference as std::default::Default>::default();
+<flags::dereference::Dereference>::default();
-----------------
src/flags/dereference.rs <flags::dereference::Dereference as flags::Configurable<flags::dereference::Dereference>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::dereference::Dereference as flags::Configurable<flags::dereference::Dereference>>::from_arg_matches(p0);
+crate::<flags::dereference::Dereference as flags::Configurable<flags::dereference::Dereference>>::from_arg_matches(p0);
+<flags::dereference::Dereference>::from_arg_matches(p0);
-----------------
src/flags/dereference.rs <flags::dereference::Dereference as flags::Configurable<flags::dereference::Dereference>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::dereference::Dereference as flags::Configurable<flags::dereference::Dereference>>::from_config(p0);
+crate::<flags::dereference::Dereference as flags::Configurable<flags::dereference::Dereference>>::from_config(p0);
+<flags::dereference::Dereference>::from_config(p0);
-----------------
src/flags/display.rs <flags::display::Display as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::display::Display
+p0.clone();
+<flags::display::Display as std::clone::Clone>::clone(p0);
+crate::<flags::display::Display as std::clone::Clone>::clone(p0);
+<flags::display::Display>::clone(p0);
-----------------
src/flags/display.rs <flags::display::Display as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::display::Display
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::display::Display as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::display::Display as std::fmt::Debug>::fmt(p0, p1);
+<flags::display::Display>::fmt(p0, p1);
-----------------
src/flags/display.rs <flags::display::Display as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::display::Display
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::display::Display
+p0.eq(p1);
+<flags::display::Display as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::display::Display as std::cmp::PartialEq>::eq(p0, p1);
+<flags::display::Display>::eq(p0, p1);
-----------------
src/flags/display.rs <flags::display::Display as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::display::Display
+p0.assert_receiver_is_total_eq();
+<flags::display::Display as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::display::Display as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::display::Display>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/display.rs flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize":{"__D":["config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","&'a serde_yaml::Number","serde_yaml::Value","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","serde_yaml::Number","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize(p0);
+crate::flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize(p0);
+<flags::display::Display>::deserialize(p0);
-----------------
src/flags/display.rs <flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/flags/display.rs <flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/flags/display.rs <flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/flags/display.rs <flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/flags/display.rs <flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::I32Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","&'a serde_yaml::Number","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::Value","serde_yaml::Number","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::U64Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field>::deserialize(p0);
-----------------
src/flags/display.rs <flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/flags/display.rs <flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["config_file::_::_serde::de::EnumAccess","std::marker::Sized"]}}
candidates:{"<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["serde_yaml::de::EnumAccess<'a, 'r>","serde_yaml::value::de::EnumDeserializer","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::__private::de::content::EnumRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_yaml::de::UnitVariantAccess<'a, 'r>","config_file::_::_serde::__private::de::content::EnumDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/flags/display.rs <flags::display::Display as flags::Configurable<flags::display::Display>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::display::Display as flags::Configurable<flags::display::Display>>::from_arg_matches(p0);
+crate::<flags::display::Display as flags::Configurable<flags::display::Display>>::from_arg_matches(p0);
+<flags::display::Display>::from_arg_matches(p0);
-----------------
src/flags/display.rs <flags::display::Display as flags::Configurable<flags::display::Display>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::display::Display as flags::Configurable<flags::display::Display>>::from_config(p0);
+crate::<flags::display::Display as flags::Configurable<flags::display::Display>>::from_config(p0);
+<flags::display::Display>::from_config(p0);
-----------------
src/flags/display.rs <flags::display::Display as std::default::Default>::default
deps:{}
candidates:{}
+<flags::display::Display as std::default::Default>::default();
+crate::<flags::display::Display as std::default::Default>::default();
+<flags::display::Display>::default();
-----------------
src/flags/hyperlink.rs <flags::hyperlink::HyperlinkOption as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::hyperlink::HyperlinkOption
+p0.clone();
+<flags::hyperlink::HyperlinkOption as std::clone::Clone>::clone(p0);
+crate::<flags::hyperlink::HyperlinkOption as std::clone::Clone>::clone(p0);
+<flags::hyperlink::HyperlinkOption>::clone(p0);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::HyperlinkOption as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::hyperlink::HyperlinkOption
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::hyperlink::HyperlinkOption as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::hyperlink::HyperlinkOption as std::fmt::Debug>::fmt(p0, p1);
+<flags::hyperlink::HyperlinkOption>::fmt(p0, p1);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::HyperlinkOption as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::hyperlink::HyperlinkOption
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::hyperlink::HyperlinkOption
+p0.eq(p1);
+<flags::hyperlink::HyperlinkOption as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::hyperlink::HyperlinkOption as std::cmp::PartialEq>::eq(p0, p1);
+<flags::hyperlink::HyperlinkOption>::eq(p0, p1);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::HyperlinkOption as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::hyperlink::HyperlinkOption
+p0.assert_receiver_is_total_eq();
+<flags::hyperlink::HyperlinkOption as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::hyperlink::HyperlinkOption as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::hyperlink::HyperlinkOption>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/hyperlink.rs flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize":{"__D":["serde_yaml::value::de::SeqDeserializer","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::U64Deserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","serde_yaml::Number","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","serde_yaml::Value"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize(p0);
+crate::flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize(p0);
+<flags::hyperlink::HyperlinkOption>::deserialize(p0);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","serde_yaml::Value","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Field>::deserialize(p0);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["std::marker::Sized","config_file::_::_serde::de::EnumAccess"]}}
candidates:{"<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["config_file::_::_serde::de::value::U32Deserializer<E>","serde_yaml::value::de::EnumDeserializer","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_yaml::de::EnumAccess<'a, 'r>","config_file::_::_serde::__private::de::content::EnumRefDeserializer<'a, 'de, E>","serde_yaml::de::UnitVariantAccess<'a, 'r>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::content::EnumDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<flags::hyperlink::_::<impl config_file::_::_serde::Deserialize<'de> for flags::hyperlink::HyperlinkOption>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::HyperlinkOption as flags::Configurable<flags::hyperlink::HyperlinkOption>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::hyperlink::HyperlinkOption as flags::Configurable<flags::hyperlink::HyperlinkOption>>::from_arg_matches(p0);
+crate::<flags::hyperlink::HyperlinkOption as flags::Configurable<flags::hyperlink::HyperlinkOption>>::from_arg_matches(p0);
+<flags::hyperlink::HyperlinkOption>::from_arg_matches(p0);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::HyperlinkOption as flags::Configurable<flags::hyperlink::HyperlinkOption>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::hyperlink::HyperlinkOption as flags::Configurable<flags::hyperlink::HyperlinkOption>>::from_config(p0);
+crate::<flags::hyperlink::HyperlinkOption as flags::Configurable<flags::hyperlink::HyperlinkOption>>::from_config(p0);
+<flags::hyperlink::HyperlinkOption>::from_config(p0);
-----------------
src/flags/hyperlink.rs <flags::hyperlink::HyperlinkOption as std::default::Default>::default
deps:{}
candidates:{}
+<flags::hyperlink::HyperlinkOption as std::default::Default>::default();
+crate::<flags::hyperlink::HyperlinkOption as std::default::Default>::default();
+<flags::hyperlink::HyperlinkOption>::default();
-----------------
src/flags/icons.rs <flags::icons::Icons as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::Icons
+p0.clone();
+<flags::icons::Icons as std::clone::Clone>::clone(p0);
+crate::<flags::icons::Icons as std::clone::Clone>::clone(p0);
+<flags::icons::Icons>::clone(p0);
-----------------
src/flags/icons.rs <flags::icons::Icons as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::Icons
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::icons::Icons as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::icons::Icons as std::fmt::Debug>::fmt(p0, p1);
+<flags::icons::Icons>::fmt(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::Icons as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::Icons
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::icons::Icons
+p0.eq(p1);
+<flags::icons::Icons as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::icons::Icons as std::cmp::PartialEq>::eq(p0, p1);
+<flags::icons::Icons>::eq(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::Icons as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::Icons
+p0.assert_receiver_is_total_eq();
+<flags::icons::Icons as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::icons::Icons as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::icons::Icons>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/icons.rs <flags::icons::Icons as std::default::Default>::default
deps:{}
candidates:{}
+<flags::icons::Icons as std::default::Default>::default();
+crate::<flags::icons::Icons as std::default::Default>::default();
+<flags::icons::Icons>::default();
-----------------
src/flags/icons.rs flags::icons::Icons::configure_from
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::icons::Icons::configure_from(p0, p1);
+crate::flags::icons::Icons::configure_from(p0, p1);
+<flags::icons::Icons>::configure_from(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::IconOption as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconOption
+p0.clone();
+<flags::icons::IconOption as std::clone::Clone>::clone(p0);
+crate::<flags::icons::IconOption as std::clone::Clone>::clone(p0);
+<flags::icons::IconOption>::clone(p0);
-----------------
src/flags/icons.rs <flags::icons::IconOption as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconOption
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::icons::IconOption as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::icons::IconOption as std::fmt::Debug>::fmt(p0, p1);
+<flags::icons::IconOption>::fmt(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::IconOption as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconOption
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconOption
+p0.eq(p1);
+<flags::icons::IconOption as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::icons::IconOption as std::cmp::PartialEq>::eq(p0, p1);
+<flags::icons::IconOption>::eq(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::IconOption as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconOption
+p0.assert_receiver_is_total_eq();
+<flags::icons::IconOption as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::icons::IconOption as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::icons::IconOption>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/icons.rs flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize":{"__D":["config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","serde_yaml::Value","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::F32Deserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::I32Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize(p0);
+crate::flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize(p0);
+<flags::icons::IconOption>::deserialize(p0);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::F32Deserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","serde_yaml::Number","serde_yaml::Deserializer<'de>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::value::de::MapDeserializer","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","serde_yaml::Value","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field>::deserialize(p0);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["std::marker::Sized","config_file::_::_serde::de::EnumAccess"]}}
candidates:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["config_file::_::_serde::de::value::StringDeserializer<E>","serde_yaml::value::de::EnumDeserializer","config_file::_::_serde::__private::de::content::EnumRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::EnumDeserializer<'de, E>","serde_yaml::de::EnumAccess<'a, 'r>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_yaml::de::UnitVariantAccess<'a, 'r>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::IconOption as flags::Configurable<flags::icons::IconOption>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::icons::IconOption as flags::Configurable<flags::icons::IconOption>>::from_arg_matches(p0);
+crate::<flags::icons::IconOption as flags::Configurable<flags::icons::IconOption>>::from_arg_matches(p0);
+<flags::icons::IconOption>::from_arg_matches(p0);
-----------------
src/flags/icons.rs <flags::icons::IconOption as flags::Configurable<flags::icons::IconOption>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::icons::IconOption as flags::Configurable<flags::icons::IconOption>>::from_config(p0);
+crate::<flags::icons::IconOption as flags::Configurable<flags::icons::IconOption>>::from_config(p0);
+<flags::icons::IconOption>::from_config(p0);
-----------------
src/flags/icons.rs <flags::icons::IconOption as std::default::Default>::default
deps:{}
candidates:{}
+<flags::icons::IconOption as std::default::Default>::default();
+crate::<flags::icons::IconOption as std::default::Default>::default();
+<flags::icons::IconOption>::default();
-----------------
src/flags/icons.rs <flags::icons::IconTheme as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconTheme
+p0.clone();
+<flags::icons::IconTheme as std::clone::Clone>::clone(p0);
+crate::<flags::icons::IconTheme as std::clone::Clone>::clone(p0);
+<flags::icons::IconTheme>::clone(p0);
-----------------
src/flags/icons.rs <flags::icons::IconTheme as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconTheme
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::icons::IconTheme as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::icons::IconTheme as std::fmt::Debug>::fmt(p0, p1);
+<flags::icons::IconTheme>::fmt(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::IconTheme as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconTheme
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconTheme
+p0.eq(p1);
+<flags::icons::IconTheme as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::icons::IconTheme as std::cmp::PartialEq>::eq(p0, p1);
+<flags::icons::IconTheme>::eq(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::IconTheme as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconTheme
+p0.assert_receiver_is_total_eq();
+<flags::icons::IconTheme as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::icons::IconTheme as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::icons::IconTheme>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/icons.rs flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize":{"__D":["config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","serde_yaml::Number","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","serde_yaml::Value","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize(p0);
+crate::flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize(p0);
+<flags::icons::IconTheme>::deserialize(p0);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::Number","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","serde_yaml::Value","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","&'a serde_yaml::Number"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field>::deserialize(p0);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["config_file::_::_serde::de::EnumAccess","std::marker::Sized"]}}
candidates:{"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["serde_yaml::value::de::EnumDeserializer","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::EnumRefDeserializer<'a, 'de, E>","serde_yaml::de::EnumAccess<'a, 'r>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::U32Deserializer<E>","serde_yaml::de::UnitVariantAccess<'a, 'r>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::EnumDeserializer<'de, E>","config_file::_::_serde::de::value::StringDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::IconTheme as flags::Configurable<flags::icons::IconTheme>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::icons::IconTheme as flags::Configurable<flags::icons::IconTheme>>::from_arg_matches(p0);
+crate::<flags::icons::IconTheme as flags::Configurable<flags::icons::IconTheme>>::from_arg_matches(p0);
+<flags::icons::IconTheme>::from_arg_matches(p0);
-----------------
src/flags/icons.rs <flags::icons::IconTheme as flags::Configurable<flags::icons::IconTheme>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::icons::IconTheme as flags::Configurable<flags::icons::IconTheme>>::from_config(p0);
+crate::<flags::icons::IconTheme as flags::Configurable<flags::icons::IconTheme>>::from_config(p0);
+<flags::icons::IconTheme>::from_config(p0);
-----------------
src/flags/icons.rs <flags::icons::IconTheme as std::default::Default>::default
deps:{}
candidates:{}
+<flags::icons::IconTheme as std::default::Default>::default();
+crate::<flags::icons::IconTheme as std::default::Default>::default();
+<flags::icons::IconTheme>::default();
-----------------
src/flags/icons.rs <flags::icons::IconSeparator as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconSeparator
+p0.clone();
+<flags::icons::IconSeparator as std::clone::Clone>::clone(p0);
+crate::<flags::icons::IconSeparator as std::clone::Clone>::clone(p0);
+<flags::icons::IconSeparator>::clone(p0);
-----------------
src/flags/icons.rs <flags::icons::IconSeparator as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconSeparator
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::icons::IconSeparator as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::icons::IconSeparator as std::fmt::Debug>::fmt(p0, p1);
+<flags::icons::IconSeparator>::fmt(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::IconSeparator as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconSeparator
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconSeparator
+p0.eq(p1);
+<flags::icons::IconSeparator as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::icons::IconSeparator as std::cmp::PartialEq>::eq(p0, p1);
+<flags::icons::IconSeparator>::eq(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::IconSeparator as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::IconSeparator
+p0.assert_receiver_is_total_eq();
+<flags::icons::IconSeparator as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::icons::IconSeparator as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::icons::IconSeparator>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/icons.rs flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize":{"__D":["config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","serde_yaml::Value","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_yaml::Number","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize(p0);
+crate::flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize(p0);
+<flags::icons::IconSeparator>::deserialize(p0);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_newtype_struct
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_newtype_struct":{"__E":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_newtype_struct":{"__E":["config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","serde_yaml::value::de::SeqDeserializer","&'a serde_yaml::Number","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","serde_yaml::Value","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","serde_yaml::Deserializer<'de>","serde_yaml::Number","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __E
+p0.visit_newtype_struct(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_newtype_struct(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_newtype_struct(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de>>::visit_newtype_struct(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","config_file::_::_serde::de::SeqAccess"]}}
candidates:{"<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>":{},"<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["serde_yaml::de::SeqAccess<'a, 'r>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","<&'a mut A as config_file::_::_serde::de::SeqAccess<'de>>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::PairVisitor<A, B, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconSeparator>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/flags/icons.rs <flags::icons::IconSeparator as flags::Configurable<flags::icons::IconSeparator>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::icons::IconSeparator as flags::Configurable<flags::icons::IconSeparator>>::from_arg_matches(p0);
+crate::<flags::icons::IconSeparator as flags::Configurable<flags::icons::IconSeparator>>::from_arg_matches(p0);
+<flags::icons::IconSeparator>::from_arg_matches(p0);
-----------------
src/flags/icons.rs <flags::icons::IconSeparator as flags::Configurable<flags::icons::IconSeparator>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::icons::IconSeparator as flags::Configurable<flags::icons::IconSeparator>>::from_config(p0);
+crate::<flags::icons::IconSeparator as flags::Configurable<flags::icons::IconSeparator>>::from_config(p0);
+<flags::icons::IconSeparator>::from_config(p0);
-----------------
src/flags/icons.rs <flags::icons::IconSeparator as std::default::Default>::default
deps:{}
candidates:{}
+<flags::icons::IconSeparator as std::default::Default>::default();
+crate::<flags::icons::IconSeparator as std::default::Default>::default();
+<flags::icons::IconSeparator>::default();
-----------------
src/flags/ignore_globs.rs <flags::ignore_globs::IgnoreGlobs as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::ignore_globs::IgnoreGlobs
+p0.clone();
+<flags::ignore_globs::IgnoreGlobs as std::clone::Clone>::clone(p0);
+crate::<flags::ignore_globs::IgnoreGlobs as std::clone::Clone>::clone(p0);
+<flags::ignore_globs::IgnoreGlobs>::clone(p0);
-----------------
src/flags/ignore_globs.rs <flags::ignore_globs::IgnoreGlobs as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::ignore_globs::IgnoreGlobs
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::ignore_globs::IgnoreGlobs as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::ignore_globs::IgnoreGlobs as std::fmt::Debug>::fmt(p0, p1);
+<flags::ignore_globs::IgnoreGlobs>::fmt(p0, p1);
-----------------
src/flags/ignore_globs.rs flags::ignore_globs::IgnoreGlobs::configure_from
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::ignore_globs::IgnoreGlobs::configure_from(p0, p1);
+crate::flags::ignore_globs::IgnoreGlobs::configure_from(p0, p1);
+<flags::ignore_globs::IgnoreGlobs>::configure_from(p0, p1);
-----------------
src/flags/ignore_globs.rs flags::ignore_globs::IgnoreGlobs::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+flags::ignore_globs::IgnoreGlobs::from_arg_matches(p0);
+crate::flags::ignore_globs::IgnoreGlobs::from_arg_matches(p0);
+<flags::ignore_globs::IgnoreGlobs>::from_arg_matches(p0);
-----------------
src/flags/ignore_globs.rs flags::ignore_globs::IgnoreGlobs::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::ignore_globs::IgnoreGlobs::from_config(p0);
+crate::flags::ignore_globs::IgnoreGlobs::from_config(p0);
+<flags::ignore_globs::IgnoreGlobs>::from_config(p0);
-----------------
src/flags/ignore_globs.rs flags::ignore_globs::IgnoreGlobs::create_glob
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+flags::ignore_globs::IgnoreGlobs::create_glob(&p0);
+crate::flags::ignore_globs::IgnoreGlobs::create_glob(&p0);
+<flags::ignore_globs::IgnoreGlobs>::create_glob(&p0);
-----------------
src/flags/ignore_globs.rs flags::ignore_globs::IgnoreGlobs::create_glob_set
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // globset::GlobSetBuilder
+flags::ignore_globs::IgnoreGlobs::create_glob_set(p0);
+crate::flags::ignore_globs::IgnoreGlobs::create_glob_set(p0);
+<flags::ignore_globs::IgnoreGlobs>::create_glob_set(p0);
-----------------
src/flags/ignore_globs.rs <flags::ignore_globs::IgnoreGlobs as std::default::Default>::default
deps:{}
candidates:{}
+<flags::ignore_globs::IgnoreGlobs as std::default::Default>::default();
+crate::<flags::ignore_globs::IgnoreGlobs as std::default::Default>::default();
+<flags::ignore_globs::IgnoreGlobs>::default();
-----------------
src/flags/indicators.rs <flags::indicators::Indicators as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::indicators::Indicators
+p0.clone();
+<flags::indicators::Indicators as std::clone::Clone>::clone(p0);
+crate::<flags::indicators::Indicators as std::clone::Clone>::clone(p0);
+<flags::indicators::Indicators>::clone(p0);
-----------------
src/flags/indicators.rs <flags::indicators::Indicators as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::indicators::Indicators
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::indicators::Indicators as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::indicators::Indicators as std::fmt::Debug>::fmt(p0, p1);
+<flags::indicators::Indicators>::fmt(p0, p1);
-----------------
src/flags/indicators.rs <flags::indicators::Indicators as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::indicators::Indicators
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::indicators::Indicators
+p0.eq(p1);
+<flags::indicators::Indicators as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::indicators::Indicators as std::cmp::PartialEq>::eq(p0, p1);
+<flags::indicators::Indicators>::eq(p0, p1);
-----------------
src/flags/indicators.rs <flags::indicators::Indicators as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::indicators::Indicators
+p0.assert_receiver_is_total_eq();
+<flags::indicators::Indicators as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::indicators::Indicators as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::indicators::Indicators>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/indicators.rs <flags::indicators::Indicators as std::default::Default>::default
deps:{}
candidates:{}
+<flags::indicators::Indicators as std::default::Default>::default();
+crate::<flags::indicators::Indicators as std::default::Default>::default();
+<flags::indicators::Indicators>::default();
-----------------
src/flags/indicators.rs <flags::indicators::Indicators as flags::Configurable<flags::indicators::Indicators>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::indicators::Indicators as flags::Configurable<flags::indicators::Indicators>>::from_arg_matches(p0);
+crate::<flags::indicators::Indicators as flags::Configurable<flags::indicators::Indicators>>::from_arg_matches(p0);
+<flags::indicators::Indicators>::from_arg_matches(p0);
-----------------
src/flags/indicators.rs <flags::indicators::Indicators as flags::Configurable<flags::indicators::Indicators>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::indicators::Indicators as flags::Configurable<flags::indicators::Indicators>>::from_config(p0);
+crate::<flags::indicators::Indicators as flags::Configurable<flags::indicators::Indicators>>::from_config(p0);
+<flags::indicators::Indicators>::from_config(p0);
-----------------
src/flags/layout.rs <flags::layout::Layout as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::layout::Layout
+p0.clone();
+<flags::layout::Layout as std::clone::Clone>::clone(p0);
+crate::<flags::layout::Layout as std::clone::Clone>::clone(p0);
+<flags::layout::Layout>::clone(p0);
-----------------
src/flags/layout.rs <flags::layout::Layout as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::layout::Layout
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::layout::Layout as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::layout::Layout as std::fmt::Debug>::fmt(p0, p1);
+<flags::layout::Layout>::fmt(p0, p1);
-----------------
src/flags/layout.rs <flags::layout::Layout as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::layout::Layout
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::layout::Layout
+p0.eq(p1);
+<flags::layout::Layout as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::layout::Layout as std::cmp::PartialEq>::eq(p0, p1);
+<flags::layout::Layout>::eq(p0, p1);
-----------------
src/flags/layout.rs <flags::layout::Layout as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::layout::Layout
+p0.assert_receiver_is_total_eq();
+<flags::layout::Layout as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::layout::Layout as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::layout::Layout>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/layout.rs flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize":{"__D":["config_file::_::_serde::de::value::U32Deserializer<E>","serde_yaml::value::de::SeqDeserializer","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_yaml::Value","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","serde_yaml::Number","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::I16Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize(p0);
+crate::flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize(p0);
+<flags::layout::Layout>::deserialize(p0);
-----------------
src/flags/layout.rs <flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/flags/layout.rs <flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/flags/layout.rs <flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/flags/layout.rs <flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/flags/layout.rs <flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::U128Deserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::MapAccessDeserializer<A>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","serde_yaml::Value","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","&'a serde_yaml::Number","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::F64Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field>::deserialize(p0);
-----------------
src/flags/layout.rs <flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/flags/layout.rs <flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["std::marker::Sized","config_file::_::_serde::de::EnumAccess"]}}
candidates:{"<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::content::EnumDeserializer<'de, E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_yaml::de::EnumAccess<'a, 'r>","serde_yaml::value::de::EnumDeserializer","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_yaml::de::UnitVariantAccess<'a, 'r>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::__private::de::content::EnumRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/flags/layout.rs <flags::layout::Layout as flags::Configurable<flags::layout::Layout>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::layout::Layout as flags::Configurable<flags::layout::Layout>>::from_arg_matches(p0);
+crate::<flags::layout::Layout as flags::Configurable<flags::layout::Layout>>::from_arg_matches(p0);
+<flags::layout::Layout>::from_arg_matches(p0);
-----------------
src/flags/layout.rs <flags::layout::Layout as flags::Configurable<flags::layout::Layout>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::layout::Layout as flags::Configurable<flags::layout::Layout>>::from_config(p0);
+crate::<flags::layout::Layout as flags::Configurable<flags::layout::Layout>>::from_config(p0);
+<flags::layout::Layout>::from_config(p0);
-----------------
src/flags/layout.rs <flags::layout::Layout as std::default::Default>::default
deps:{}
candidates:{}
+<flags::layout::Layout as std::default::Default>::default();
+crate::<flags::layout::Layout as std::default::Default>::default();
+<flags::layout::Layout>::default();
-----------------
src/flags/permission.rs <flags::permission::PermissionFlag as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::permission::PermissionFlag
+p0.clone();
+<flags::permission::PermissionFlag as std::clone::Clone>::clone(p0);
+crate::<flags::permission::PermissionFlag as std::clone::Clone>::clone(p0);
+<flags::permission::PermissionFlag>::clone(p0);
-----------------
src/flags/permission.rs <flags::permission::PermissionFlag as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::permission::PermissionFlag
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::permission::PermissionFlag as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::permission::PermissionFlag as std::fmt::Debug>::fmt(p0, p1);
+<flags::permission::PermissionFlag>::fmt(p0, p1);
-----------------
src/flags/permission.rs <flags::permission::PermissionFlag as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::permission::PermissionFlag
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::permission::PermissionFlag
+p0.eq(p1);
+<flags::permission::PermissionFlag as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::permission::PermissionFlag as std::cmp::PartialEq>::eq(p0, p1);
+<flags::permission::PermissionFlag>::eq(p0, p1);
-----------------
src/flags/permission.rs <flags::permission::PermissionFlag as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::permission::PermissionFlag
+p0.assert_receiver_is_total_eq();
+<flags::permission::PermissionFlag as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::permission::PermissionFlag as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::permission::PermissionFlag>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/permission.rs flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize":{"__D":["config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U8Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","serde_yaml::Value","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","&'a serde_yaml::Number","serde_yaml::Number","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize(p0);
+crate::flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize(p0);
+<flags::permission::PermissionFlag>::deserialize(p0);
-----------------
src/flags/permission.rs <flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/flags/permission.rs <flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/flags/permission.rs <flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/flags/permission.rs <flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/flags/permission.rs <flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::U32Deserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","serde_yaml::Value","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::CharDeserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","serde_yaml::Number","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","serde_yaml::value::de::MapDeserializer"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Field>::deserialize(p0);
-----------------
src/flags/permission.rs <flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/flags/permission.rs <flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["std::marker::Sized","config_file::_::_serde::de::EnumAccess"]}}
candidates:{"<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["serde_yaml::value::de::EnumDeserializer","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_yaml::de::EnumAccess<'a, 'r>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","serde_yaml::de::UnitVariantAccess<'a, 'r>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::__private::de::content::EnumDeserializer<'de, E>","config_file::_::_serde::__private::de::content::EnumRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<flags::permission::_::<impl config_file::_::_serde::Deserialize<'de> for flags::permission::PermissionFlag>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/flags/permission.rs flags::permission::PermissionFlag::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+flags::permission::PermissionFlag::from_str(&p0);
+crate::flags::permission::PermissionFlag::from_str(&p0);
+<flags::permission::PermissionFlag>::from_str(&p0);
-----------------
src/flags/permission.rs <flags::permission::PermissionFlag as flags::Configurable<flags::permission::PermissionFlag>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::permission::PermissionFlag as flags::Configurable<flags::permission::PermissionFlag>>::from_arg_matches(p0);
+crate::<flags::permission::PermissionFlag as flags::Configurable<flags::permission::PermissionFlag>>::from_arg_matches(p0);
+<flags::permission::PermissionFlag>::from_arg_matches(p0);
-----------------
src/flags/permission.rs <flags::permission::PermissionFlag as flags::Configurable<flags::permission::PermissionFlag>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::permission::PermissionFlag as flags::Configurable<flags::permission::PermissionFlag>>::from_config(p0);
+crate::<flags::permission::PermissionFlag as flags::Configurable<flags::permission::PermissionFlag>>::from_config(p0);
+<flags::permission::PermissionFlag>::from_config(p0);
-----------------
src/flags/permission.rs <flags::permission::PermissionFlag as std::default::Default>::default
deps:{}
candidates:{}
+<flags::permission::PermissionFlag as std::default::Default>::default();
+crate::<flags::permission::PermissionFlag as std::default::Default>::default();
+<flags::permission::PermissionFlag>::default();
-----------------
src/flags/recursion.rs <flags::recursion::Recursion as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::recursion::Recursion
+p0.clone();
+<flags::recursion::Recursion as std::clone::Clone>::clone(p0);
+crate::<flags::recursion::Recursion as std::clone::Clone>::clone(p0);
+<flags::recursion::Recursion>::clone(p0);
-----------------
src/flags/recursion.rs <flags::recursion::Recursion as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::recursion::Recursion
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::recursion::Recursion as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::recursion::Recursion as std::fmt::Debug>::fmt(p0, p1);
+<flags::recursion::Recursion>::fmt(p0, p1);
-----------------
src/flags/recursion.rs <flags::recursion::Recursion as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::recursion::Recursion
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::recursion::Recursion
+p0.eq(p1);
+<flags::recursion::Recursion as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::recursion::Recursion as std::cmp::PartialEq>::eq(p0, p1);
+<flags::recursion::Recursion>::eq(p0, p1);
-----------------
src/flags/recursion.rs <flags::recursion::Recursion as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::recursion::Recursion
+p0.assert_receiver_is_total_eq();
+<flags::recursion::Recursion as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::recursion::Recursion as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::recursion::Recursion>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/recursion.rs flags::recursion::Recursion::configure_from
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::recursion::Recursion::configure_from(p0, p1);
+crate::flags::recursion::Recursion::configure_from(p0, p1);
+<flags::recursion::Recursion>::configure_from(p0, p1);
-----------------
src/flags/recursion.rs flags::recursion::Recursion::enabled_from
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::recursion::Recursion::enabled_from(p0, p1);
+crate::flags::recursion::Recursion::enabled_from(p0, p1);
+<flags::recursion::Recursion>::enabled_from(p0, p1);
-----------------
src/flags/recursion.rs flags::recursion::Recursion::enabled_from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+flags::recursion::Recursion::enabled_from_arg_matches(p0);
+crate::flags::recursion::Recursion::enabled_from_arg_matches(p0);
+<flags::recursion::Recursion>::enabled_from_arg_matches(p0);
-----------------
src/flags/recursion.rs flags::recursion::Recursion::depth_from
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::recursion::Recursion::depth_from(p0, p1);
+crate::flags::recursion::Recursion::depth_from(p0, p1);
+<flags::recursion::Recursion>::depth_from(p0, p1);
-----------------
src/flags/recursion.rs flags::recursion::Recursion::depth_from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+flags::recursion::Recursion::depth_from_arg_matches(p0);
+crate::flags::recursion::Recursion::depth_from_arg_matches(p0);
+<flags::recursion::Recursion>::depth_from_arg_matches(p0);
-----------------
src/flags/recursion.rs <flags::recursion::Recursion as std::default::Default>::default
deps:{}
candidates:{}
+<flags::recursion::Recursion as std::default::Default>::default();
+crate::<flags::recursion::Recursion as std::default::Default>::default();
+<flags::recursion::Recursion>::default();
-----------------
src/flags/size.rs <flags::size::SizeFlag as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::size::SizeFlag
+p0.clone();
+<flags::size::SizeFlag as std::clone::Clone>::clone(p0);
+crate::<flags::size::SizeFlag as std::clone::Clone>::clone(p0);
+<flags::size::SizeFlag>::clone(p0);
-----------------
src/flags/size.rs <flags::size::SizeFlag as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::size::SizeFlag
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::size::SizeFlag as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::size::SizeFlag as std::fmt::Debug>::fmt(p0, p1);
+<flags::size::SizeFlag>::fmt(p0, p1);
-----------------
src/flags/size.rs <flags::size::SizeFlag as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::size::SizeFlag
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::size::SizeFlag
+p0.eq(p1);
+<flags::size::SizeFlag as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::size::SizeFlag as std::cmp::PartialEq>::eq(p0, p1);
+<flags::size::SizeFlag>::eq(p0, p1);
-----------------
src/flags/size.rs <flags::size::SizeFlag as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::size::SizeFlag
+p0.assert_receiver_is_total_eq();
+<flags::size::SizeFlag as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::size::SizeFlag as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::size::SizeFlag>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/size.rs flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize":{"__D":["config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::U64Deserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","&'a serde_yaml::Number","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_yaml::Value","config_file::_::_serde::de::value::I64Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize(p0);
+crate::flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize(p0);
+<flags::size::SizeFlag>::deserialize(p0);
-----------------
src/flags/size.rs <flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/flags/size.rs <flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/flags/size.rs <flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/flags/size.rs <flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/flags/size.rs <flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","serde_yaml::Number","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","serde_yaml::Value","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::SeqDeserializer<I, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field>::deserialize(p0);
-----------------
src/flags/size.rs <flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/flags/size.rs <flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["config_file::_::_serde::de::EnumAccess","std::marker::Sized"]}}
candidates:{"<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::content::EnumDeserializer<'de, E>","config_file::_::_serde::__private::de::content::EnumRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::StringDeserializer<E>","serde_yaml::de::UnitVariantAccess<'a, 'r>","serde_yaml::value::de::EnumDeserializer","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::de::EnumAccess<'a, 'r>","config_file::_::_serde::de::value::U32Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/flags/size.rs flags::size::SizeFlag::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+flags::size::SizeFlag::from_str(&p0);
+crate::flags::size::SizeFlag::from_str(&p0);
+<flags::size::SizeFlag>::from_str(&p0);
-----------------
src/flags/size.rs <flags::size::SizeFlag as flags::Configurable<flags::size::SizeFlag>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::size::SizeFlag as flags::Configurable<flags::size::SizeFlag>>::from_arg_matches(p0);
+crate::<flags::size::SizeFlag as flags::Configurable<flags::size::SizeFlag>>::from_arg_matches(p0);
+<flags::size::SizeFlag>::from_arg_matches(p0);
-----------------
src/flags/size.rs <flags::size::SizeFlag as flags::Configurable<flags::size::SizeFlag>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::size::SizeFlag as flags::Configurable<flags::size::SizeFlag>>::from_config(p0);
+crate::<flags::size::SizeFlag as flags::Configurable<flags::size::SizeFlag>>::from_config(p0);
+<flags::size::SizeFlag>::from_config(p0);
-----------------
src/flags/size.rs <flags::size::SizeFlag as std::default::Default>::default
deps:{}
candidates:{}
+<flags::size::SizeFlag as std::default::Default>::default();
+crate::<flags::size::SizeFlag as std::default::Default>::default();
+<flags::size::SizeFlag>::default();
-----------------
src/flags/sorting.rs <flags::sorting::Sorting as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::Sorting
+p0.clone();
+<flags::sorting::Sorting as std::clone::Clone>::clone(p0);
+crate::<flags::sorting::Sorting as std::clone::Clone>::clone(p0);
+<flags::sorting::Sorting>::clone(p0);
-----------------
src/flags/sorting.rs <flags::sorting::Sorting as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::Sorting
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::sorting::Sorting as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::sorting::Sorting as std::fmt::Debug>::fmt(p0, p1);
+<flags::sorting::Sorting>::fmt(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::Sorting as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::Sorting
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::sorting::Sorting
+p0.eq(p1);
+<flags::sorting::Sorting as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::sorting::Sorting as std::cmp::PartialEq>::eq(p0, p1);
+<flags::sorting::Sorting>::eq(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::Sorting as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::Sorting
+p0.assert_receiver_is_total_eq();
+<flags::sorting::Sorting as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::sorting::Sorting as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::sorting::Sorting>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/sorting.rs <flags::sorting::Sorting as std::default::Default>::default
deps:{}
candidates:{}
+<flags::sorting::Sorting as std::default::Default>::default();
+crate::<flags::sorting::Sorting as std::default::Default>::default();
+<flags::sorting::Sorting>::default();
-----------------
src/flags/sorting.rs flags::sorting::Sorting::configure_from
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::sorting::Sorting::configure_from(p0, p1);
+crate::flags::sorting::Sorting::configure_from(p0, p1);
+<flags::sorting::Sorting>::configure_from(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::SortColumn as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::SortColumn
+p0.clone();
+<flags::sorting::SortColumn as std::clone::Clone>::clone(p0);
+crate::<flags::sorting::SortColumn as std::clone::Clone>::clone(p0);
+<flags::sorting::SortColumn>::clone(p0);
-----------------
src/flags/sorting.rs <flags::sorting::SortColumn as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::SortColumn
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::sorting::SortColumn as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::sorting::SortColumn as std::fmt::Debug>::fmt(p0, p1);
+<flags::sorting::SortColumn>::fmt(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::SortColumn as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::SortColumn
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::sorting::SortColumn
+p0.eq(p1);
+<flags::sorting::SortColumn as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::sorting::SortColumn as std::cmp::PartialEq>::eq(p0, p1);
+<flags::sorting::SortColumn>::eq(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::SortColumn as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::SortColumn
+p0.assert_receiver_is_total_eq();
+<flags::sorting::SortColumn as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::sorting::SortColumn as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::sorting::SortColumn>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/sorting.rs flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize":{"__D":["config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::I128Deserializer<E>","serde_yaml::Value","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","serde_yaml::Number","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U128Deserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::U64Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize(p0);
+crate::flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize(p0);
+<flags::sorting::SortColumn>::deserialize(p0);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","config_file::_::_serde::de::Error"]}}
candidates:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>","config_file::_::_serde::de::value::U16Deserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::IsizeDeserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::I128Deserializer<E>","serde_yaml::value::de::SeqDeserializer","serde_yaml::Number","serde_yaml::Value","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field>::deserialize(p0);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["std::marker::Sized","config_file::_::_serde::de::EnumAccess"]}}
candidates:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","serde_yaml::de::UnitVariantAccess<'a, 'r>","config_file::_::_serde::__private::de::content::EnumDeserializer<'de, E>","config_file::_::_serde::__private::de::content::EnumRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_yaml::value::de::EnumDeserializer","serde_yaml::de::EnumAccess<'a, 'r>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::SortColumn as flags::Configurable<flags::sorting::SortColumn>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::sorting::SortColumn as flags::Configurable<flags::sorting::SortColumn>>::from_arg_matches(p0);
+crate::<flags::sorting::SortColumn as flags::Configurable<flags::sorting::SortColumn>>::from_arg_matches(p0);
+<flags::sorting::SortColumn>::from_arg_matches(p0);
-----------------
src/flags/sorting.rs <flags::sorting::SortColumn as flags::Configurable<flags::sorting::SortColumn>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::sorting::SortColumn as flags::Configurable<flags::sorting::SortColumn>>::from_config(p0);
+crate::<flags::sorting::SortColumn as flags::Configurable<flags::sorting::SortColumn>>::from_config(p0);
+<flags::sorting::SortColumn>::from_config(p0);
-----------------
src/flags/sorting.rs <flags::sorting::SortColumn as std::default::Default>::default
deps:{}
candidates:{}
+<flags::sorting::SortColumn as std::default::Default>::default();
+crate::<flags::sorting::SortColumn as std::default::Default>::default();
+<flags::sorting::SortColumn>::default();
-----------------
src/flags/sorting.rs <flags::sorting::SortOrder as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::SortOrder
+p0.clone();
+<flags::sorting::SortOrder as std::clone::Clone>::clone(p0);
+crate::<flags::sorting::SortOrder as std::clone::Clone>::clone(p0);
+<flags::sorting::SortOrder>::clone(p0);
-----------------
src/flags/sorting.rs <flags::sorting::SortOrder as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::SortOrder
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::sorting::SortOrder as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::sorting::SortOrder as std::fmt::Debug>::fmt(p0, p1);
+<flags::sorting::SortOrder>::fmt(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::SortOrder as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::SortOrder
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::sorting::SortOrder
+p0.eq(p1);
+<flags::sorting::SortOrder as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::sorting::SortOrder as std::cmp::PartialEq>::eq(p0, p1);
+<flags::sorting::SortOrder>::eq(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::SortOrder as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::SortOrder
+p0.assert_receiver_is_total_eq();
+<flags::sorting::SortOrder as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::sorting::SortOrder as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::sorting::SortOrder>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/sorting.rs <flags::sorting::SortOrder as flags::Configurable<flags::sorting::SortOrder>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::sorting::SortOrder as flags::Configurable<flags::sorting::SortOrder>>::from_arg_matches(p0);
+crate::<flags::sorting::SortOrder as flags::Configurable<flags::sorting::SortOrder>>::from_arg_matches(p0);
+<flags::sorting::SortOrder>::from_arg_matches(p0);
-----------------
src/flags/sorting.rs <flags::sorting::SortOrder as flags::Configurable<flags::sorting::SortOrder>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::sorting::SortOrder as flags::Configurable<flags::sorting::SortOrder>>::from_config(p0);
+crate::<flags::sorting::SortOrder as flags::Configurable<flags::sorting::SortOrder>>::from_config(p0);
+<flags::sorting::SortOrder>::from_config(p0);
-----------------
src/flags/sorting.rs <flags::sorting::SortOrder as std::default::Default>::default
deps:{}
candidates:{}
+<flags::sorting::SortOrder as std::default::Default>::default();
+crate::<flags::sorting::SortOrder as std::default::Default>::default();
+<flags::sorting::SortOrder>::default();
-----------------
src/flags/sorting.rs <flags::sorting::DirGrouping as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::DirGrouping
+p0.clone();
+<flags::sorting::DirGrouping as std::clone::Clone>::clone(p0);
+crate::<flags::sorting::DirGrouping as std::clone::Clone>::clone(p0);
+<flags::sorting::DirGrouping>::clone(p0);
-----------------
src/flags/sorting.rs <flags::sorting::DirGrouping as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::DirGrouping
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::sorting::DirGrouping as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::sorting::DirGrouping as std::fmt::Debug>::fmt(p0, p1);
+<flags::sorting::DirGrouping>::fmt(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::DirGrouping as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::DirGrouping
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::sorting::DirGrouping
+p0.eq(p1);
+<flags::sorting::DirGrouping as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::sorting::DirGrouping as std::cmp::PartialEq>::eq(p0, p1);
+<flags::sorting::DirGrouping>::eq(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::DirGrouping as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::DirGrouping
+p0.assert_receiver_is_total_eq();
+<flags::sorting::DirGrouping as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::sorting::DirGrouping as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::sorting::DirGrouping>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/sorting.rs flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize":{"__D":["config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::de::value::UnitDeserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::U32Deserializer<E>","config_file::_::_serde::de::value::I64Deserializer<E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::F32Deserializer<E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","serde_yaml::Number","&'a serde_yaml::Number","config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::I32Deserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","serde_yaml::Value","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U8Deserializer<E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::I8Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize(p0);
+crate::flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize(p0);
+<flags::sorting::DirGrouping>::deserialize(p0);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_yaml::Error","config_file::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["config_file::_::_serde::de::value::Error","serde_yaml::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor as config_file::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","config_file::_::_serde::Deserializer"]}}
candidates:{"<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>":{},"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize":{"__D":["config_file::_::_serde::de::value::U64Deserializer<E>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::de::value::I128Deserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","config_file::_::_serde::de::value::I32Deserializer<E>","serde_yaml::value::de::MapDeserializer","config_file::_::_serde::__private::de::missing_field::MissingFieldDeserializer<E>","config_file::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","config_file::_::_serde::__private::de::StrDeserializer<'a, E>","config_file::_::_serde::de::value::SeqDeserializer<I, E>","config_file::_::_serde::de::value::BoolDeserializer<E>","config_file::_::_serde::__private::de::content::ContentDeserializer<'de, E>","config_file::_::_serde::__private::de::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::F32Deserializer<E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::I8Deserializer<E>","serde_yaml::value::de::SeqDeserializer","config_file::_::_serde::de::value::PairDeserializer<A, B, E>","serde_yaml::Deserializer<'de>","config_file::_::_serde::de::value::UnitDeserializer<E>","&'a serde_yaml::Number","config_file::_::_serde::de::value::CharDeserializer<E>","config_file::_::_serde::de::value::F64Deserializer<E>","config_file::_::_serde::de::value::I16Deserializer<E>","config_file::_::_serde::__private::de::content::SeqRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U16Deserializer<E>","config_file::_::_serde::de::value::U128Deserializer<E>","config_file::_::_serde::__private::de::content::SeqDeserializer<'de, E>","config_file::_::_serde::__private::de::content::MapRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::U32Deserializer<E>","serde_yaml::Number","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::U8Deserializer<E>","serde_yaml::Value","config_file::_::_serde::de::value::MapDeserializer<'de, I, E>","config_file::_::_serde::__private::de::content::ContentRefDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::UsizeDeserializer<E>","config_file::_::_serde::de::value::BytesDeserializer<'a, E>","config_file::_::_serde::de::value::I64Deserializer<E>","<&'r mut serde_yaml::de::DeserializerFromEvents<'a> as config_file::_::_serde::Deserializer<'de>>","config_file::_::_serde::__private::de::content::MapDeserializer<'de, E>","config_file::_::_serde::__private::de::FlatMapDeserializer<'a, 'de, E>","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::IsizeDeserializer<E>","config_file::_::_serde::de::value::SeqAccessDeserializer<A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field as config_file::_::_serde::Deserialize<'de>>::deserialize(p0);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field>::deserialize(p0);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/flags/sorting.rs <flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["config_file::_::_serde::de::EnumAccess","std::marker::Sized"]}}
candidates:{"<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["serde_yaml::de::UnitVariantAccess<'a, 'r>","serde_yaml::value::de::EnumDeserializer","config_file::_::_serde::de::value::CowStrDeserializer<'a, E>","config_file::_::_serde::de::value::StringDeserializer<E>","config_file::_::_serde::de::value::MapAccessDeserializer<A>","serde_yaml::de::EnumAccess<'a, 'r>","config_file::_::_serde::de::value::StrDeserializer<'a, E>","config_file::_::_serde::__private::de::content::EnumRefDeserializer<'a, 'de, E>","config_file::_::_serde::__private::de::content::EnumDeserializer<'de, E>","config_file::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","config_file::_::_serde::de::value::U32Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de> as config_file::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/flags/sorting.rs flags::sorting::DirGrouping::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+flags::sorting::DirGrouping::from_str(&p0);
+crate::flags::sorting::DirGrouping::from_str(&p0);
+<flags::sorting::DirGrouping>::from_str(&p0);
-----------------
src/flags/sorting.rs <flags::sorting::DirGrouping as flags::Configurable<flags::sorting::DirGrouping>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::sorting::DirGrouping as flags::Configurable<flags::sorting::DirGrouping>>::from_arg_matches(p0);
+crate::<flags::sorting::DirGrouping as flags::Configurable<flags::sorting::DirGrouping>>::from_arg_matches(p0);
+<flags::sorting::DirGrouping>::from_arg_matches(p0);
-----------------
src/flags/sorting.rs <flags::sorting::DirGrouping as flags::Configurable<flags::sorting::DirGrouping>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::sorting::DirGrouping as flags::Configurable<flags::sorting::DirGrouping>>::from_config(p0);
+crate::<flags::sorting::DirGrouping as flags::Configurable<flags::sorting::DirGrouping>>::from_config(p0);
+<flags::sorting::DirGrouping>::from_config(p0);
-----------------
src/flags/sorting.rs <flags::sorting::DirGrouping as std::default::Default>::default
deps:{}
candidates:{}
+<flags::sorting::DirGrouping as std::default::Default>::default();
+crate::<flags::sorting::DirGrouping as std::default::Default>::default();
+<flags::sorting::DirGrouping>::default();
-----------------
src/flags/symlink_arrow.rs <flags::symlink_arrow::SymlinkArrow as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::symlink_arrow::SymlinkArrow
+p0.clone();
+<flags::symlink_arrow::SymlinkArrow as std::clone::Clone>::clone(p0);
+crate::<flags::symlink_arrow::SymlinkArrow as std::clone::Clone>::clone(p0);
+<flags::symlink_arrow::SymlinkArrow>::clone(p0);
-----------------
src/flags/symlink_arrow.rs <flags::symlink_arrow::SymlinkArrow as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::symlink_arrow::SymlinkArrow
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::symlink_arrow::SymlinkArrow as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::symlink_arrow::SymlinkArrow as std::fmt::Debug>::fmt(p0, p1);
+<flags::symlink_arrow::SymlinkArrow>::fmt(p0, p1);
-----------------
src/flags/symlink_arrow.rs <flags::symlink_arrow::SymlinkArrow as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::symlink_arrow::SymlinkArrow
+p0.assert_receiver_is_total_eq();
+<flags::symlink_arrow::SymlinkArrow as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::symlink_arrow::SymlinkArrow as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::symlink_arrow::SymlinkArrow>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/symlink_arrow.rs <flags::symlink_arrow::SymlinkArrow as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::symlink_arrow::SymlinkArrow
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::symlink_arrow::SymlinkArrow
+p0.eq(p1);
+<flags::symlink_arrow::SymlinkArrow as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::symlink_arrow::SymlinkArrow as std::cmp::PartialEq>::eq(p0, p1);
+<flags::symlink_arrow::SymlinkArrow>::eq(p0, p1);
-----------------
src/flags/symlink_arrow.rs <flags::symlink_arrow::SymlinkArrow as flags::Configurable<flags::symlink_arrow::SymlinkArrow>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::symlink_arrow::SymlinkArrow as flags::Configurable<flags::symlink_arrow::SymlinkArrow>>::from_arg_matches(p0);
+crate::<flags::symlink_arrow::SymlinkArrow as flags::Configurable<flags::symlink_arrow::SymlinkArrow>>::from_arg_matches(p0);
+<flags::symlink_arrow::SymlinkArrow>::from_arg_matches(p0);
-----------------
src/flags/symlink_arrow.rs <flags::symlink_arrow::SymlinkArrow as flags::Configurable<flags::symlink_arrow::SymlinkArrow>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::symlink_arrow::SymlinkArrow as flags::Configurable<flags::symlink_arrow::SymlinkArrow>>::from_config(p0);
+crate::<flags::symlink_arrow::SymlinkArrow as flags::Configurable<flags::symlink_arrow::SymlinkArrow>>::from_config(p0);
+<flags::symlink_arrow::SymlinkArrow>::from_config(p0);
-----------------
src/flags/symlink_arrow.rs <flags::symlink_arrow::SymlinkArrow as std::default::Default>::default
deps:{}
candidates:{}
+<flags::symlink_arrow::SymlinkArrow as std::default::Default>::default();
+crate::<flags::symlink_arrow::SymlinkArrow as std::default::Default>::default();
+<flags::symlink_arrow::SymlinkArrow>::default();
-----------------
src/flags/symlink_arrow.rs <flags::symlink_arrow::SymlinkArrow as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::symlink_arrow::SymlinkArrow
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<flags::symlink_arrow::SymlinkArrow as std::fmt::Display>::fmt(p0, p1);
+crate::<flags::symlink_arrow::SymlinkArrow as std::fmt::Display>::fmt(p0, p1);
+<flags::symlink_arrow::SymlinkArrow>::fmt(p0, p1);
-----------------
src/flags/symlinks.rs <flags::symlinks::NoSymlink as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::symlinks::NoSymlink
+p0.clone();
+<flags::symlinks::NoSymlink as std::clone::Clone>::clone(p0);
+crate::<flags::symlinks::NoSymlink as std::clone::Clone>::clone(p0);
+<flags::symlinks::NoSymlink>::clone(p0);
-----------------
src/flags/symlinks.rs <flags::symlinks::NoSymlink as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::symlinks::NoSymlink
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::symlinks::NoSymlink as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::symlinks::NoSymlink as std::fmt::Debug>::fmt(p0, p1);
+<flags::symlinks::NoSymlink>::fmt(p0, p1);
-----------------
src/flags/symlinks.rs <flags::symlinks::NoSymlink as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::symlinks::NoSymlink
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::symlinks::NoSymlink
+p0.eq(p1);
+<flags::symlinks::NoSymlink as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::symlinks::NoSymlink as std::cmp::PartialEq>::eq(p0, p1);
+<flags::symlinks::NoSymlink>::eq(p0, p1);
-----------------
src/flags/symlinks.rs <flags::symlinks::NoSymlink as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::symlinks::NoSymlink
+p0.assert_receiver_is_total_eq();
+<flags::symlinks::NoSymlink as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::symlinks::NoSymlink as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::symlinks::NoSymlink>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/symlinks.rs <flags::symlinks::NoSymlink as std::default::Default>::default
deps:{}
candidates:{}
+<flags::symlinks::NoSymlink as std::default::Default>::default();
+crate::<flags::symlinks::NoSymlink as std::default::Default>::default();
+<flags::symlinks::NoSymlink>::default();
-----------------
src/flags/symlinks.rs <flags::symlinks::NoSymlink as flags::Configurable<flags::symlinks::NoSymlink>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::symlinks::NoSymlink as flags::Configurable<flags::symlinks::NoSymlink>>::from_arg_matches(p0);
+crate::<flags::symlinks::NoSymlink as flags::Configurable<flags::symlinks::NoSymlink>>::from_arg_matches(p0);
+<flags::symlinks::NoSymlink>::from_arg_matches(p0);
-----------------
src/flags/symlinks.rs <flags::symlinks::NoSymlink as flags::Configurable<flags::symlinks::NoSymlink>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::symlinks::NoSymlink as flags::Configurable<flags::symlinks::NoSymlink>>::from_config(p0);
+crate::<flags::symlinks::NoSymlink as flags::Configurable<flags::symlinks::NoSymlink>>::from_config(p0);
+<flags::symlinks::NoSymlink>::from_config(p0);
-----------------
src/flags/total_size.rs <flags::total_size::TotalSize as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::total_size::TotalSize
+p0.clone();
+<flags::total_size::TotalSize as std::clone::Clone>::clone(p0);
+crate::<flags::total_size::TotalSize as std::clone::Clone>::clone(p0);
+<flags::total_size::TotalSize>::clone(p0);
-----------------
src/flags/total_size.rs <flags::total_size::TotalSize as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::total_size::TotalSize
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::total_size::TotalSize as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::total_size::TotalSize as std::fmt::Debug>::fmt(p0, p1);
+<flags::total_size::TotalSize>::fmt(p0, p1);
-----------------
src/flags/total_size.rs <flags::total_size::TotalSize as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::total_size::TotalSize
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::total_size::TotalSize
+p0.eq(p1);
+<flags::total_size::TotalSize as std::cmp::PartialEq>::eq(p0, p1);
+crate::<flags::total_size::TotalSize as std::cmp::PartialEq>::eq(p0, p1);
+<flags::total_size::TotalSize>::eq(p0, p1);
-----------------
src/flags/total_size.rs <flags::total_size::TotalSize as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::total_size::TotalSize
+p0.assert_receiver_is_total_eq();
+<flags::total_size::TotalSize as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<flags::total_size::TotalSize as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<flags::total_size::TotalSize>::assert_receiver_is_total_eq(p0);
-----------------
src/flags/total_size.rs <flags::total_size::TotalSize as std::default::Default>::default
deps:{}
candidates:{}
+<flags::total_size::TotalSize as std::default::Default>::default();
+crate::<flags::total_size::TotalSize as std::default::Default>::default();
+<flags::total_size::TotalSize>::default();
-----------------
src/flags/total_size.rs <flags::total_size::TotalSize as flags::Configurable<flags::total_size::TotalSize>>::from_arg_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
+<flags::total_size::TotalSize as flags::Configurable<flags::total_size::TotalSize>>::from_arg_matches(p0);
+crate::<flags::total_size::TotalSize as flags::Configurable<flags::total_size::TotalSize>>::from_arg_matches(p0);
+<flags::total_size::TotalSize>::from_arg_matches(p0);
-----------------
src/flags/total_size.rs <flags::total_size::TotalSize as flags::Configurable<flags::total_size::TotalSize>>::from_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+<flags::total_size::TotalSize as flags::Configurable<flags::total_size::TotalSize>>::from_config(p0);
+crate::<flags::total_size::TotalSize as flags::Configurable<flags::total_size::TotalSize>>::from_config(p0);
+<flags::total_size::TotalSize>::from_config(p0);
-----------------
src/flags.rs <flags::Flags as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+p0.clone();
+<flags::Flags as std::clone::Clone>::clone(p0);
+crate::<flags::Flags as std::clone::Clone>::clone(p0);
+<flags::Flags>::clone(p0);
-----------------
src/flags.rs <flags::Flags as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // flags::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<flags::Flags as std::fmt::Debug>::fmt(p0, p1);
+crate::<flags::Flags as std::fmt::Debug>::fmt(p0, p1);
+<flags::Flags>::fmt(p0, p1);
-----------------
src/flags.rs <flags::Flags as std::default::Default>::default
deps:{}
candidates:{}
+<flags::Flags as std::default::Default>::default();
+crate::<flags::Flags as std::default::Default>::default();
+<flags::Flags>::default();
-----------------
src/flags.rs flags::Flags::configure_from
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // clap::ArgMatches<'_>
let mut p1 = & MaybeUninit::uninit().assume_init(); // config_file::Config
+flags::Flags::configure_from(p0, p1);
+crate::flags::Flags::configure_from(p0, p1);
+<flags::Flags>::configure_from(p0, p1);
-----------------
src/icon.rs <icon::Theme as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // icon::Theme
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<icon::Theme as std::fmt::Debug>::fmt(p0, p1);
+crate::<icon::Theme as std::fmt::Debug>::fmt(p0, p1);
+<icon::Theme>::fmt(p0, p1);
-----------------
src/icon.rs <icon::Theme as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // icon::Theme
+p0.clone();
+<icon::Theme as std::clone::Clone>::clone(p0);
+crate::<icon::Theme as std::clone::Clone>::clone(p0);
+<icon::Theme>::clone(p0);
-----------------
src/icon.rs <icon::Theme as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // icon::Theme
+p0.assert_receiver_is_total_eq();
+<icon::Theme as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<icon::Theme as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<icon::Theme>::assert_receiver_is_total_eq(p0);
-----------------
src/icon.rs <icon::Theme as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // icon::Theme
let mut p1 = & MaybeUninit::uninit().assume_init(); // icon::Theme
+p0.eq(p1);
+<icon::Theme as std::cmp::PartialEq>::eq(p0, p1);
+crate::<icon::Theme as std::cmp::PartialEq>::eq(p0, p1);
+<icon::Theme>::eq(p0, p1);
-----------------
src/icon.rs icon::Icons::new
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // icon::Theme
let mut p1 = std::string::String::new(); // None+std::string::String
+icon::Icons::new(p0, p1);
+crate::icon::Icons::new(p0, p1);
+<icon::Icons>::new(p0, p1);
-----------------
src/icon.rs icon::Icons::get
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // icon::Icons
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
+p0.get(p1);
+icon::Icons::get(p0, p1);
+crate::icon::Icons::get(p0, p1);
+<icon::Icons>::get(p0, p1);
-----------------
src/icon.rs icon::Icons::get_default_icons_by_name
deps:{}
candidates:{}
+icon::Icons::get_default_icons_by_name();
+crate::icon::Icons::get_default_icons_by_name();
+<icon::Icons>::get_default_icons_by_name();
-----------------
src/icon.rs icon::Icons::get_default_icons_by_extension
deps:{}
candidates:{}
+icon::Icons::get_default_icons_by_extension();
+crate::icon::Icons::get_default_icons_by_extension();
+<icon::Icons>::get_default_icons_by_extension();
-----------------
src/meta/access_control.rs <meta::access_control::AccessControl as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::access_control::AccessControl
+p0.clone();
+<meta::access_control::AccessControl as std::clone::Clone>::clone(p0);
+crate::<meta::access_control::AccessControl as std::clone::Clone>::clone(p0);
+<meta::access_control::AccessControl>::clone(p0);
-----------------
src/meta/access_control.rs <meta::access_control::AccessControl as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::access_control::AccessControl
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::access_control::AccessControl as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::access_control::AccessControl as std::fmt::Debug>::fmt(p0, p1);
+<meta::access_control::AccessControl>::fmt(p0, p1);
-----------------
src/meta/access_control.rs meta::access_control::AccessControl::for_path
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::path::Path
+meta::access_control::AccessControl::for_path(p0);
+crate::meta::access_control::AccessControl::for_path(p0);
+<meta::access_control::AccessControl>::for_path(p0);
-----------------
src/meta/access_control.rs meta::access_control::AccessControl::from_data
deps:{}
candidates:{}
let mut p0 = true; // None+bool
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p2 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+meta::access_control::AccessControl::from_data(p0, p1, p2);
+crate::meta::access_control::AccessControl::from_data(p0, p1, p2);
+<meta::access_control::AccessControl>::from_data(p0, p1, p2);
-----------------
src/meta/access_control.rs meta::access_control::AccessControl::render_method
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::access_control::AccessControl
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
+p0.render_method(p1);
+meta::access_control::AccessControl::render_method(p0, p1);
+crate::meta::access_control::AccessControl::render_method(p0, p1);
+<meta::access_control::AccessControl>::render_method(p0, p1);
-----------------
src/meta/access_control.rs meta::access_control::AccessControl::render_context
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::access_control::AccessControl
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
+p0.render_context(p1);
+meta::access_control::AccessControl::render_context(p0, p1);
+crate::meta::access_control::AccessControl::render_context(p0, p1);
+<meta::access_control::AccessControl>::render_context(p0, p1);
-----------------
src/meta/access_control.rs meta::access_control::Method::name
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::access_control::Method
+p0.name();
+meta::access_control::Method::name(p0);
+crate::meta::access_control::Method::name(p0);
+<meta::access_control::Method>::name(p0);
-----------------
src/meta/date.rs <meta::date::Date as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::date::Date
+p0.clone();
+<meta::date::Date as std::clone::Clone>::clone(p0);
+crate::<meta::date::Date as std::clone::Clone>::clone(p0);
+<meta::date::Date>::clone(p0);
-----------------
src/meta/date.rs <meta::date::Date as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::date::Date
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::date::Date as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::date::Date as std::fmt::Debug>::fmt(p0, p1);
+<meta::date::Date>::fmt(p0, p1);
-----------------
src/meta/date.rs <meta::date::Date as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::date::Date
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::date::Date
+p0.eq(p1);
+<meta::date::Date as std::cmp::PartialEq>::eq(p0, p1);
+crate::<meta::date::Date as std::cmp::PartialEq>::eq(p0, p1);
+<meta::date::Date>::eq(p0, p1);
-----------------
src/meta/date.rs <meta::date::Date as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::date::Date
+p0.assert_receiver_is_total_eq();
+<meta::date::Date as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<meta::date::Date as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<meta::date::Date>::assert_receiver_is_total_eq(p0);
-----------------
src/meta/date.rs <meta::date::Date as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::date::Date
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::date::Date
+p0.partial_cmp(p1);
+<meta::date::Date as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<meta::date::Date as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<meta::date::Date>::partial_cmp(p0, p1);
-----------------
src/meta/date.rs <meta::date::Date as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::date::Date
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::date::Date
+p0.cmp(p1);
+<meta::date::Date as std::cmp::Ord>::cmp(p0, p1);
+crate::<meta::date::Date as std::cmp::Ord>::cmp(p0, p1);
+<meta::date::Date>::cmp(p0, p1);
-----------------
src/meta/date.rs <meta::date::Date as std::convert::From<std::time::SystemTime>>::from
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::SystemTime
+<meta::date::Date as std::convert::From<std::time::SystemTime>>::from(p0);
+crate::<meta::date::Date as std::convert::From<std::time::SystemTime>>::from(p0);
+<meta::date::Date>::from(p0);
-----------------
src/meta/date.rs <meta::date::Date as std::convert::From<&'a std::fs::Metadata>>::from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::fs::Metadata
+<meta::date::Date as std::convert::From<&'a std::fs::Metadata>>::from(p0);
+crate::<meta::date::Date as std::convert::From<&'a std::fs::Metadata>>::from(p0);
+<meta::date::Date>::from(p0);
-----------------
src/meta/date.rs meta::date::Date::render
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::date::Date
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p2 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+p0.render(p1, p2);
+meta::date::Date::render(p0, p1, p2);
+crate::meta::date::Date::render(p0, p1, p2);
+<meta::date::Date>::render(p0, p1, p2);
-----------------
src/meta/date.rs meta::date::Date::date_string
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::date::Date
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+p0.date_string(p1);
+meta::date::Date::date_string(p0, p1);
+crate::meta::date::Date::date_string(p0, p1);
+<meta::date::Date>::date_string(p0, p1);
-----------------
src/meta/filetype.rs <meta::filetype::FileType as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::filetype::FileType
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::filetype::FileType as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::filetype::FileType as std::fmt::Debug>::fmt(p0, p1);
+<meta::filetype::FileType>::fmt(p0, p1);
-----------------
src/meta/filetype.rs <meta::filetype::FileType as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::filetype::FileType
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::filetype::FileType
+p0.eq(p1);
+<meta::filetype::FileType as std::cmp::PartialEq>::eq(p0, p1);
+crate::<meta::filetype::FileType as std::cmp::PartialEq>::eq(p0, p1);
+<meta::filetype::FileType>::eq(p0, p1);
-----------------
src/meta/filetype.rs <meta::filetype::FileType as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::filetype::FileType
+p0.assert_receiver_is_total_eq();
+<meta::filetype::FileType as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<meta::filetype::FileType as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<meta::filetype::FileType>::assert_receiver_is_total_eq(p0);
-----------------
src/meta/filetype.rs <meta::filetype::FileType as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::filetype::FileType
+p0.clone();
+<meta::filetype::FileType as std::clone::Clone>::clone(p0);
+crate::<meta::filetype::FileType as std::clone::Clone>::clone(p0);
+<meta::filetype::FileType>::clone(p0);
-----------------
src/meta/filetype.rs meta::filetype::FileType::new
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::fs::Metadata
let mut p1 = MaybeUninit::uninit().assume_init(); // std::option::Option<&std::fs::Metadata>
let mut p2 = & MaybeUninit::uninit().assume_init(); // meta::permissions::Permissions
+meta::filetype::FileType::new(p0, p1, p2);
+crate::meta::filetype::FileType::new(p0, p1, p2);
+<meta::filetype::FileType>::new(p0, p1, p2);
-----------------
src/meta/filetype.rs meta::filetype::FileType::is_dirlike
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // meta::filetype::FileType
+p0.is_dirlike();
+meta::filetype::FileType::is_dirlike(p0);
+crate::meta::filetype::FileType::is_dirlike(p0);
+<meta::filetype::FileType>::is_dirlike(p0);
-----------------
src/meta/filetype.rs meta::filetype::FileType::render
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // meta::filetype::FileType
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
+p0.render(p1);
+meta::filetype::FileType::render(p0, p1);
+crate::meta::filetype::FileType::render(p0, p1);
+<meta::filetype::FileType>::render(p0, p1);
-----------------
src/meta/indicator.rs <meta::indicator::Indicator as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::indicator::Indicator
+p0.clone();
+<meta::indicator::Indicator as std::clone::Clone>::clone(p0);
+crate::<meta::indicator::Indicator as std::clone::Clone>::clone(p0);
+<meta::indicator::Indicator>::clone(p0);
-----------------
src/meta/indicator.rs <meta::indicator::Indicator as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::indicator::Indicator
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::indicator::Indicator as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::indicator::Indicator as std::fmt::Debug>::fmt(p0, p1);
+<meta::indicator::Indicator>::fmt(p0, p1);
-----------------
src/meta/indicator.rs <meta::indicator::Indicator as std::convert::From<meta::filetype::FileType>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // meta::filetype::FileType
+<meta::indicator::Indicator as std::convert::From<meta::filetype::FileType>>::from(p0);
+crate::<meta::indicator::Indicator as std::convert::From<meta::filetype::FileType>>::from(p0);
+<meta::indicator::Indicator>::from(p0);
-----------------
src/meta/indicator.rs meta::indicator::Indicator::render
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::indicator::Indicator
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+p0.render(p1);
+meta::indicator::Indicator::render(p0, p1);
+crate::meta::indicator::Indicator::render(p0, p1);
+<meta::indicator::Indicator>::render(p0, p1);
-----------------
src/meta/inode.rs <meta::inode::INode as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::inode::INode
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::inode::INode as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::inode::INode as std::fmt::Debug>::fmt(p0, p1);
+<meta::inode::INode>::fmt(p0, p1);
-----------------
src/meta/inode.rs <meta::inode::INode as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::inode::INode
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::inode::INode
+p0.eq(p1);
+<meta::inode::INode as std::cmp::PartialEq>::eq(p0, p1);
+crate::<meta::inode::INode as std::cmp::PartialEq>::eq(p0, p1);
+<meta::inode::INode>::eq(p0, p1);
-----------------
src/meta/inode.rs <meta::inode::INode as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::inode::INode
+p0.assert_receiver_is_total_eq();
+<meta::inode::INode as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<meta::inode::INode as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<meta::inode::INode>::assert_receiver_is_total_eq(p0);
-----------------
src/meta/inode.rs <meta::inode::INode as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::inode::INode
+p0.clone();
+<meta::inode::INode as std::clone::Clone>::clone(p0);
+crate::<meta::inode::INode as std::clone::Clone>::clone(p0);
+<meta::inode::INode>::clone(p0);
-----------------
src/meta/inode.rs <meta::inode::INode as std::convert::From<&'a std::fs::Metadata>>::from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::fs::Metadata
+<meta::inode::INode as std::convert::From<&'a std::fs::Metadata>>::from(p0);
+crate::<meta::inode::INode as std::convert::From<&'a std::fs::Metadata>>::from(p0);
+<meta::inode::INode>::from(p0);
-----------------
src/meta/inode.rs meta::inode::INode::render
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::inode::INode
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
+p0.render(p1);
+meta::inode::INode::render(p0, p1);
+crate::meta::inode::INode::render(p0, p1);
+<meta::inode::INode>::render(p0, p1);
-----------------
src/meta/links.rs <meta::links::Links as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::links::Links
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::links::Links as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::links::Links as std::fmt::Debug>::fmt(p0, p1);
+<meta::links::Links>::fmt(p0, p1);
-----------------
src/meta/links.rs <meta::links::Links as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::links::Links
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::links::Links
+p0.eq(p1);
+<meta::links::Links as std::cmp::PartialEq>::eq(p0, p1);
+crate::<meta::links::Links as std::cmp::PartialEq>::eq(p0, p1);
+<meta::links::Links>::eq(p0, p1);
-----------------
src/meta/links.rs <meta::links::Links as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::links::Links
+p0.assert_receiver_is_total_eq();
+<meta::links::Links as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<meta::links::Links as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<meta::links::Links>::assert_receiver_is_total_eq(p0);
-----------------
src/meta/links.rs <meta::links::Links as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::links::Links
+p0.clone();
+<meta::links::Links as std::clone::Clone>::clone(p0);
+crate::<meta::links::Links as std::clone::Clone>::clone(p0);
+<meta::links::Links>::clone(p0);
-----------------
src/meta/links.rs <meta::links::Links as std::convert::From<&'a std::fs::Metadata>>::from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::fs::Metadata
+<meta::links::Links as std::convert::From<&'a std::fs::Metadata>>::from(p0);
+crate::<meta::links::Links as std::convert::From<&'a std::fs::Metadata>>::from(p0);
+<meta::links::Links>::from(p0);
-----------------
src/meta/links.rs meta::links::Links::render
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::links::Links
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
+p0.render(p1);
+meta::links::Links::render(p0, p1);
+crate::meta::links::Links::render(p0, p1);
+<meta::links::Links>::render(p0, p1);
-----------------
src/meta/name.rs <meta::name::DisplayOption<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::DisplayOption<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::name::DisplayOption<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::name::DisplayOption<'a> as std::fmt::Debug>::fmt(p0, p1);
+<meta::name::DisplayOption<'a>>::fmt(p0, p1);
-----------------
src/meta/name.rs <meta::name::Name as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
+p0.clone();
+<meta::name::Name as std::clone::Clone>::clone(p0);
+crate::<meta::name::Name as std::clone::Clone>::clone(p0);
+<meta::name::Name>::clone(p0);
-----------------
src/meta/name.rs <meta::name::Name as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::name::Name as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::name::Name as std::fmt::Debug>::fmt(p0, p1);
+<meta::name::Name>::fmt(p0, p1);
-----------------
src/meta/name.rs <meta::name::Name as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
+p0.assert_receiver_is_total_eq();
+<meta::name::Name as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<meta::name::Name as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<meta::name::Name>::assert_receiver_is_total_eq(p0);
-----------------
src/meta/name.rs meta::name::Name::new
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::path::Path
let mut p1 = MaybeUninit::uninit().assume_init(); // meta::filetype::FileType
+meta::name::Name::new(p0, p1);
+crate::meta::name::Name::new(p0, p1);
+<meta::name::Name>::new(p0, p1);
-----------------
src/meta/name.rs meta::name::Name::file_name
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
+p0.file_name();
+meta::name::Name::file_name(p0);
+crate::meta::name::Name::file_name(p0);
+<meta::name::Name>::file_name(p0);
-----------------
src/meta/name.rs meta::name::Name::relative_path
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"meta::name::Name::relative_path":{"T":["std::clone::Clone","std::marker::Sized","std::convert::AsRef"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"meta::name::Name::relative_path":{"T":["std::string::Drain<'a>","<&T as std::convert::AsRef<U>>","std::path::Component<'_>","std::clone::impls::<impl std::clone::Clone for &T>","std::rc::Rc<T>","<&mut T as std::convert::AsRef<U>>","std::boxed::Box<T, A>","std::vec::IntoIter<T, A>","std::path::Components<'_>","std::sync::Arc<T>","std::slice::Iter<'_, T>","core::num::dec2flt::common::AsciiStr<'a>","std::ffi::OsStr","std::path::Path","std::ffi::CString","std::path::Iter<'_>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.relative_path(p1);
+meta::name::Name::relative_path(p0, p1);
+crate::meta::name::Name::relative_path(p0, p1);
+<meta::name::Name>::relative_path(p0, p1);
-----------------
src/meta/name.rs meta::name::Name::escape
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
let mut p1 = "sample"; // None+&str
+p0.escape(&p1);
+meta::name::Name::escape(p0, &p1);
+crate::meta::name::Name::escape(p0, &p1);
+<meta::name::Name>::escape(p0, &p1);
-----------------
src/meta/name.rs meta::name::Name::hyperlink
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
let mut p1 = std::string::String::new(); // None+std::string::String
let mut p2 = MaybeUninit::uninit().assume_init(); // flags::hyperlink::HyperlinkOption
+p0.hyperlink(p1, p2);
+meta::name::Name::hyperlink(p0, p1, p2);
+crate::meta::name::Name::hyperlink(p0, p1, p2);
+<meta::name::Name>::hyperlink(p0, p1, p2);
-----------------
src/meta/name.rs meta::name::Name::render
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p2 = & MaybeUninit::uninit().assume_init(); // icon::Icons
let mut p3 = & MaybeUninit::uninit().assume_init(); // meta::name::DisplayOption<'_>
let mut p4 = MaybeUninit::uninit().assume_init(); // flags::hyperlink::HyperlinkOption
+p0.render(p1, p2, p3, p4);
+meta::name::Name::render(p0, p1, p2, p3, p4);
+crate::meta::name::Name::render(p0, p1, p2, p3, p4);
+<meta::name::Name>::render(p0, p1, p2, p3, p4);
-----------------
src/meta/name.rs meta::name::Name::extension
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
+p0.extension();
+meta::name::Name::extension(p0);
+crate::meta::name::Name::extension(p0);
+<meta::name::Name>::extension(p0);
-----------------
src/meta/name.rs meta::name::Name::file_type
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
+p0.file_type();
+meta::name::Name::file_type(p0);
+crate::meta::name::Name::file_type(p0);
+<meta::name::Name>::file_type(p0);
-----------------
src/meta/name.rs <meta::name::Name as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
+p0.cmp(p1);
+<meta::name::Name as std::cmp::Ord>::cmp(p0, p1);
+crate::<meta::name::Name as std::cmp::Ord>::cmp(p0, p1);
+<meta::name::Name>::cmp(p0, p1);
-----------------
src/meta/name.rs <meta::name::Name as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
+p0.partial_cmp(p1);
+<meta::name::Name as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<meta::name::Name as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<meta::name::Name>::partial_cmp(p0, p1);
-----------------
src/meta/name.rs <meta::name::Name as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::name::Name
+p0.eq(p1);
+<meta::name::Name as std::cmp::PartialEq>::eq(p0, p1);
+crate::<meta::name::Name as std::cmp::PartialEq>::eq(p0, p1);
+<meta::name::Name>::eq(p0, p1);
-----------------
src/meta/owner.rs <meta::owner::Owner as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::owner::Owner
+p0.clone();
+<meta::owner::Owner as std::clone::Clone>::clone(p0);
+crate::<meta::owner::Owner as std::clone::Clone>::clone(p0);
+<meta::owner::Owner>::clone(p0);
-----------------
src/meta/owner.rs <meta::owner::Owner as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::owner::Owner
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::owner::Owner as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::owner::Owner as std::fmt::Debug>::fmt(p0, p1);
+<meta::owner::Owner>::fmt(p0, p1);
-----------------
src/meta/owner.rs meta::owner::Owner::new
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
let mut p1 = std::string::String::new(); // None+std::string::String
+meta::owner::Owner::new(p0, p1);
+crate::meta::owner::Owner::new(p0, p1);
+<meta::owner::Owner>::new(p0, p1);
-----------------
src/meta/owner.rs <meta::owner::Owner as std::convert::From<&'a std::fs::Metadata>>::from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::fs::Metadata
+<meta::owner::Owner as std::convert::From<&'a std::fs::Metadata>>::from(p0);
+crate::<meta::owner::Owner as std::convert::From<&'a std::fs::Metadata>>::from(p0);
+<meta::owner::Owner>::from(p0);
-----------------
src/meta/owner.rs meta::owner::Owner::render_user
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::owner::Owner
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
+p0.render_user(p1);
+meta::owner::Owner::render_user(p0, p1);
+crate::meta::owner::Owner::render_user(p0, p1);
+<meta::owner::Owner>::render_user(p0, p1);
-----------------
src/meta/owner.rs meta::owner::Owner::render_group
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::owner::Owner
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
+p0.render_group(p1);
+meta::owner::Owner::render_group(p0, p1);
+crate::meta::owner::Owner::render_group(p0, p1);
+<meta::owner::Owner>::render_group(p0, p1);
-----------------
src/meta/permissions.rs <meta::permissions::Permissions as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::permissions::Permissions
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::permissions::Permissions as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::permissions::Permissions as std::fmt::Debug>::fmt(p0, p1);
+<meta::permissions::Permissions>::fmt(p0, p1);
-----------------
src/meta/permissions.rs <meta::permissions::Permissions as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::permissions::Permissions
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::permissions::Permissions
+p0.eq(p1);
+<meta::permissions::Permissions as std::cmp::PartialEq>::eq(p0, p1);
+crate::<meta::permissions::Permissions as std::cmp::PartialEq>::eq(p0, p1);
+<meta::permissions::Permissions>::eq(p0, p1);
-----------------
src/meta/permissions.rs <meta::permissions::Permissions as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::permissions::Permissions
+p0.assert_receiver_is_total_eq();
+<meta::permissions::Permissions as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<meta::permissions::Permissions as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<meta::permissions::Permissions>::assert_receiver_is_total_eq(p0);
-----------------
src/meta/permissions.rs <meta::permissions::Permissions as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::permissions::Permissions
+p0.clone();
+<meta::permissions::Permissions as std::clone::Clone>::clone(p0);
+crate::<meta::permissions::Permissions as std::clone::Clone>::clone(p0);
+<meta::permissions::Permissions>::clone(p0);
-----------------
src/meta/permissions.rs <meta::permissions::Permissions as std::convert::From<&'a std::fs::Metadata>>::from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::fs::Metadata
+<meta::permissions::Permissions as std::convert::From<&'a std::fs::Metadata>>::from(p0);
+crate::<meta::permissions::Permissions as std::convert::From<&'a std::fs::Metadata>>::from(p0);
+<meta::permissions::Permissions>::from(p0);
-----------------
src/meta/permissions.rs meta::permissions::Permissions::bits_to_octal
deps:{}
candidates:{}
let mut p0 = true; // None+bool
let mut p1 = true; // None+bool
let mut p2 = true; // None+bool
+meta::permissions::Permissions::bits_to_octal(p0, p1, p2);
+crate::meta::permissions::Permissions::bits_to_octal(p0, p1, p2);
+<meta::permissions::Permissions>::bits_to_octal(p0, p1, p2);
-----------------
src/meta/permissions.rs meta::permissions::Permissions::render
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::permissions::Permissions
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p2 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+p0.render(p1, p2);
+meta::permissions::Permissions::render(p0, p1, p2);
+crate::meta::permissions::Permissions::render(p0, p1, p2);
+<meta::permissions::Permissions>::render(p0, p1, p2);
-----------------
src/meta/permissions.rs meta::permissions::Permissions::is_executable
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::permissions::Permissions
+p0.is_executable();
+meta::permissions::Permissions::is_executable(p0);
+crate::meta::permissions::Permissions::is_executable(p0);
+<meta::permissions::Permissions>::is_executable(p0);
-----------------
src/meta/size.rs <meta::size::Unit as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Unit
+p0.clone();
+<meta::size::Unit as std::clone::Clone>::clone(p0);
+crate::<meta::size::Unit as std::clone::Clone>::clone(p0);
+<meta::size::Unit>::clone(p0);
-----------------
src/meta/size.rs <meta::size::Unit as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Unit
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::size::Unit as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::size::Unit as std::fmt::Debug>::fmt(p0, p1);
+<meta::size::Unit>::fmt(p0, p1);
-----------------
src/meta/size.rs <meta::size::Unit as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Unit
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::size::Unit
+p0.eq(p1);
+<meta::size::Unit as std::cmp::PartialEq>::eq(p0, p1);
+crate::<meta::size::Unit as std::cmp::PartialEq>::eq(p0, p1);
+<meta::size::Unit>::eq(p0, p1);
-----------------
src/meta/size.rs <meta::size::Unit as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Unit
+p0.assert_receiver_is_total_eq();
+<meta::size::Unit as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<meta::size::Unit as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<meta::size::Unit>::assert_receiver_is_total_eq(p0);
-----------------
src/meta/size.rs <meta::size::Size as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
+p0.clone();
+<meta::size::Size as std::clone::Clone>::clone(p0);
+crate::<meta::size::Size as std::clone::Clone>::clone(p0);
+<meta::size::Size>::clone(p0);
-----------------
src/meta/size.rs <meta::size::Size as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::size::Size as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::size::Size as std::fmt::Debug>::fmt(p0, p1);
+<meta::size::Size>::fmt(p0, p1);
-----------------
src/meta/size.rs <meta::size::Size as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
let mut p1 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
+p0.eq(p1);
+<meta::size::Size as std::cmp::PartialEq>::eq(p0, p1);
+crate::<meta::size::Size as std::cmp::PartialEq>::eq(p0, p1);
+<meta::size::Size>::eq(p0, p1);
-----------------
src/meta/size.rs <meta::size::Size as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
+p0.assert_receiver_is_total_eq();
+<meta::size::Size as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<meta::size::Size as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<meta::size::Size>::assert_receiver_is_total_eq(p0);
-----------------
src/meta/size.rs <meta::size::Size as std::convert::From<&'a std::fs::Metadata>>::from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::fs::Metadata
+<meta::size::Size as std::convert::From<&'a std::fs::Metadata>>::from(p0);
+crate::<meta::size::Size as std::convert::From<&'a std::fs::Metadata>>::from(p0);
+<meta::size::Size>::from(p0);
-----------------
src/meta/size.rs meta::size::Size::new
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+meta::size::Size::new(p0);
+crate::meta::size::Size::new(p0);
+<meta::size::Size>::new(p0);
-----------------
src/meta/size.rs meta::size::Size::get_bytes
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
+p0.get_bytes();
+meta::size::Size::get_bytes(p0);
+crate::meta::size::Size::get_bytes(p0);
+<meta::size::Size>::get_bytes(p0);
-----------------
src/meta/size.rs meta::size::Size::format_size
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
let mut p1 = 0f64; // None+f64
+p0.format_size(p1);
+meta::size::Size::format_size(p0, p1);
+crate::meta::size::Size::format_size(p0, p1);
+<meta::size::Size>::format_size(p0, p1);
-----------------
src/meta/size.rs meta::size::Size::get_unit
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+p0.get_unit(p1);
+meta::size::Size::get_unit(p0, p1);
+crate::meta::size::Size::get_unit(p0, p1);
+<meta::size::Size>::get_unit(p0, p1);
-----------------
src/meta/size.rs meta::size::Size::render
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p2 = & MaybeUninit::uninit().assume_init(); // flags::Flags
let mut p3 = MaybeUninit::uninit().assume_init(); // std::option::Option<usize>
+p0.render(p1, p2, p3);
+meta::size::Size::render(p0, p1, p2, p3);
+crate::meta::size::Size::render(p0, p1, p2, p3);
+<meta::size::Size>::render(p0, p1, p2, p3);
-----------------
src/meta/size.rs meta::size::Size::paint
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p2 = & MaybeUninit::uninit().assume_init(); // flags::Flags
let mut p3 = std::string::String::new(); // None+std::string::String
+p0.paint(p1, p2, p3);
+meta::size::Size::paint(p0, p1, p2, p3);
+crate::meta::size::Size::paint(p0, p1, p2, p3);
+<meta::size::Size>::paint(p0, p1, p2, p3);
-----------------
src/meta/size.rs meta::size::Size::render_value
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p2 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+p0.render_value(p1, p2);
+meta::size::Size::render_value(p0, p1, p2);
+crate::meta::size::Size::render_value(p0, p1, p2);
+<meta::size::Size>::render_value(p0, p1, p2);
-----------------
src/meta/size.rs meta::size::Size::value_string
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+p0.value_string(p1);
+meta::size::Size::value_string(p0, p1);
+crate::meta::size::Size::value_string(p0, p1);
+<meta::size::Size>::value_string(p0, p1);
-----------------
src/meta/size.rs meta::size::Size::render_unit
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p2 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+p0.render_unit(p1, p2);
+meta::size::Size::render_unit(p0, p1, p2);
+crate::meta::size::Size::render_unit(p0, p1, p2);
+<meta::size::Size>::render_unit(p0, p1, p2);
-----------------
src/meta/size.rs meta::size::Size::unit_string
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::size::Size
let mut p1 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+p0.unit_string(p1);
+meta::size::Size::unit_string(p0, p1);
+crate::meta::size::Size::unit_string(p0, p1);
+<meta::size::Size>::unit_string(p0, p1);
-----------------
src/meta/symlink.rs <meta::symlink::SymLink as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::symlink::SymLink
+p0.clone();
+<meta::symlink::SymLink as std::clone::Clone>::clone(p0);
+crate::<meta::symlink::SymLink as std::clone::Clone>::clone(p0);
+<meta::symlink::SymLink>::clone(p0);
-----------------
src/meta/symlink.rs <meta::symlink::SymLink as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::symlink::SymLink
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::symlink::SymLink as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::symlink::SymLink as std::fmt::Debug>::fmt(p0, p1);
+<meta::symlink::SymLink>::fmt(p0, p1);
-----------------
src/meta/symlink.rs <meta::symlink::SymLink as std::convert::From<&'a std::path::Path>>::from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::path::Path
+<meta::symlink::SymLink as std::convert::From<&'a std::path::Path>>::from(p0);
+crate::<meta::symlink::SymLink as std::convert::From<&'a std::path::Path>>::from(p0);
+<meta::symlink::SymLink>::from(p0);
-----------------
src/meta/symlink.rs meta::symlink::SymLink::symlink_string
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::symlink::SymLink
+p0.symlink_string();
+meta::symlink::SymLink::symlink_string(p0);
+crate::meta::symlink::SymLink::symlink_string(p0);
+<meta::symlink::SymLink>::symlink_string(p0);
-----------------
src/meta/symlink.rs meta::symlink::SymLink::render
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::symlink::SymLink
let mut p1 = & MaybeUninit::uninit().assume_init(); // color::Colors
let mut p2 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+p0.render(p1, p2);
+meta::symlink::SymLink::render(p0, p1, p2);
+crate::meta::symlink::SymLink::render(p0, p1, p2);
+<meta::symlink::SymLink>::render(p0, p1, p2);
-----------------
src/meta/mod.rs <meta::Meta as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::Meta
+p0.clone();
+<meta::Meta as std::clone::Clone>::clone(p0);
+crate::<meta::Meta as std::clone::Clone>::clone(p0);
+<meta::Meta>::clone(p0);
-----------------
src/meta/mod.rs <meta::Meta as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::Meta
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<meta::Meta as std::fmt::Debug>::fmt(p0, p1);
+crate::<meta::Meta as std::fmt::Debug>::fmt(p0, p1);
+<meta::Meta>::fmt(p0, p1);
-----------------
src/meta/mod.rs meta::Meta::recurse_into
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // meta::Meta
let mut p1 = 0usize; // None+usize
let mut p2 = & MaybeUninit::uninit().assume_init(); // flags::Flags
+p0.recurse_into(p1, p2);
+meta::Meta::recurse_into(p0, p1, p2);
+crate::meta::Meta::recurse_into(p0, p1, p2);
+<meta::Meta>::recurse_into(p0, p1, p2);
-----------------
src/meta/mod.rs meta::Meta::calculate_total_size
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // meta::Meta
+p0.calculate_total_size();
+meta::Meta::calculate_total_size(p0);
+crate::meta::Meta::calculate_total_size(p0);
+<meta::Meta>::calculate_total_size(p0);
-----------------
src/meta/mod.rs meta::Meta::calculate_total_file_size
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::path::Path
+meta::Meta::calculate_total_file_size(p0);
+crate::meta::Meta::calculate_total_file_size(p0);
+<meta::Meta>::calculate_total_file_size(p0);
-----------------
src/meta/mod.rs meta::Meta::from_path
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::path::Path
let mut p1 = true; // None+bool
+meta::Meta::from_path(p0, p1);
+crate::meta::Meta::from_path(p0, p1);
+<meta::Meta>::from_path(p0, p1);