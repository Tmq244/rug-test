-----------------
src/data.rs data::initialise
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"data::initialise":{"P":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"data::initialise":{"P":["core::num::dec2flt::common::AsciiStr<'a>","std::rc::Rc<T>","<&mut T as std::convert::AsRef<U>>","std::ffi::CStr","std::vec::IntoIter<T, A>","std::vec::Drain<'a, T, A>","<&T as std::convert::AsRef<U>>","std::ffi::CString","std::sync::Arc<T>","std::slice::Iter<'_, T>","std::slice::IterMut<'_, T>","std::borrow::Cow<'_, std::ffi::OsStr>","std::borrow::Cow<'_, T>","std::boxed::Box<T, A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // P
+data::initialise(p0);
+crate::data::initialise(p0);
+crate::data::initialise(p0);
-----------------
src/date.rs date::days_in_month
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
let mut p1 = 0u64; // None+u64
+date::days_in_month(p0, p1);
+crate::date::days_in_month(p0, p1);
+crate::date::days_in_month(p0, p1);
-----------------
src/date.rs date::get_weekday_of_date
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
+date::get_weekday_of_date(p0);
+crate::date::get_weekday_of_date(p0);
+crate::date::get_weekday_of_date(p0);
-----------------
src/date.rs date::suffix_for_day
deps:{}
candidates:{}
let mut p0 = & 0u64; // None+u64
+date::suffix_for_day(p0);
+crate::date::suffix_for_day(p0);
+crate::date::suffix_for_day(p0);
-----------------
src/expense.rs expense::count_overlap_days
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p2 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p3 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
+expense::count_overlap_days(p0, p1, p2, p3);
+crate::expense::count_overlap_days(p0, p1, p2, p3);
+crate::expense::count_overlap_days(p0, p1, p2, p3);
-----------------
src/expense.rs expense::calculate_spread
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [expense::Expense]
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p2 = & MaybeUninit::uninit().assume_init(); // date::Duration
+expense::calculate_spread(p0, p1, p2);
+crate::expense::calculate_spread(p0, p1, p2);
+crate::expense::calculate_spread(p0, p1, p2);
-----------------
src/main.rs main
deps:{}
candidates:{}
+main();
+crate::main();
+crate::main();
-----------------
src/data.rs <data::DataError as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // data::DataError
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<data::DataError as std::fmt::Debug>::fmt(p0, p1);
+crate::<data::DataError as std::fmt::Debug>::fmt(p0, p1);
+<data::DataError>::fmt(p0, p1);
-----------------
src/data.rs <data::DataError as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // data::DataError
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<data::DataError as std::fmt::Display>::fmt(p0, p1);
+crate::<data::DataError as std::fmt::Display>::fmt(p0, p1);
+<data::DataError>::fmt(p0, p1);
-----------------
src/data.rs data::_::<impl data::_::_serde::Serialize for data::Datafile>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::<impl data::_::_serde::Serialize for data::Datafile>::serialize":{"__S":["std::marker::Sized","data::_::_serde::Serializer"]},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::<impl data::_::_serde::Serialize for data::Datafile>::serialize":{"__S":["data::_::_serde::private::ser::FlatMapSerializer<'a, M>","serde_json::ser::MapKeySerializer<'a, W, F>","data::_::_serde::private::ser::content::ContentSerializer<E>","data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde_json::value::Serializer","<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>","serde_json::value::ser::MapKeySerializer","data::_::_serde::private::ser::TaggedSerializer<S>"]},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // data::Datafile
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+data::_::<impl data::_::_serde::Serialize for data::Datafile>::serialize(p0, p1);
+crate::data::_::<impl data::_::_serde::Serialize for data::Datafile>::serialize(p0, p1);
+<data::Datafile>::serialize(p0, p1);
-----------------
src/data.rs data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize":{"__D":["data::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize":{"__D":["data::_::_serde::de::value::UnitDeserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","&'de serde_json::Value","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","serde_json::value::de::MapDeserializer","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","&'a serde_json::Number","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::de::value::I64Deserializer<E>","serde_json::Number","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::Value"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize(p0);
+crate::data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize(p0);
+<data::Datafile>::deserialize(p0);
-----------------
src/data.rs <data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/data.rs <data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/data.rs <data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/data.rs <data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/data.rs <data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","&'a serde_json::Number","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::U8Deserializer<E>","serde_json::de::MapKey<'a, R>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::CharDeserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::IsizeDeserializer<E>","serde_json::Number","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_json::value::de::MapDeserializer","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::StringDeserializer<E>","&'de serde_json::Value","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","serde_json::Value","data::_::_serde::de::value::MapAccessDeserializer<A>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::U128Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Field>::deserialize(p0);
-----------------
src/data.rs <data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/data.rs <data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["data::_::_serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::PairVisitor<A, B, E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","<&'a mut A as data::_::_serde::de::SeqAccess<'de>>","serde_json::de::SeqAccess<'a, R>","serde_json::value::de::SeqRefDeserializer<'de>","serde_json::value::de::SeqDeserializer"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/data.rs <data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["data::_::_serde::de::MapAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["data::_::_serde::private::de::FlatMapAccess<'a, 'de, E>","<&'a mut A as data::_::_serde::de::MapAccess<'de>>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde_json::value::de::MapDeserializer","data::_::_serde::private::de::FlatStructAccess<'a, 'de, E>","serde_json::de::MapAccess<'a, R>","data::_::_serde::private::de::content::MapDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<data::_::<impl data::_::_serde::Deserialize<'de> for data::Datafile>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/data.rs data::Datafile::new
deps:{}
candidates:{}
+data::Datafile::new();
+crate::data::Datafile::new();
+<data::Datafile>::new();
-----------------
src/data.rs data::Datafile::from_file
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"data::Datafile::from_file":{"P":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"data::Datafile::from_file":{"P":["std::slice::IterMut<'_, T>","core::num::dec2flt::common::AsciiStr<'a>","std::vec::IntoIter<T, A>","std::slice::Iter<'_, T>","std::rc::Rc<T>","std::borrow::Cow<'_, std::ffi::OsStr>","std::ffi::CStr","<&T as std::convert::AsRef<U>>","std::boxed::Box<T, A>","std::borrow::Cow<'_, T>","std::sync::Arc<T>","std::vec::Drain<'a, T, A>","std::ffi::CString"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // P
+data::Datafile::from_file(p0);
+crate::data::Datafile::from_file(p0);
+<data::Datafile>::from_file(p0);
-----------------
src/data.rs data::Datafile::add_tag
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // data::Datafile
let mut p1 = std::string::String::new(); // None+std::string::String
+p0.add_tag(p1);
+data::Datafile::add_tag(p0, p1);
+crate::data::Datafile::add_tag(p0, p1);
+<data::Datafile>::add_tag(p0, p1);
-----------------
src/data.rs data::Datafile::insert
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // data::Datafile
let mut p1 = MaybeUninit::uninit().assume_init(); // expense::Expense
+p0.insert(p1);
+data::Datafile::insert(p0, p1);
+crate::data::Datafile::insert(p0, p1);
+<data::Datafile>::insert(p0, p1);
-----------------
src/data.rs data::Datafile::remove
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // data::Datafile
let mut p1 = 0u64; // None+u64
+p0.remove(p1);
+data::Datafile::remove(p0, p1);
+crate::data::Datafile::remove(p0, p1);
+<data::Datafile>::remove(p0, p1);
-----------------
src/data.rs data::Datafile::find
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // data::Datafile
let mut p1 = 0u64; // None+u64
+p0.find(p1);
+data::Datafile::find(p0, p1);
+crate::data::Datafile::find(p0, p1);
+<data::Datafile>::find(p0, p1);
-----------------
src/data.rs data::Datafile::save
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"data::Datafile::save":{"P":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"data::Datafile::save":{"P":["<&T as std::convert::AsRef<U>>","std::slice::Iter<'_, T>","std::boxed::Box<T, A>","core::num::dec2flt::common::AsciiStr<'a>","<&mut T as std::convert::AsRef<U>>","std::borrow::Cow<'_, T>","std::vec::IntoIter<T, A>","std::ffi::CStr","std::sync::Arc<T>","std::ffi::CString","std::rc::Rc<T>","std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, std::ffi::OsStr>","std::slice::IterMut<'_, T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // data::Datafile
let mut p1 = MaybeUninit::uninit().assume_init(); // P
+p0.save(p1);
+data::Datafile::save(p0, p1);
+crate::data::Datafile::save(p0, p1);
+<data::Datafile>::save(p0, p1);
-----------------
src/data.rs data::Datafile::expenses_between
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // data::Datafile
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p2 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
+p0.expenses_between(p1, p2);
+data::Datafile::expenses_between(p0, p1, p2);
+crate::data::Datafile::expenses_between(p0, p1, p2);
+<data::Datafile>::expenses_between(p0, p1, p2);
-----------------
src/date.rs <date::DateError as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::DateError
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::DateError as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::DateError as std::fmt::Debug>::fmt(p0, p1);
+<date::DateError>::fmt(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Serialize for date::Duration>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::Duration>::serialize":{"__S":["std::marker::Sized","data::_::_serde::Serializer"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::Duration>::serialize":{"__S":["data::_::_serde::private::ser::TaggedSerializer<S>","data::_::_serde::private::ser::FlatMapSerializer<'a, M>","serde_json::value::ser::MapKeySerializer","data::_::_serde::private::ser::content::ContentSerializer<E>","serde_json::value::Serializer","serde_json::ser::MapKeySerializer<'a, W, F>","data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+date::_::<impl data::_::_serde::Serialize for date::Duration>::serialize(p0, p1);
+crate::date::_::<impl data::_::_serde::Serialize for date::Duration>::serialize(p0, p1);
+<date::Duration>::serialize(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize":{"__D":["serde_json::Number","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::U32Deserializer<E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::I128Deserializer<E>","&'de serde_json::Value","data::_::_serde::de::value::UnitDeserializer<E>","serde_json::Value","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::I64Deserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::MapAccessDeserializer<A>","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::U16Deserializer<E>","&'a serde_json::Number","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize(p0);
+crate::date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize(p0);
+<date::Duration>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::I64Deserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","serde_json::Value","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","&'a serde_json::Number","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::U16Deserializer<E>","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::U8Deserializer<E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::CharDeserializer<E>","serde_json::Number","&'de serde_json::Value","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::F64Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Field>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["std::marker::Sized","data::_::_serde::de::EnumAccess"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["data::_::_serde::de::value::MapAccessDeserializer<A>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_json::value::de::EnumDeserializer","data::_::_serde::de::value::U32Deserializer<E>","serde_json::value::de::EnumRefDeserializer<'de>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::private::de::content::EnumRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::EnumDeserializer<'de, E>","data::_::_serde::de::value::StringDeserializer<E>","serde_json::de::VariantAccess<'a, R>","data::_::_serde::de::value::StrDeserializer<'a, E>","serde_json::de::UnitVariantAccess<'a, R>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Duration>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/date.rs <date::Duration as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Duration
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::Duration as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::Duration as std::fmt::Debug>::fmt(p0, p1);
+<date::Duration>::fmt(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Serialize for date::SimpleDate>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::SimpleDate>::serialize":{"__S":["std::marker::Sized","data::_::_serde::Serializer"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::SimpleDate>::serialize":{"__S":["<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>","serde_json::value::Serializer","data::_::_serde::private::ser::FlatMapSerializer<'a, M>","data::_::_serde::private::ser::TaggedSerializer<S>","data::_::_serde::private::ser::content::ContentSerializer<E>","serde_json::ser::MapKeySerializer<'a, W, F>","serde_json::value::ser::MapKeySerializer","data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+date::_::<impl data::_::_serde::Serialize for date::SimpleDate>::serialize(p0, p1);
+crate::date::_::<impl data::_::_serde::Serialize for date::SimpleDate>::serialize(p0, p1);
+<date::SimpleDate>::serialize(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize":{"__D":["data::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize":{"__D":["data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","serde_json::Number","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","&'a serde_json::Number","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","&'de serde_json::Value","data::_::_serde::de::value::F32Deserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::F64Deserializer<E>","serde_json::Value","data::_::_serde::de::value::StringDeserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::MapAccessDeserializer<A>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::U32Deserializer<E>","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::de::value::BoolDeserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::U128Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize(p0);
+crate::date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize(p0);
+<date::SimpleDate>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::U16Deserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","&'de serde_json::Value","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","serde_json::Value","data::_::_serde::de::value::I16Deserializer<E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","serde_json::Number","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::I32Deserializer<E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::private::de::StrDeserializer<'a, E>","&'a serde_json::Number","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::F64Deserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","serde_json::value::de::SeqDeserializer"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Field>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["data::_::_serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["serde_json::de::SeqAccess<'a, R>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","serde_json::value::de::SeqDeserializer","<&'a mut A as data::_::_serde::de::SeqAccess<'de>>","data::_::_serde::de::value::PairVisitor<A, B, E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["data::_::_serde::de::MapAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::FlatStructAccess<'a, 'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde_json::value::de::MapDeserializer","serde_json::de::MapAccess<'a, R>","data::_::_serde::private::de::FlatMapAccess<'a, 'de, E>","<&'a mut A as data::_::_serde::de::MapAccess<'de>>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::SimpleDate>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/date.rs <date::SimpleDate as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::SimpleDate as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::SimpleDate as std::fmt::Debug>::fmt(p0, p1);
+<date::SimpleDate>::fmt(p0, p1);
-----------------
src/date.rs <date::SimpleDate as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
+p0.clone();
+<date::SimpleDate as std::clone::Clone>::clone(p0);
+crate::<date::SimpleDate as std::clone::Clone>::clone(p0);
+<date::SimpleDate>::clone(p0);
-----------------
src/date.rs <date::SimpleDate as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
+p0.eq(p1);
+<date::SimpleDate as std::cmp::PartialEq>::eq(p0, p1);
+crate::<date::SimpleDate as std::cmp::PartialEq>::eq(p0, p1);
+<date::SimpleDate>::eq(p0, p1);
-----------------
src/date.rs <date::SimpleDate as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
+p0.assert_receiver_is_total_eq();
+<date::SimpleDate as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<date::SimpleDate as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<date::SimpleDate>::assert_receiver_is_total_eq(p0);
-----------------
src/date.rs date::_::<impl data::_::_serde::Serialize for date::DayDelta>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::DayDelta>::serialize":{"__S":["data::_::_serde::Serializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::DayDelta>::serialize":{"__S":["data::_::_serde::private::ser::content::ContentSerializer<E>","serde_json::value::Serializer","<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>","serde_json::value::ser::MapKeySerializer","data::_::_serde::private::ser::FlatMapSerializer<'a, M>","serde_json::ser::MapKeySerializer<'a, W, F>","data::_::_serde::private::ser::TaggedSerializer<S>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::DayDelta
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+date::_::<impl data::_::_serde::Serialize for date::DayDelta>::serialize(p0, p1);
+crate::date::_::<impl data::_::_serde::Serialize for date::DayDelta>::serialize(p0, p1);
+<date::DayDelta>::serialize(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize":{"__D":["data::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize":{"__D":["data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::F32Deserializer<E>","&'a serde_json::Number","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_json::de::MapKey<'a, R>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::I8Deserializer<E>","serde_json::value::de::MapDeserializer","&'de serde_json::Value","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_json::Number","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::F64Deserializer<E>","serde_json::Value","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::StringDeserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::value::de::SeqDeserializer","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::U128Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize(p0);
+crate::date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize(p0);
+<date::DayDelta>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["serde_json::Number","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::U16Deserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::I8Deserializer<E>","serde_json::de::MapKey<'a, R>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","serde_json::Value","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::F64Deserializer<E>","&'a serde_json::Number","data::_::_serde::de::value::IsizeDeserializer<E>","serde_json::value::de::SeqDeserializer","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::I64Deserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::SeqDeserializer<I, E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","&'de serde_json::Value","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Field>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","data::_::_serde::de::SeqAccess"]}}
candidates:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["data::_::_serde::private::de::content::SeqDeserializer<'de, E>","serde_json::de::SeqAccess<'a, R>","data::_::_serde::de::value::PairVisitor<A, B, E>","serde_json::value::de::SeqRefDeserializer<'de>","<&'a mut A as data::_::_serde::de::SeqAccess<'de>>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::value::de::SeqDeserializer","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["data::_::_serde::de::MapAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["serde_json::de::MapAccess<'a, R>","data::_::_serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","<&'a mut A as data::_::_serde::de::MapAccess<'de>>","serde_json::value::de::MapDeserializer","data::_::_serde::private::de::FlatStructAccess<'a, 'de, E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::FlatMapAccess<'a, 'de, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::DayDelta>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/date.rs <date::DayDelta as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::DayDelta
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::DayDelta as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::DayDelta as std::fmt::Debug>::fmt(p0, p1);
+<date::DayDelta>::fmt(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Serialize for date::Weekday>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::Weekday>::serialize":{"__S":["std::marker::Sized","data::_::_serde::Serializer"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::Weekday>::serialize":{"__S":["data::_::_serde::private::ser::content::ContentSerializer<E>","<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>","data::_::_serde::private::ser::FlatMapSerializer<'a, M>","serde_json::ser::MapKeySerializer<'a, W, F>","serde_json::value::Serializer","serde_json::value::ser::MapKeySerializer","data::_::_serde::private::ser::TaggedSerializer<S>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Weekday
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+date::_::<impl data::_::_serde::Serialize for date::Weekday>::serialize(p0, p1);
+crate::date::_::<impl data::_::_serde::Serialize for date::Weekday>::serialize(p0, p1);
+<date::Weekday>::serialize(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize":{"__D":["serde_json::Value","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","serde_json::value::de::SeqDeserializer","&'de serde_json::Value","serde_json::value::de::MapKeyDeserializer<'de>","serde_json::de::MapKey<'a, R>","serde_json::Number","serde_json::value::de::BorrowedCowStrDeserializer<'de>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::CharDeserializer<E>","&'a serde_json::Number","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::UnitDeserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize(p0);
+crate::date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize(p0);
+<date::Weekday>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::U64Deserializer<E>","serde_json::Number","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde_json::de::MapKey<'a, R>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::U32Deserializer<E>","&'a serde_json::Number","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::F64Deserializer<E>","serde_json::Value","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::UnitDeserializer<E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::CharDeserializer<E>","&'de serde_json::Value","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::I128Deserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::UsizeDeserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::de::value::U16Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Field>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["data::_::_serde::de::EnumAccess","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>","serde_json::value::de::EnumRefDeserializer<'de>","data::_::_serde::private::de::content::EnumRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::private::de::content::EnumDeserializer<'de, E>","serde_json::value::de::EnumDeserializer","serde_json::de::UnitVariantAccess<'a, R>","data::_::_serde::de::value::StrDeserializer<'a, E>","serde_json::de::VariantAccess<'a, R>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::CowStrDeserializer<'a, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Weekday>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/date.rs <date::Weekday as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Weekday
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::Weekday as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::Weekday as std::fmt::Debug>::fmt(p0, p1);
+<date::Weekday>::fmt(p0, p1);
-----------------
src/date.rs <date::Weekday as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Weekday
+p0.clone();
+<date::Weekday as std::clone::Clone>::clone(p0);
+crate::<date::Weekday as std::clone::Clone>::clone(p0);
+<date::Weekday>::clone(p0);
-----------------
src/date.rs <date::Weekday as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Weekday
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::Weekday
+p0.eq(p1);
+<date::Weekday as std::cmp::PartialEq>::eq(p0, p1);
+crate::<date::Weekday as std::cmp::PartialEq>::eq(p0, p1);
+<date::Weekday>::eq(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Serialize for date::WeekDelta>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::WeekDelta>::serialize":{"__S":["data::_::_serde::Serializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::WeekDelta>::serialize":{"__S":["data::_::_serde::private::ser::content::ContentSerializer<E>","data::_::_serde::private::ser::TaggedSerializer<S>","data::_::_serde::private::ser::FlatMapSerializer<'a, M>","<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>","serde_json::value::ser::MapKeySerializer","serde_json::value::Serializer","serde_json::ser::MapKeySerializer<'a, W, F>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::WeekDelta
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+date::_::<impl data::_::_serde::Serialize for date::WeekDelta>::serialize(p0, p1);
+crate::date::_::<impl data::_::_serde::Serialize for date::WeekDelta>::serialize(p0, p1);
+<date::WeekDelta>::serialize(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize":{"__D":["data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_json::Number","serde_json::Value","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_json::value::de::SeqRefDeserializer<'de>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::F64Deserializer<E>","&'de serde_json::Value","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::CharDeserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::de::value::UnitDeserializer<E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::U16Deserializer<E>","&'a serde_json::Number","data::_::_serde::de::value::SeqDeserializer<I, E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::StringDeserializer<E>","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize(p0);
+crate::date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize(p0);
+<date::WeekDelta>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::U64Deserializer<E>","serde_json::Number","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_json::value::de::SeqDeserializer","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::value::de::MapRefDeserializer<'de>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","&'a serde_json::Number","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::F64Deserializer<E>","serde_json::value::de::MapDeserializer","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_json::Value","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::I16Deserializer<E>","&'de serde_json::Value"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Field>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["data::_::_serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::PairVisitor<A, B, E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_json::value::de::SeqDeserializer","<&'a mut A as data::_::_serde::de::SeqAccess<'de>>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::de::SeqAccess<'a, R>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","data::_::_serde::de::MapAccess"]}}
candidates:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["<&'a mut A as data::_::_serde::de::MapAccess<'de>>","serde_json::value::de::MapDeserializer","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","serde_json::de::MapAccess<'a, R>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::FlatStructAccess<'a, 'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::private::de::FlatMapAccess<'a, 'de, E>","data::_::_serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::WeekDelta>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/date.rs <date::WeekDelta as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::WeekDelta
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::WeekDelta as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::WeekDelta as std::fmt::Debug>::fmt(p0, p1);
+<date::WeekDelta>::fmt(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Serialize for date::MonthDeltaDate>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::MonthDeltaDate>::serialize":{"__S":["data::_::_serde::Serializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::MonthDeltaDate>::serialize":{"__S":["data::_::_serde::private::ser::content::ContentSerializer<E>","data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde_json::value::Serializer","serde_json::value::ser::MapKeySerializer","serde_json::ser::MapKeySerializer<'a, W, F>","data::_::_serde::private::ser::FlatMapSerializer<'a, M>","<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>","data::_::_serde::private::ser::TaggedSerializer<S>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::MonthDeltaDate
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+date::_::<impl data::_::_serde::Serialize for date::MonthDeltaDate>::serialize(p0, p1);
+crate::date::_::<impl data::_::_serde::Serialize for date::MonthDeltaDate>::serialize(p0, p1);
+<date::MonthDeltaDate>::serialize(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize":{"__D":["data::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize":{"__D":["data::_::_serde::de::value::StrDeserializer<'a, E>","serde_json::de::MapKey<'a, R>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::Value","data::_::_serde::de::value::MapAccessDeserializer<A>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::private::de::StrDeserializer<'a, E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::U16Deserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::U128Deserializer<E>","&'de serde_json::Value","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","&'a serde_json::Number","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::CharDeserializer<E>","serde_json::value::de::SeqDeserializer","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","serde_json::Number","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize(p0);
+crate::date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize(p0);
+<date::MonthDeltaDate>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","&'de serde_json::Value","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::de::value::U8Deserializer<E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::F32Deserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::private::de::BytesDeserializer<'a, E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_json::Value","serde_json::value::de::SeqRefDeserializer<'de>","serde_json::value::de::SeqDeserializer","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::Number","data::_::_serde::de::value::U64Deserializer<E>","serde_json::value::de::MapDeserializer","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","&'a serde_json::Number"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Field>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","data::_::_serde::de::SeqAccess"]}}
candidates:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","<&'a mut A as data::_::_serde::de::SeqAccess<'de>>","serde_json::value::de::SeqRefDeserializer<'de>","serde_json::value::de::SeqDeserializer","serde_json::de::SeqAccess<'a, R>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::PairVisitor<A, B, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","data::_::_serde::de::MapAccess"]}}
candidates:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["serde_json::de::MapAccess<'a, R>","<&'a mut A as data::_::_serde::de::MapAccess<'de>>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::private::de::FlatStructAccess<'a, 'de, E>","data::_::_serde::private::de::FlatMapAccess<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaDate>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/date.rs <date::MonthDeltaDate as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::MonthDeltaDate
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::MonthDeltaDate as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::MonthDeltaDate as std::fmt::Debug>::fmt(p0, p1);
+<date::MonthDeltaDate>::fmt(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Serialize for date::MonthDeltaWeek>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::MonthDeltaWeek>::serialize":{"__S":["data::_::_serde::Serializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::MonthDeltaWeek>::serialize":{"__S":["data::_::_serde::private::ser::TaggedSerializer<S>","serde_json::value::Serializer","data::_::_serde::private::ser::FlatMapSerializer<'a, M>","serde_json::value::ser::MapKeySerializer","<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>","data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde_json::ser::MapKeySerializer<'a, W, F>","data::_::_serde::private::ser::content::ContentSerializer<E>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::MonthDeltaWeek
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+date::_::<impl data::_::_serde::Serialize for date::MonthDeltaWeek>::serialize(p0, p1);
+crate::date::_::<impl data::_::_serde::Serialize for date::MonthDeltaWeek>::serialize(p0, p1);
+<date::MonthDeltaWeek>::serialize(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize":{"__D":["data::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize":{"__D":["data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::I128Deserializer<E>","&'a serde_json::Number","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","serde_json::value::de::SeqDeserializer","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde_json::Value","data::_::_serde::de::value::F32Deserializer<E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::I16Deserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::U8Deserializer<E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::U32Deserializer<E>","&'de serde_json::Value","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::StrDeserializer<'a, E>","serde_json::Number","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_json::de::MapKey<'a, R>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::IsizeDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize(p0);
+crate::date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize(p0);
+<date::MonthDeltaWeek>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::U8Deserializer<E>","&'de serde_json::Value","&'a serde_json::Number","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::de::value::F32Deserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::U128Deserializer<E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::BoolDeserializer<E>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::SeqDeserializer<I, E>","serde_json::value::de::SeqRefDeserializer<'de>","serde_json::Value","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","serde_json::Number","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_json::value::de::MapKeyDeserializer<'de>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Field>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["data::_::_serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::PairVisitor<A, B, E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","<&'a mut A as data::_::_serde::de::SeqAccess<'de>>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","serde_json::de::SeqAccess<'a, R>","serde_json::value::de::SeqDeserializer"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["data::_::_serde::de::MapAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde_json::de::MapAccess<'a, R>","data::_::_serde::private::de::FlatMapAccess<'a, 'de, E>","<&'a mut A as data::_::_serde::de::MapAccess<'de>>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","serde_json::value::de::MapDeserializer","data::_::_serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::FlatStructAccess<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDeltaWeek>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/date.rs <date::MonthDeltaWeek as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::MonthDeltaWeek
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::MonthDeltaWeek as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::MonthDeltaWeek as std::fmt::Debug>::fmt(p0, p1);
+<date::MonthDeltaWeek>::fmt(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Serialize for date::MonthDelta>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::MonthDelta>::serialize":{"__S":["std::marker::Sized","data::_::_serde::Serializer"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::MonthDelta>::serialize":{"__S":["data::_::_serde::private::ser::FlatMapSerializer<'a, M>","serde_json::ser::MapKeySerializer<'a, W, F>","data::_::_serde::private::ser::TaggedSerializer<S>","data::_::_serde::private::ser::content::ContentSerializer<E>","data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde_json::value::Serializer","serde_json::value::ser::MapKeySerializer","<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::MonthDelta
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+date::_::<impl data::_::_serde::Serialize for date::MonthDelta>::serialize(p0, p1);
+crate::date::_::<impl data::_::_serde::Serialize for date::MonthDelta>::serialize(p0, p1);
+<date::MonthDelta>::serialize(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize":{"__D":["data::_::_serde::de::value::U64Deserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::U128Deserializer<E>","serde_json::Number","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::IsizeDeserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","serde_json::value::de::SeqDeserializer","serde_json::value::de::SeqRefDeserializer<'de>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::I64Deserializer<E>","&'de serde_json::Value","&'a serde_json::Number","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","serde_json::de::MapKey<'a, R>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","serde_json::Value"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize(p0);
+crate::date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize(p0);
+<date::MonthDelta>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::MapAccessDeserializer<A>","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::U64Deserializer<E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::I32Deserializer<E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::Number","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::U8Deserializer<E>","&'a serde_json::Number","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","serde_json::value::de::MapDeserializer","serde_json::Value","data::_::_serde::de::value::SeqDeserializer<I, E>","&'de serde_json::Value","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::I16Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Field>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["data::_::_serde::de::EnumAccess","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["data::_::_serde::de::value::U32Deserializer<E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::private::de::content::EnumRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::EnumDeserializer<'de, E>","serde_json::value::de::EnumDeserializer","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::StringDeserializer<E>","serde_json::value::de::EnumRefDeserializer<'de>","serde_json::de::VariantAccess<'a, R>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_json::de::UnitVariantAccess<'a, R>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::MonthDelta>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/date.rs <date::MonthDelta as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::MonthDelta
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::MonthDelta as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::MonthDelta as std::fmt::Debug>::fmt(p0, p1);
+<date::MonthDelta>::fmt(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Serialize for date::YearDelta>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::YearDelta>::serialize":{"__S":["data::_::_serde::Serializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::YearDelta>::serialize":{"__S":["data::_::_serde::private::ser::TaggedSerializer<S>","data::_::_serde::private::ser::content::ContentSerializer<E>","serde_json::value::Serializer","serde_json::value::ser::MapKeySerializer","serde_json::ser::MapKeySerializer<'a, W, F>","data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>","data::_::_serde::private::ser::FlatMapSerializer<'a, M>","<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::YearDelta
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+date::_::<impl data::_::_serde::Serialize for date::YearDelta>::serialize(p0, p1);
+crate::date::_::<impl data::_::_serde::Serialize for date::YearDelta>::serialize(p0, p1);
+<date::YearDelta>::serialize(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize":{"__D":["data::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize":{"__D":["data::_::_serde::private::de::content::ContentDeserializer<'de, E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::Value","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::F32Deserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::I16Deserializer<E>","&'a serde_json::Number","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::I8Deserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::I64Deserializer<E>","&'de serde_json::Value","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::private::de::StrDeserializer<'a, E>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","serde_json::Number","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","serde_json::value::de::MapKeyDeserializer<'de>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize(p0);
+crate::date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize(p0);
+<date::YearDelta>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::de::value::U16Deserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::CharDeserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::U64Deserializer<E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","&'de serde_json::Value","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::F32Deserializer<E>","&'a serde_json::Number","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::UsizeDeserializer<E>","serde_json::Value","serde_json::Number","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::PairDeserializer<A, B, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Field>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["data::_::_serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["data::_::_serde::de::value::PairVisitor<A, B, E>","serde_json::value::de::SeqDeserializer","<&'a mut A as data::_::_serde::de::SeqAccess<'de>>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_json::de::SeqAccess<'a, R>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","data::_::_serde::de::MapAccess"]}}
candidates:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde_json::value::de::MapRefDeserializer<'de>","serde_json::value::de::MapDeserializer","data::_::_serde::private::de::FlatStructAccess<'a, 'de, E>","data::_::_serde::private::de::FlatMapAccess<'a, 'de, E>","data::_::_serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::de::MapAccess<'a, R>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","<&'a mut A as data::_::_serde::de::MapAccess<'de>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::YearDelta>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/date.rs <date::YearDelta as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::YearDelta
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::YearDelta as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::YearDelta as std::fmt::Debug>::fmt(p0, p1);
+<date::YearDelta>::fmt(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Serialize for date::RepDelta>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::RepDelta>::serialize":{"__S":["std::marker::Sized","data::_::_serde::Serializer"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::RepDelta>::serialize":{"__S":["data::_::_serde::private::ser::FlatMapSerializer<'a, M>","<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>","serde_json::value::ser::MapKeySerializer","data::_::_serde::private::ser::content::ContentSerializer<E>","serde_json::value::Serializer","serde_json::ser::MapKeySerializer<'a, W, F>","data::_::_serde::private::ser::TaggedSerializer<S>","data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::RepDelta
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+date::_::<impl data::_::_serde::Serialize for date::RepDelta>::serialize(p0, p1);
+crate::date::_::<impl data::_::_serde::Serialize for date::RepDelta>::serialize(p0, p1);
+<date::RepDelta>::serialize(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize":{"__D":["data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","&'de serde_json::Value","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::U64Deserializer<E>","serde_json::de::MapKey<'a, R>","serde_json::Number","serde_json::Value","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::CharDeserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::IsizeDeserializer<E>","&'a serde_json::Number","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::private::de::StrDeserializer<'a, E>","serde_json::value::de::MapRefDeserializer<'de>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::U8Deserializer<E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize(p0);
+crate::date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize(p0);
+<date::RepDelta>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::BoolDeserializer<E>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::I64Deserializer<E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","&'a serde_json::Number","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::I32Deserializer<E>","&'de serde_json::Value","data::_::_serde::de::value::U64Deserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::I16Deserializer<E>","serde_json::Value","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::PairDeserializer<A, B, E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::private::de::StrDeserializer<'a, E>","serde_json::Number"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Field>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["std::marker::Sized","data::_::_serde::de::EnumAccess"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::private::de::content::EnumRefDeserializer<'a, 'de, E>","serde_json::de::VariantAccess<'a, R>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::private::de::content::EnumDeserializer<'de, E>","serde_json::value::de::EnumRefDeserializer<'de>","serde_json::de::UnitVariantAccess<'a, R>","serde_json::value::de::EnumDeserializer","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::StringDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepDelta>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/date.rs <date::RepDelta as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::RepDelta
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::RepDelta as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::RepDelta as std::fmt::Debug>::fmt(p0, p1);
+<date::RepDelta>::fmt(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Serialize for date::RepEnd>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::RepEnd>::serialize":{"__S":["data::_::_serde::Serializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::RepEnd>::serialize":{"__S":["data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>","data::_::_serde::private::ser::content::ContentSerializer<E>","serde_json::ser::MapKeySerializer<'a, W, F>","data::_::_serde::private::ser::TaggedSerializer<S>","data::_::_serde::private::ser::FlatMapSerializer<'a, M>","serde_json::value::Serializer","<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>","serde_json::value::ser::MapKeySerializer"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::RepEnd
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+date::_::<impl data::_::_serde::Serialize for date::RepEnd>::serialize(p0, p1);
+crate::date::_::<impl data::_::_serde::Serialize for date::RepEnd>::serialize(p0, p1);
+<date::RepEnd>::serialize(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize":{"__D":["data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::de::value::U32Deserializer<E>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::UnitDeserializer<E>","&'de serde_json::Value","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::SeqAccessDeserializer<A>","&'a serde_json::Number","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::U8Deserializer<E>","serde_json::Value","data::_::_serde::de::value::SeqDeserializer<I, E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::PairDeserializer<A, B, E>","serde_json::Number","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::I32Deserializer<E>","serde_json::de::MapKey<'a, R>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::F32Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize(p0);
+crate::date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize(p0);
+<date::RepEnd>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>","serde_json::Number","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::I64Deserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::U8Deserializer<E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::StrDeserializer<'a, E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::private::de::StrDeserializer<'a, E>","serde_json::value::de::SeqDeserializer","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::de::value::U64Deserializer<E>","&'de serde_json::Value","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","serde_json::Value","data::_::_serde::de::value::F64Deserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::IsizeDeserializer<E>","&'a serde_json::Number","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::U32Deserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::StringDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Field>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["std::marker::Sized","data::_::_serde::de::EnumAccess"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum":{"__A":["data::_::_serde::private::de::content::EnumDeserializer<'de, E>","serde_json::de::VariantAccess<'a, R>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_json::value::de::EnumDeserializer","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::private::de::content::EnumRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::MapAccessDeserializer<A>","serde_json::value::de::EnumRefDeserializer<'de>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","serde_json::de::UnitVariantAccess<'a, R>","data::_::_serde::de::value::StrDeserializer<'a, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::RepEnd>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
src/date.rs <date::RepEnd as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::RepEnd
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::RepEnd as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::RepEnd as std::fmt::Debug>::fmt(p0, p1);
+<date::RepEnd>::fmt(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Serialize for date::Repetition>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::Repetition>::serialize":{"__S":["std::marker::Sized","data::_::_serde::Serializer"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"date::_::<impl data::_::_serde::Serialize for date::Repetition>::serialize":{"__S":["serde_json::ser::MapKeySerializer<'a, W, F>","data::_::_serde::private::ser::FlatMapSerializer<'a, M>","data::_::_serde::private::ser::TaggedSerializer<S>","data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde_json::value::ser::MapKeySerializer","data::_::_serde::private::ser::content::ContentSerializer<E>","serde_json::value::Serializer"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Repetition
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+date::_::<impl data::_::_serde::Serialize for date::Repetition>::serialize(p0, p1);
+crate::date::_::<impl data::_::_serde::Serialize for date::Repetition>::serialize(p0, p1);
+<date::Repetition>::serialize(p0, p1);
-----------------
src/date.rs date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize":{"__D":["data::_::_serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize":{"__D":["serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::I16Deserializer<E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::MapAccessDeserializer<A>","serde_json::value::de::MapDeserializer","&'a serde_json::Number","data::_::_serde::de::value::U128Deserializer<E>","serde_json::de::MapKey<'a, R>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::CharDeserializer<E>","serde_json::Value","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","&'de serde_json::Value","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::U8Deserializer<E>","serde_json::Number","data::_::_serde::de::value::SeqAccessDeserializer<A>","serde_json::value::de::SeqDeserializer"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize(p0);
+crate::date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize(p0);
+<date::Repetition>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["data::_::_serde::de::Error","std::marker::Sized"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["data::_::_serde::de::value::I128Deserializer<E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::de::value::I16Deserializer<E>","serde_json::value::de::SeqDeserializer","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::U8Deserializer<E>","&'de serde_json::Value","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::U128Deserializer<E>","serde_json::de::MapKey<'a, R>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_json::value::de::MapDeserializer","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::UnitDeserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::I8Deserializer<E>","serde_json::Value","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::IsizeDeserializer<E>","&'a serde_json::Number","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","serde_json::Number","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::F32Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Field>::deserialize(p0);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","data::_::_serde::de::SeqAccess"]}}
candidates:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::PairVisitor<A, B, E>","serde_json::value::de::SeqDeserializer","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_json::value::de::SeqRefDeserializer<'de>","<&'a mut A as data::_::_serde::de::SeqAccess<'de>>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::de::SeqAccess<'a, R>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/date.rs <date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","data::_::_serde::de::MapAccess"]}}
candidates:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["<&'a mut A as data::_::_serde::de::MapAccess<'de>>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::FlatStructAccess<'a, 'de, E>","serde_json::value::de::MapDeserializer","data::_::_serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","serde_json::de::MapAccess<'a, R>","data::_::_serde::private::de::FlatMapAccess<'a, 'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<date::_::<impl data::_::_serde::Deserialize<'de> for date::Repetition>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/date.rs <date::Repetition as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Repetition
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::Repetition as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::Repetition as std::fmt::Debug>::fmt(p0, p1);
+<date::Repetition>::fmt(p0, p1);
-----------------
src/date.rs date::SimpleDate::from_ymd
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
let mut p1 = 0u64; // None+u64
let mut p2 = 0u64; // None+u64
+date::SimpleDate::from_ymd(p0, p1, p2);
+crate::date::SimpleDate::from_ymd(p0, p1, p2);
+<date::SimpleDate>::from_ymd(p0, p1, p2);
-----------------
src/date.rs date::SimpleDate::from_stdin
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::io::StdinLock<'_>
+date::SimpleDate::from_stdin(p0);
+crate::date::SimpleDate::from_stdin(p0);
+<date::SimpleDate>::from_stdin(p0);
-----------------
src/date.rs <date::SimpleDate as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
+p0.cmp(p1);
+<date::SimpleDate as std::cmp::Ord>::cmp(p0, p1);
+crate::<date::SimpleDate as std::cmp::Ord>::cmp(p0, p1);
+<date::SimpleDate>::cmp(p0, p1);
-----------------
src/date.rs <date::SimpleDate as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
+p0.partial_cmp(p1);
+<date::SimpleDate as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<date::SimpleDate as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<date::SimpleDate>::partial_cmp(p0, p1);
-----------------
src/date.rs <&date::SimpleDate as std::ops::Add<&date::Duration>>::add
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::Duration
+p0.add(p1);
+<&date::SimpleDate as std::ops::Add<&date::Duration>>::add(p0, p1);
+crate::<&date::SimpleDate as std::ops::Add<&date::Duration>>::add(p0, p1);
+<&date::SimpleDate>::add(p0, p1);
-----------------
src/date.rs <&date::SimpleDate as std::ops::Sub<&date::Duration>>::sub
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::Duration
+p0.sub(p1);
+<&date::SimpleDate as std::ops::Sub<&date::Duration>>::sub(p0, p1);
+crate::<&date::SimpleDate as std::ops::Sub<&date::Duration>>::sub(p0, p1);
+<&date::SimpleDate>::sub(p0, p1);
-----------------
src/date.rs <&date::SimpleDate as std::ops::Add<&date::RepDelta>>::add
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::RepDelta
+p0.add(p1);
+<&date::SimpleDate as std::ops::Add<&date::RepDelta>>::add(p0, p1);
+crate::<&date::SimpleDate as std::ops::Add<&date::RepDelta>>::add(p0, p1);
+<&date::SimpleDate>::add(p0, p1);
-----------------
src/date.rs <&date::SimpleDate as std::ops::Add<&date::Repetition>>::add
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::Repetition
+p0.add(p1);
+<&date::SimpleDate as std::ops::Add<&date::Repetition>>::add(p0, p1);
+crate::<&date::SimpleDate as std::ops::Add<&date::Repetition>>::add(p0, p1);
+<&date::SimpleDate>::add(p0, p1);
-----------------
src/date.rs date::DayDelta::parse
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+date::DayDelta::parse(&p0);
+crate::date::DayDelta::parse(&p0);
+<date::DayDelta>::parse(&p0);
-----------------
src/date.rs date::WeekDelta::parse
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
+date::WeekDelta::parse(&p0, p1);
+crate::date::WeekDelta::parse(&p0, p1);
+<date::WeekDelta>::parse(&p0, p1);
-----------------
src/date.rs date::WeekDelta::parse_days
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+date::WeekDelta::parse_days(&p0);
+crate::date::WeekDelta::parse_days(&p0);
+<date::WeekDelta>::parse_days(&p0);
-----------------
src/date.rs date::MonthDeltaWeek::weekid_to_str
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::MonthDeltaWeek
+p0.weekid_to_str();
+date::MonthDeltaWeek::weekid_to_str(p0);
+crate::date::MonthDeltaWeek::weekid_to_str(p0);
+<date::MonthDeltaWeek>::weekid_to_str(p0);
-----------------
src/date.rs date::MonthDelta::parse
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
+date::MonthDelta::parse(&p0, p1);
+crate::date::MonthDelta::parse(&p0, p1);
+<date::MonthDelta>::parse(&p0, p1);
-----------------
src/date.rs date::MonthDelta::parse_weekday
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+date::MonthDelta::parse_weekday(&p0);
+crate::date::MonthDelta::parse_weekday(&p0);
+<date::MonthDelta>::parse_weekday(&p0);
-----------------
src/date.rs date::MonthDelta::parse_nth
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+date::MonthDelta::parse_nth(&p0);
+crate::date::MonthDelta::parse_nth(&p0);
+<date::MonthDelta>::parse_nth(&p0);
-----------------
src/date.rs date::YearDelta::parse
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+date::YearDelta::parse(&p0);
+crate::date::YearDelta::parse(&p0);
+<date::YearDelta>::parse(&p0);
-----------------
src/date.rs date::RepEnd::parse
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+date::RepEnd::parse(&p0);
+crate::date::RepEnd::parse(&p0);
+<date::RepEnd>::parse(&p0);
-----------------
src/date.rs date::RepEnd::parse_date
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+date::RepEnd::parse_date(&p0);
+crate::date::RepEnd::parse_date(&p0);
+<date::RepEnd>::parse_date(&p0);
-----------------
src/date.rs date::RepEnd::parse_count
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+date::RepEnd::parse_count(&p0);
+crate::date::RepEnd::parse_count(&p0);
+<date::RepEnd>::parse_count(&p0);
-----------------
src/date.rs date::Repetition::from_stdin
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::io::StdinLock<'_>
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
+date::Repetition::from_stdin(p0, p1);
+crate::date::Repetition::from_stdin(p0, p1);
+<date::Repetition>::from_stdin(p0, p1);
-----------------
src/date.rs <date::Duration as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Duration
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::Duration as std::fmt::Display>::fmt(p0, p1);
+crate::<date::Duration as std::fmt::Display>::fmt(p0, p1);
+<date::Duration>::fmt(p0, p1);
-----------------
src/date.rs <date::SimpleDate as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::SimpleDate as std::fmt::Display>::fmt(p0, p1);
+crate::<date::SimpleDate as std::fmt::Display>::fmt(p0, p1);
+<date::SimpleDate>::fmt(p0, p1);
-----------------
src/date.rs <date::DayDelta as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::DayDelta
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::DayDelta as std::fmt::Display>::fmt(p0, p1);
+crate::<date::DayDelta as std::fmt::Display>::fmt(p0, p1);
+<date::DayDelta>::fmt(p0, p1);
-----------------
src/date.rs <date::Weekday as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Weekday
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::Weekday as std::fmt::Display>::fmt(p0, p1);
+crate::<date::Weekday as std::fmt::Display>::fmt(p0, p1);
+<date::Weekday>::fmt(p0, p1);
-----------------
src/date.rs <date::WeekDelta as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::WeekDelta
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::WeekDelta as std::fmt::Display>::fmt(p0, p1);
+crate::<date::WeekDelta as std::fmt::Display>::fmt(p0, p1);
+<date::WeekDelta>::fmt(p0, p1);
-----------------
src/date.rs <date::MonthDeltaDate as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::MonthDeltaDate
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::MonthDeltaDate as std::fmt::Display>::fmt(p0, p1);
+crate::<date::MonthDeltaDate as std::fmt::Display>::fmt(p0, p1);
+<date::MonthDeltaDate>::fmt(p0, p1);
-----------------
src/date.rs <date::MonthDeltaWeek as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::MonthDeltaWeek
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::MonthDeltaWeek as std::fmt::Display>::fmt(p0, p1);
+crate::<date::MonthDeltaWeek as std::fmt::Display>::fmt(p0, p1);
+<date::MonthDeltaWeek>::fmt(p0, p1);
-----------------
src/date.rs <date::MonthDelta as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::MonthDelta
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::MonthDelta as std::fmt::Display>::fmt(p0, p1);
+crate::<date::MonthDelta as std::fmt::Display>::fmt(p0, p1);
+<date::MonthDelta>::fmt(p0, p1);
-----------------
src/date.rs <date::YearDelta as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::YearDelta
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::YearDelta as std::fmt::Display>::fmt(p0, p1);
+crate::<date::YearDelta as std::fmt::Display>::fmt(p0, p1);
+<date::YearDelta>::fmt(p0, p1);
-----------------
src/date.rs <date::RepDelta as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::RepDelta
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::RepDelta as std::fmt::Display>::fmt(p0, p1);
+crate::<date::RepDelta as std::fmt::Display>::fmt(p0, p1);
+<date::RepDelta>::fmt(p0, p1);
-----------------
src/date.rs <date::RepEnd as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::RepEnd
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::RepEnd as std::fmt::Display>::fmt(p0, p1);
+crate::<date::RepEnd as std::fmt::Display>::fmt(p0, p1);
+<date::RepEnd>::fmt(p0, p1);
-----------------
src/date.rs <date::Repetition as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Repetition
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::Repetition as std::fmt::Display>::fmt(p0, p1);
+crate::<date::Repetition as std::fmt::Display>::fmt(p0, p1);
+<date::Repetition>::fmt(p0, p1);
-----------------
src/date.rs <date::DateError as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::DateError
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::DateError as std::fmt::Display>::fmt(p0, p1);
+crate::<date::DateError as std::fmt::Display>::fmt(p0, p1);
+<date::DateError>::fmt(p0, p1);
-----------------
src/expense.rs expense::_::<impl data::_::_serde::Serialize for expense::Expense>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"expense::_::<impl data::_::_serde::Serialize for expense::Expense>::serialize":{"__S":["std::marker::Sized","data::_::_serde::Serializer"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>":{},"data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"expense::_::<impl data::_::_serde::Serialize for expense::Expense>::serialize":{"__S":["serde_json::value::ser::MapKeySerializer","data::_::_serde::private::ser::TaggedSerializer<S>","data::_::_serde::private::ser::content::ContentSerializer<E>","data::_::_serde::ser::fmt::<impl data::_::_serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde_json::value::Serializer","serde_json::ser::MapKeySerializer<'a, W, F>","<&'a mut serde_json::Serializer<W, F> as data::_::_serde::Serializer>","data::_::_serde::private::ser::FlatMapSerializer<'a, M>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::Expense
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+expense::_::<impl data::_::_serde::Serialize for expense::Expense>::serialize(p0, p1);
+crate::expense::_::<impl data::_::_serde::Serialize for expense::Expense>::serialize(p0, p1);
+<expense::Expense>::serialize(p0, p1);
-----------------
src/expense.rs expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize":{"__D":["data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","data::_::_serde::de::value::BoolDeserializer<E>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","data::_::_serde::de::value::IsizeDeserializer<E>","serde_json::Number","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde_json::value::de::MapDeserializer","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","&'de serde_json::Value","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::U8Deserializer<E>","serde_json::Value","&'a serde_json::Number","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::F32Deserializer<E>","data::_::_serde::private::de::StrDeserializer<'a, E>","data::_::_serde::de::value::I8Deserializer<E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::StringDeserializer<E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::private::de::BytesDeserializer<'a, E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","serde_json::value::de::MapKeyDeserializer<'de>","serde_json::value::de::SeqDeserializer","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::de::value::U64Deserializer<E>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::de::value::MapAccessDeserializer<A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize(p0);
+crate::expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize(p0);
+<expense::Expense>::deserialize(p0);
-----------------
src/expense.rs <expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
src/expense.rs <expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
src/expense.rs <expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str
'de
deps:{"<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str":{"__E":["data::_::_serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
src/expense.rs <expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","data::_::_serde::de::Error"]}}
candidates:{"<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_json::Error","data::_::_serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor as data::_::_serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
src/expense.rs <expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","data::_::_serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>":{},"<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize":{"__D":["&'de serde_json::Value","data::_::_serde::de::value::I8Deserializer<E>","data::_::_serde::de::value::F32Deserializer<E>","&'a serde_json::Number","data::_::_serde::de::value::SeqDeserializer<I, E>","data::_::_serde::de::value::StrDeserializer<'a, E>","data::_::_serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::de::value::CharDeserializer<E>","data::_::_serde::de::value::I128Deserializer<E>","serde_json::Value","data::_::_serde::de::value::U32Deserializer<E>","data::_::_serde::private::de::FlatMapDeserializer<'a, 'de, E>","data::_::_serde::de::value::I16Deserializer<E>","data::_::_serde::de::value::BorrowedStrDeserializer<'de, E>","serde_json::Number","data::_::_serde::de::value::MapAccessDeserializer<A>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","data::_::_serde::de::value::U8Deserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","data::_::_serde::de::value::I32Deserializer<E>","data::_::_serde::private::de::StrDeserializer<'a, E>","serde_json::value::de::MapDeserializer","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::private::de::missing_field::MissingFieldDeserializer<E>","data::_::_serde::de::value::U64Deserializer<E>","serde_json::de::MapKey<'a, R>","data::_::_serde::de::value::F64Deserializer<E>","data::_::_serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::SeqAccessDeserializer<A>","data::_::_serde::de::value::IsizeDeserializer<E>","data::_::_serde::de::value::CowStrDeserializer<'a, E>","data::_::_serde::private::de::content::MapDeserializer<'de, E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","data::_::_serde::de::value::U16Deserializer<E>","data::_::_serde::de::value::U128Deserializer<E>","data::_::_serde::de::value::PairDeserializer<A, B, E>","data::_::_serde::de::value::StringDeserializer<E>","data::_::_serde::de::value::UsizeDeserializer<E>","data::_::_serde::de::value::I64Deserializer<E>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_json::value::de::SeqDeserializer","data::_::_serde::private::de::BytesDeserializer<'a, E>","<&'a mut serde_json::Deserializer<R> as data::_::_serde::Deserializer<'de>>","data::_::_serde::de::value::UnitDeserializer<E>","data::_::_serde::private::de::content::ContentDeserializer<'de, E>","data::_::_serde::de::value::BoolDeserializer<E>","serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+crate::<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Field as data::_::_serde::Deserialize<'de>>::deserialize(p0);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Field>::deserialize(p0);
-----------------
src/expense.rs <expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::expecting(p0, p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
src/expense.rs <expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["data::_::_serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as data::_::_serde::de::SeqAccess<'de>>":{},"<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq":{"__A":["serde_json::value::de::SeqRefDeserializer<'de>","data::_::_serde::de::value::PairVisitor<A, B, E>","serde_json::de::SeqAccess<'a, R>","data::_::_serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","data::_::_serde::private::de::content::SeqDeserializer<'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","serde_json::value::de::SeqDeserializer","<&'a mut A as data::_::_serde::de::SeqAccess<'de>>","data::_::_serde::de::value::SeqDeserializer<I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
src/expense.rs <expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","data::_::_serde::de::MapAccess"]}}
candidates:{"<&'a mut A as data::_::_serde::de::MapAccess<'de>>":{},"<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map":{"__A":["data::_::_serde::private::de::content::MapDeserializer<'de, E>","serde_json::value::de::MapDeserializer","serde_json::de::MapAccess<'a, R>","serde_json::value::de::MapRefDeserializer<'de>","data::_::_serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","data::_::_serde::private::de::content::MapRefDeserializer<'a, 'de, E>","data::_::_serde::de::value::MapDeserializer<'de, I, E>","<&'a mut A as data::_::_serde::de::MapAccess<'de>>","data::_::_serde::private::de::FlatMapAccess<'a, 'de, E>","data::_::_serde::private::de::FlatStructAccess<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de> as data::_::_serde::de::Visitor<'de>>::visit_map(p0, p1);
+<expense::_::<impl data::_::_serde::Deserialize<'de> for expense::Expense>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
src/expense.rs <expense::Expense as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::Expense
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<expense::Expense as std::fmt::Debug>::fmt(p0, p1);
+crate::<expense::Expense as std::fmt::Debug>::fmt(p0, p1);
+<expense::Expense>::fmt(p0, p1);
-----------------
src/expense.rs <expense::ExpenseError as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::ExpenseError
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<expense::ExpenseError as std::fmt::Debug>::fmt(p0, p1);
+crate::<expense::ExpenseError as std::fmt::Debug>::fmt(p0, p1);
+<expense::ExpenseError>::fmt(p0, p1);
-----------------
src/expense.rs expense::Expense::new
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
let mut p1 = std::string::String::new(); // None+std::string::String
let mut p2 = 0i64; // None+i64
let mut p3 = MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p4 = MaybeUninit::uninit().assume_init(); // std::option::Option<date::Duration>
let mut p5 = MaybeUninit::uninit().assume_init(); // std::option::Option<date::Repetition>
let mut p6 = std::string::String::new(); // None+std::vec::Vec<std::string::String>
+expense::Expense::new(p0, p1, p2, p3, p4, p5, p6);
+crate::expense::Expense::new(p0, p1, p2, p3, p4, p5, p6);
+<expense::Expense>::new(p0, p1, p2, p3, p4, p5, p6);
-----------------
src/expense.rs expense::Expense::from_stdin
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::io::StdinLock<'_>
let mut p1 = 0u64; // None+u64
let mut p2 = true; // None+bool
let mut p3 = & std::string::String::new(); // None+std::collections::HashSet<std::string::String>
+expense::Expense::from_stdin(p0, p1, p2, p3);
+crate::expense::Expense::from_stdin(p0, p1, p2, p3);
+<expense::Expense>::from_stdin(p0, p1, p2, p3);
-----------------
src/expense.rs expense::Expense::compare_dates
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::Expense
let mut p1 = & MaybeUninit::uninit().assume_init(); // expense::Expense
+p0.compare_dates(p1);
+expense::Expense::compare_dates(p0, p1);
+crate::expense::Expense::compare_dates(p0, p1);
+<expense::Expense>::compare_dates(p0, p1);
-----------------
src/expense.rs expense::Expense::compare_id
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::Expense
let mut p1 = 0u64; // None+u64
+p0.compare_id(p1);
+expense::Expense::compare_id(p0, p1);
+crate::expense::Expense::compare_id(p0, p1);
+<expense::Expense>::compare_id(p0, p1);
-----------------
src/expense.rs expense::Expense::amount
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::Expense
+p0.amount();
+expense::Expense::amount(p0);
+crate::expense::Expense::amount(p0);
+<expense::Expense>::amount(p0);
-----------------
src/expense.rs expense::Expense::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::Expense
+p0.description();
+expense::Expense::description(p0);
+crate::expense::Expense::description(p0);
+<expense::Expense>::description(p0);
-----------------
src/expense.rs expense::Expense::tags
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::Expense
+p0.tags();
+expense::Expense::tags(p0);
+crate::expense::Expense::tags(p0);
+<expense::Expense>::tags(p0);
-----------------
src/expense.rs expense::Expense::get_end_date
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::Expense
+p0.get_end_date();
+expense::Expense::get_end_date(p0);
+crate::expense::Expense::get_end_date(p0);
+<expense::Expense>::get_end_date(p0);
-----------------
src/expense.rs expense::Expense::get_start_date
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::Expense
+p0.get_start_date();
+expense::Expense::get_start_date(p0);
+crate::expense::Expense::get_start_date(p0);
+<expense::Expense>::get_start_date(p0);
-----------------
src/expense.rs expense::Expense::remove_tags
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // expense::Expense
let mut p1 = "sample"; // None+&str
+p0.remove_tags(&p1);
+expense::Expense::remove_tags(p0, &p1);
+crate::expense::Expense::remove_tags(p0, &p1);
+<expense::Expense>::remove_tags(p0, &p1);
-----------------
src/expense.rs expense::Expense::end_date
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::SimpleDate
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::option::Option<date::Repetition>
let mut p2 = & MaybeUninit::uninit().assume_init(); // std::option::Option<date::Duration>
+expense::Expense::end_date(p0, p1, p2);
+crate::expense::Expense::end_date(p0, p1, p2);
+<expense::Expense>::end_date(p0, p1, p2);
-----------------
src/expense.rs <expense::Expense as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::Expense
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<expense::Expense as std::fmt::Display>::fmt(p0, p1);
+crate::<expense::Expense as std::fmt::Display>::fmt(p0, p1);
+<expense::Expense>::fmt(p0, p1);
-----------------
src/expense.rs <expense::ExpenseError as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // expense::ExpenseError
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<expense::ExpenseError as std::fmt::Display>::fmt(p0, p1);
+crate::<expense::ExpenseError as std::fmt::Display>::fmt(p0, p1);
+<expense::ExpenseError>::fmt(p0, p1);